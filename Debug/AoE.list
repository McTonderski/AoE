
AoE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015448  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003830  08015618  08015618  00025618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018e48  08018e48  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08018e48  08018e48  00028e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018e50  08018e50  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018e50  08018e50  00028e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018e54  08018e54  00028e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08018e58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aa78  20000080  08018ed8  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000aaf8  08018ed8  0003aaf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041d5b  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c9c  00000000  00000000  00071e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  00079aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df8  00000000  00000000  0007ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036129  00000000  00000000  0007d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003251e  00000000  00000000  000b3921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011072a  00000000  00000000  000e5e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f6569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008814  00000000  00000000  001f65bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015600 	.word	0x08015600

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08015600 	.word	0x08015600

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <vApplicationGetIdleTaskMemory+0x30>)
 80005be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	2000009c 	.word	0x2000009c
 80005d8:	200000f0 	.word	0x200000f0

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fa98 	bl	8000b16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f81b 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f887 	bl	80006fc <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <main+0x3c>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fcb6 	bl	8003f76 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <main+0x40>)
 800060e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000610:	f003 fc9a 	bl	8003f48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x38>
 8000616:	bf00      	nop
 8000618:	08015624 	.word	0x08015624
 800061c:	200041e0 	.word	0x200041e0

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f013 ffc4 	bl	80145bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a2a      	ldr	r2, [pc, #168]	; (80006f4 <SystemClock_Config+0xd4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <SystemClock_Config+0xd8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <SystemClock_Config+0xd8>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000688:	2319      	movs	r3, #25
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800068c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 feec 	bl	800247c <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006aa:	f000 f87f 	bl	80007ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ae:	f001 fe95 	bl	80023dc <HAL_PWREx_EnableOverDrive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b8:	f000 f878 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2107      	movs	r1, #7
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 f972 	bl	80029c4 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006e6:	f000 f861 	bl	80007ac <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_GPIO_Init+0x74>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <MX_GPIO_Init+0x74>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_GPIO_Init+0x74>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_GPIO_Init+0x74>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <MX_GPIO_Init+0x74>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_GPIO_Init+0x74>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_GPIO_Init+0x74>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MX_GPIO_Init+0x74>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_GPIO_Init+0x74>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_GPIO_Init+0x74>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <MX_GPIO_Init+0x74>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_GPIO_Init+0x74>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800077c:	f002 fe58 	bl	8003430 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  MX_Echo_TCP();
 8000780:	f002 fdf4 	bl	800336c <MX_Echo_TCP>
 8000784:	e7fc      	b.n	8000780 <StartDefaultTask+0xc>
	...

08000788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d101      	bne.n	800079e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079a:	f000 f9c9 	bl	8000b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40010000 	.word	0x40010000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_MspInit+0x4c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	210f      	movs	r1, #15
 80007f2:	f06f 0001 	mvn.w	r0, #1
 80007f6:	f000 fa97 	bl	8000d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	2019      	movs	r0, #25
 800081e:	f000 fa83 	bl	8000d28 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000822:	2019      	movs	r0, #25
 8000824:	f000 fa9c 	bl	8000d60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <HAL_InitTick+0xa0>)
 800082a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082c:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <HAL_InitTick+0xa0>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6453      	str	r3, [r2, #68]	; 0x44
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <HAL_InitTick+0xa0>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000840:	f107 0210 	add.w	r2, r7, #16
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fa7c 	bl	8002d48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000850:	f002 fa66 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8000854:	4603      	mov	r3, r0
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085c:	4a13      	ldr	r2, [pc, #76]	; (80008ac <HAL_InitTick+0xa4>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	0c9b      	lsrs	r3, r3, #18
 8000864:	3b01      	subs	r3, #1
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_InitTick+0xa8>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <HAL_InitTick+0xac>)
 800086c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_InitTick+0xa8>)
 8000870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000874:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_InitTick+0xa8>)
 8000878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_InitTick+0xa8>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_InitTick+0xa8>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_InitTick+0xa8>)
 800088a:	f002 fa8f 	bl	8002dac <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d104      	bne.n	800089e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000894:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HAL_InitTick+0xa8>)
 8000896:	f002 faeb 	bl	8002e70 <HAL_TIM_Base_Start_IT>
 800089a:	4603      	mov	r3, r0
 800089c:	e000      	b.n	80008a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3730      	adds	r7, #48	; 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	431bde83 	.word	0x431bde83
 80008b0:	200041e4 	.word	0x200041e4
 80008b4:	40010000 	.word	0x40010000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008ea:	f002 fb39 	bl	8002f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200041e4 	.word	0x200041e4

080008f8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <ETH_IRQHandler+0x10>)
 80008fe:	f000 fe1f 	bl	8001540 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20005b58 	.word	0x20005b58

0800090c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
	return 1;
 8000910:	2301      	movs	r3, #1
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <_kill>:

int _kill(int pid, int sig)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <_kill+0x20>)
 8000928:	2216      	movs	r2, #22
 800092a:	601a      	str	r2, [r3, #0]
	return -1;
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	2000aae4 	.word	0x2000aae4

08000940 <_exit>:

void _exit (int status)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000948:	f04f 31ff 	mov.w	r1, #4294967295
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ffe5 	bl	800091c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000952:	e7fe      	b.n	8000952 <_exit+0x12>

08000954 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e00a      	b.n	800097c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000966:	f3af 8000 	nop.w
 800096a:	4601      	mov	r1, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	b2ca      	uxtb	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <_read+0x12>
	}

return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e009      	b.n	80009b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf1      	blt.n	80009a0 <_write+0x12>
	}
	return len;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_close>:

int _close(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
	return -1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ee:	605a      	str	r2, [r3, #4]
	return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_isatty>:

int _isatty(int file)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	return 1;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d205      	bcs.n	8000a6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <_sbrk+0x6c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	e009      	b.n	8000a80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <_sbrk+0x64>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	371c      	adds	r7, #28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	20050000 	.word	0x20050000
 8000a90:	00002000 	.word	0x00002000
 8000a94:	200002f0 	.word	0x200002f0
 8000a98:	2000aaf8 	.word	0x2000aaf8
 8000a9c:	2000aae4 	.word	0x2000aae4

08000aa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aca:	490e      	ldr	r1, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae0:	4c0b      	ldr	r4, [pc, #44]	; (8000b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aee:	f7ff ffd7 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f013 fd23 	bl	801453c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff fd71 	bl	80005dc <main>
  bx  lr    
 8000afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000b08:	08018e58 	.word	0x08018e58
  ldr r2, =_sbss
 8000b0c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000b10:	2000aaf8 	.word	0x2000aaf8

08000b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>

08000b16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f000 f8f9 	bl	8000d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b20:	200f      	movs	r0, #15
 8000b22:	f7ff fe71 	bl	8000808 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b26:	f7ff fe47 	bl	80007b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20004230 	.word	0x20004230

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20004230 	.word	0x20004230

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	05fa0000 	.word	0x05fa0000

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ff4c 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3a:	f7ff ff61 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	6978      	ldr	r0, [r7, #20]
 8000d46:	f7ff ffb1 	bl	8000cac <NVIC_EncodePriority>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff80 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff54 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000d8c:	4ba9      	ldr	r3, [pc, #676]	; (8001034 <HAL_ETH_Init+0x2b8>)
 8000d8e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e181      	b.n	80010a6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d106      	bne.n	8000dbc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f002 fc98 	bl	80036ec <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbc:	4b9e      	ldr	r3, [pc, #632]	; (8001038 <HAL_ETH_Init+0x2bc>)
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	4a9d      	ldr	r2, [pc, #628]	; (8001038 <HAL_ETH_Init+0x2bc>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc8:	4b9b      	ldr	r3, [pc, #620]	; (8001038 <HAL_ETH_Init+0x2bc>)
 8000dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000dd4:	4b99      	ldr	r3, [pc, #612]	; (800103c <HAL_ETH_Init+0x2c0>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	4a98      	ldr	r2, [pc, #608]	; (800103c <HAL_ETH_Init+0x2c0>)
 8000dda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000dde:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000de0:	4b96      	ldr	r3, [pc, #600]	; (800103c <HAL_ETH_Init+0x2c0>)
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	4994      	ldr	r1, [pc, #592]	; (800103c <HAL_ETH_Init+0x2c0>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0201 	orr.w	r2, r2, #1
 8000e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e04:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e06:	f7ff fea7 	bl	8000b58 <HAL_GetTick>
 8000e0a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e0c:	e011      	b.n	8000e32 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000e0e:	f7ff fea3 	bl	8000b58 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e1c:	d909      	bls.n	8000e32 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2203      	movs	r2, #3
 8000e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e139      	b.n	80010a6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e4      	bne.n	8000e0e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f023 031c 	bic.w	r3, r3, #28
 8000e52:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000e54:	f001 ff58 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8000e58:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	4a78      	ldr	r2, [pc, #480]	; (8001040 <HAL_ETH_Init+0x2c4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d908      	bls.n	8000e74 <HAL_ETH_Init+0xf8>
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4a77      	ldr	r2, [pc, #476]	; (8001044 <HAL_ETH_Init+0x2c8>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d804      	bhi.n	8000e74 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e027      	b.n	8000ec4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	4a73      	ldr	r2, [pc, #460]	; (8001044 <HAL_ETH_Init+0x2c8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d908      	bls.n	8000e8e <HAL_ETH_Init+0x112>
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	4a6d      	ldr	r2, [pc, #436]	; (8001034 <HAL_ETH_Init+0x2b8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d204      	bcs.n	8000e8e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f043 030c 	orr.w	r3, r3, #12
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	e01a      	b.n	8000ec4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4a68      	ldr	r2, [pc, #416]	; (8001034 <HAL_ETH_Init+0x2b8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d303      	bcc.n	8000e9e <HAL_ETH_Init+0x122>
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4a6b      	ldr	r2, [pc, #428]	; (8001048 <HAL_ETH_Init+0x2cc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d911      	bls.n	8000ec2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4a69      	ldr	r2, [pc, #420]	; (8001048 <HAL_ETH_Init+0x2cc>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d908      	bls.n	8000eb8 <HAL_ETH_Init+0x13c>
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4a68      	ldr	r2, [pc, #416]	; (800104c <HAL_ETH_Init+0x2d0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d804      	bhi.n	8000eb8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e005      	b.n	8000ec4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	e000      	b.n	8000ec4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000ec2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000ecc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fc17 	bl	8001706 <HAL_ETH_WritePHYRegister>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000ee2:	6939      	ldr	r1, [r7, #16]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fdcd 	bl	8001a84 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e0d7      	b.n	80010a6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000ef6:	20ff      	movs	r0, #255	; 0xff
 8000ef8:	f7ff fe3a 	bl	8000b70 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80a5 	beq.w	8001050 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f06:	f7ff fe27 	bl	8000b58 <HAL_GetTick>
 8000f0a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	461a      	mov	r2, r3
 8000f12:	2101      	movs	r1, #1
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 fb8e 	bl	8001636 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000f1a:	f7ff fe1d 	bl	8000b58 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d90f      	bls.n	8000f4c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f30:	6939      	ldr	r1, [r7, #16]
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fda6 	bl	8001a84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0ac      	b.n	80010a6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0da      	beq.n	8000f0c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000f56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fbd2 	bl	8001706 <HAL_ETH_WritePHYRegister>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f6c:	6939      	ldr	r1, [r7, #16]
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fd88 	bl	8001a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e092      	b.n	80010a6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f80:	f7ff fdea 	bl	8000b58 <HAL_GetTick>
 8000f84:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 fb51 	bl	8001636 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000f94:	f7ff fde0 	bl	8000b58 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d90f      	bls.n	8000fc6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000faa:	6939      	ldr	r1, [r7, #16]
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fd69 	bl	8001a84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e06f      	b.n	80010a6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f003 0320 	and.w	r3, r3, #32
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0da      	beq.n	8000f86 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fb2c 	bl	8001636 <HAL_ETH_ReadPHYRegister>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00b      	beq.n	8000ffc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fe8:	6939      	ldr	r1, [r7, #16]
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fd4a 	bl	8001a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e054      	b.n	80010a6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	e002      	b.n	8001016 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	e035      	b.n	8001094 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	e030      	b.n	8001094 <HAL_ETH_Init+0x318>
 8001032:	bf00      	nop
 8001034:	03938700 	.word	0x03938700
 8001038:	40023800 	.word	0x40023800
 800103c:	40013800 	.word	0x40013800
 8001040:	01312cff 	.word	0x01312cff
 8001044:	02160ebf 	.word	0x02160ebf
 8001048:	05f5e0ff 	.word	0x05f5e0ff
 800104c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001060:	4313      	orrs	r3, r2
 8001062:	b29b      	uxth	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 fb4c 	bl	8001706 <HAL_ETH_WritePHYRegister>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00b      	beq.n	800108c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001078:	6939      	ldr	r1, [r7, #16]
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fd02 	bl	8001a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e00c      	b.n	80010a6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800108c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001090:	f7ff fd6e 	bl	8000b70 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001094:	6939      	ldr	r1, [r7, #16]
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 fcf4 	bl	8001a84 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop

080010b0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_ETH_DMATxDescListInit+0x20>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e052      	b.n	8001176 <HAL_ETH_DMATxDescListInit+0xc6>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2202      	movs	r2, #2
 80010dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e030      	b.n	800114e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010fc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	461a      	mov	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	d208      	bcs.n	8001142 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	015b      	lsls	r3, r3, #5
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	461a      	mov	r2, r3
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	e002      	b.n	8001148 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d3ca      	bcc.n	80010ec <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001160:	440b      	add	r3, r1
 8001162:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001182:	b480      	push	{r7}
 8001184:	b087      	sub	sp, #28
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800119a:	2b01      	cmp	r3, #1
 800119c:	d101      	bne.n	80011a2 <HAL_ETH_DMARxDescListInit+0x20>
 800119e:	2302      	movs	r3, #2
 80011a0:	e056      	b.n	8001250 <HAL_ETH_DMARxDescListInit+0xce>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2202      	movs	r2, #2
 80011ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e034      	b.n	8001228 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	015b      	lsls	r3, r3, #5
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	4413      	add	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011ce:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80011d6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	461a      	mov	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	429a      	cmp	r2, r3
 8001208:	d208      	bcs.n	800121c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	015b      	lsls	r3, r3, #5
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	4413      	add	r3, r2
 8001214:	461a      	mov	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	e002      	b.n	8001222 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	3301      	adds	r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3c6      	bcc.n	80011be <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	f241 030c 	movw	r3, #4108	; 0x100c
 800123a:	440b      	add	r3, r1
 800123c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ETH_TransmitFrame+0x24>
 800127c:	2302      	movs	r3, #2
 800127e:	e0cd      	b.n	800141c <HAL_ETH_TransmitFrame+0x1c0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0b8      	b.n	800141c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da09      	bge.n	80012c8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2212      	movs	r2, #18
 80012b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0a9      	b.n	800141c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d915      	bls.n	80012fe <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	4a54      	ldr	r2, [pc, #336]	; (8001428 <HAL_ETH_TransmitFrame+0x1cc>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0a9b      	lsrs	r3, r3, #10
 80012dc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	4b51      	ldr	r3, [pc, #324]	; (8001428 <HAL_ETH_TransmitFrame+0x1cc>)
 80012e2:	fba3 1302 	umull	r1, r3, r3, r2
 80012e6:	0a9b      	lsrs	r3, r3, #10
 80012e8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	e001      	b.n	8001302 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d11c      	bne.n	8001342 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001316:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001322:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001332:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001340:	e04b      	b.n	80013da <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	e044      	b.n	80013d2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001356:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d107      	bne.n	800136e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800136c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001376:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3b01      	subs	r3, #1
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	429a      	cmp	r2, r3
 8001380:	d116      	bne.n	80013b0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001390:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_ETH_TransmitFrame+0x1d0>)
 8001396:	fb02 f203 	mul.w	r2, r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80013a2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013ae:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013be:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	3301      	adds	r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3b6      	bcc.n	8001348 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f241 0314 	movw	r3, #4116	; 0x1014
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00d      	beq.n	800140a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	f241 0314 	movw	r3, #4116	; 0x1014
 80013f6:	4413      	add	r3, r2
 80013f8:	2204      	movs	r2, #4
 80013fa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f241 0304 	movw	r3, #4100	; 0x1004
 8001404:	4413      	add	r3, r2
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	ac02b00b 	.word	0xac02b00b
 800142c:	fffffa0c 	.word	0xfffffa0c

08001430 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001446:	2302      	movs	r3, #2
 8001448:	e074      	b.n	8001534 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2202      	movs	r2, #2
 8001456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800145a:	e05a      	b.n	8001512 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800146c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001470:	d10d      	bne.n	800148e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
 800148c:	e041      	b.n	8001512 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10b      	bne.n	80014b4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
 80014b2:	e02e      	b.n	8001512 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d103      	bne.n	80014d6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0c1b      	lsrs	r3, r3, #16
 80014de:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014e2:	1f1a      	subs	r2, r3, #4
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e010      	b.n	8001534 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db02      	blt.n	8001522 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d99c      	bls.n	800145c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001558:	2b40      	cmp	r3, #64	; 0x40
 800155a:	d112      	bne.n	8001582 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f002 f967 	bl	8003830 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	f241 0314 	movw	r3, #4116	; 0x1014
 800156a:	4413      	add	r3, r2
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001580:	e01b      	b.n	80015ba <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	f241 0314 	movw	r3, #4116	; 0x1014
 800158a:	4413      	add	r3, r2
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b01      	cmp	r3, #1
 8001594:	d111      	bne.n	80015ba <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f839 	bl	800160e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f241 0314 	movw	r3, #4116	; 0x1014
 80015a4:	4413      	add	r3, r2
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f241 0314 	movw	r3, #4116	; 0x1014
 80015c2:	4413      	add	r3, r2
 80015c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015c8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80015d2:	4413      	add	r3, r2
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015de:	d112      	bne.n	8001606 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f81e 	bl	8001622 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f241 0314 	movw	r3, #4116	; 0x1014
 80015ee:	4413      	add	r3, r2
 80015f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015f4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	460b      	mov	r3, r1
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b82      	cmp	r3, #130	; 0x82
 8001656:	d101      	bne.n	800165c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001658:	2302      	movs	r3, #2
 800165a:	e050      	b.n	80016fe <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2282      	movs	r2, #130	; 0x82
 8001660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f003 031c 	and.w	r3, r3, #28
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8a1b      	ldrh	r3, [r3, #16]
 8001678:	02db      	lsls	r3, r3, #11
 800167a:	b29b      	uxth	r3, r3
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001682:	897b      	ldrh	r3, [r7, #10]
 8001684:	019b      	lsls	r3, r3, #6
 8001686:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f023 0302 	bic.w	r3, r3, #2
 8001696:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80016a8:	f7ff fa56 	bl	8000b58 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016ae:	e015      	b.n	80016dc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80016b0:	f7ff fa52 	bl	8000b58 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016be:	d309      	bcc.n	80016d4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e014      	b.n	80016fe <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1e4      	bne.n	80016b0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	460b      	mov	r3, r1
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b42      	cmp	r3, #66	; 0x42
 8001726:	d101      	bne.n	800172c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001728:	2302      	movs	r3, #2
 800172a:	e04e      	b.n	80017ca <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2242      	movs	r2, #66	; 0x42
 8001730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 031c 	and.w	r3, r3, #28
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8a1b      	ldrh	r3, [r3, #16]
 8001748:	02db      	lsls	r3, r3, #11
 800174a:	b29b      	uxth	r3, r3
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001752:	897b      	ldrh	r3, [r7, #10]
 8001754:	019b      	lsls	r3, r3, #6
 8001756:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4313      	orrs	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001782:	f7ff f9e9 	bl	8000b58 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001788:	e015      	b.n	80017b6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800178a:	f7ff f9e5 	bl	8000b58 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d309      	bcc.n	80017ae <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e00d      	b.n	80017ca <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e4      	bne.n	800178a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_ETH_Start+0x16>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e01f      	b.n	8001828 <HAL_ETH_Start+0x56>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fb45 	bl	8001e88 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fb7c 	bl	8001efc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fc13 	bl	8002030 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fbb0 	bl	8001f70 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fbdd 	bl	8001fd0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ETH_Stop+0x16>
 8001842:	2302      	movs	r3, #2
 8001844:	e01f      	b.n	8001886 <HAL_ETH_Stop+0x56>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2202      	movs	r2, #2
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fba2 	bl	8001fa0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fbcf 	bl	8002000 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fb67 	bl	8001f36 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fbe1 	bl	8002030 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fb27 	bl	8001ec2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_ETH_ConfigMAC+0x1c>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e0e4      	b.n	8001a76 <HAL_ETH_ConfigMAC+0x1e6>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80b1 	beq.w	8001a26 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4b6c      	ldr	r3, [pc, #432]	; (8001a80 <HAL_ETH_ConfigMAC+0x1f0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80018dc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80018e2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80018e8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80018ee:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80018f4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80018fa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001900:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001906:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800190c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001912:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001918:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800191e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001936:	2001      	movs	r0, #1
 8001938:	f7ff f91a 	bl	8000b70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800194c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001952:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001958:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800195e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001964:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800196a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001976:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001978:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001982:	2001      	movs	r0, #1
 8001984:	f7ff f8f4 	bl	8000b70 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001998:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019a2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80019c0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80019c6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80019cc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80019d2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80019d8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff f8bd 	bl	8000b70 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7ff f8aa 	bl	8000b70 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	61da      	str	r2, [r3, #28]
 8001a24:	e01e      	b.n	8001a64 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001a34:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff f88a 	bl	8000b70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	ff20810f 	.word	0xff20810f

08001a84 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0b0      	sub	sp, #192	; 0xc0
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aa0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ace:	663b      	str	r3, [r7, #96]	; 0x60
 8001ad0:	e001      	b.n	8001ad6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ada:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001af0:	2340      	movs	r3, #64	; 0x40
 8001af2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b5c:	4bab      	ldr	r3, [pc, #684]	; (8001e0c <ETH_MACDMAConfig+0x388>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b68:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b6c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b70:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b76:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001b7a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001b7e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001b84:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001b88:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001b8c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001b90:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001b94:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001b98:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7fe ffd9 	bl	8000b70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bcc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001bd0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001bd6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001bdc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001be2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001be8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001bec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001bf4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bf6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7fe ffb4 	bl	8000b70 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c10:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c1a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c24:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c34:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c38:	4013      	ands	r3, r2
 8001c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c42:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c48:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c4e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c54:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c5a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c60:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c74:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7fe ff75 	bl	8000b70 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c8e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c90:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001c94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7fe ff60 	bl	8000b70 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001cc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ccc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d0e:	4413      	add	r3, r2
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001d16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <ETH_MACDMAConfig+0x38c>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d22:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d24:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d26:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d28:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d2a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d2c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d2e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d30:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d32:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d34:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d36:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d38:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d3a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d3e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d42:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d56:	4413      	add	r3, r2
 8001d58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d5c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d66:	4413      	add	r3, r2
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7fe fefe 	bl	8000b70 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d82:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d88:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001d8c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d90:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001d94:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d98:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001d9a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001d9e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dac:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7fe fed7 	bl	8000b70 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dce:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10d      	bne.n	8001df4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f241 031c 	movw	r3, #4124	; 0x101c
 8001de0:	4413      	add	r3, r2
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6811      	ldr	r1, [r2, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <ETH_MACDMAConfig+0x390>)
 8001dea:	431a      	orrs	r2, r3
 8001dec:	f241 031c 	movw	r3, #4124	; 0x101c
 8001df0:	440b      	add	r3, r1
 8001df2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f80b 	bl	8001e18 <ETH_MACAddressConfig>
}
 8001e02:	bf00      	nop
 8001e04:	37c0      	adds	r7, #192	; 0xc0
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	ff20810f 	.word	0xff20810f
 8001e10:	f8de3f23 	.word	0xf8de3f23
 8001e14:	00010040 	.word	0x00010040

08001e18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3305      	adds	r3, #5
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	3204      	adds	r2, #4
 8001e30:	7812      	ldrb	r2, [r2, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <ETH_MACAddressConfig+0x68>)
 8001e3a:	4413      	add	r3, r2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3303      	adds	r3, #3
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	061a      	lsls	r2, r3, #24
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3301      	adds	r3, #1
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <ETH_MACAddressConfig+0x6c>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	6013      	str	r3, [r2, #0]
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40028040 	.word	0x40028040
 8001e84:	40028044 	.word	0x40028044

08001e88 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0208 	orr.w	r2, r2, #8
 8001ea2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7fe fe5f 	bl	8000b70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	601a      	str	r2, [r3, #0]
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0208 	bic.w	r2, r2, #8
 8001edc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7fe fe42 	bl	8000b70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0204 	orr.w	r2, r2, #4
 8001f16:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f7fe fe25 	bl	8000b70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0204 	bic.w	r2, r2, #4
 8001f50:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7fe fe08 	bl	8000b70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6811      	ldr	r1, [r2, #0]
 8001f88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f90:	440b      	add	r3, r1
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6811      	ldr	r1, [r2, #0]
 8001fb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001fbc:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fc0:	440b      	add	r3, r1
 8001fc2:	601a      	str	r2, [r3, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fe0:	4413      	add	r3, r2
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6811      	ldr	r1, [r2, #0]
 8001fe8:	f043 0202 	orr.w	r2, r3, #2
 8001fec:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ff0:	440b      	add	r3, r1
 8001ff2:	601a      	str	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002010:	4413      	add	r3, r2
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6811      	ldr	r1, [r2, #0]
 8002018:	f023 0202 	bic.w	r2, r3, #2
 800201c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002020:	440b      	add	r3, r1
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	f241 0318 	movw	r3, #4120	; 0x1018
 8002044:	4413      	add	r3, r2
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6811      	ldr	r1, [r2, #0]
 800204c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002050:	f241 0318 	movw	r3, #4120	; 0x1018
 8002054:	440b      	add	r3, r1
 8002056:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002060:	4413      	add	r3, r2
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002066:	2001      	movs	r0, #1
 8002068:	f7fe fd82 	bl	8000b70 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6819      	ldr	r1, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	f241 0318 	movw	r3, #4120	; 0x1018
 8002076:	440b      	add	r3, r1
 8002078:	601a      	str	r2, [r3, #0]
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e175      	b.n	8002390 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8164 	bne.w	800238a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d00b      	beq.n	80020e2 <HAL_GPIO_Init+0x5e>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d6:	2b11      	cmp	r3, #17
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b12      	cmp	r3, #18
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x100>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b12      	cmp	r3, #18
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80be 	beq.w	800238a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	4b66      	ldr	r3, [pc, #408]	; (80023a8 <HAL_GPIO_Init+0x324>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a65      	ldr	r2, [pc, #404]	; (80023a8 <HAL_GPIO_Init+0x324>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_GPIO_Init+0x324>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002226:	4a61      	ldr	r2, [pc, #388]	; (80023ac <HAL_GPIO_Init+0x328>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_GPIO_Init+0x32c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d037      	beq.n	80022c2 <HAL_GPIO_Init+0x23e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a57      	ldr	r2, [pc, #348]	; (80023b4 <HAL_GPIO_Init+0x330>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_GPIO_Init+0x23a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a56      	ldr	r2, [pc, #344]	; (80023b8 <HAL_GPIO_Init+0x334>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02b      	beq.n	80022ba <HAL_GPIO_Init+0x236>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a55      	ldr	r2, [pc, #340]	; (80023bc <HAL_GPIO_Init+0x338>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d025      	beq.n	80022b6 <HAL_GPIO_Init+0x232>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a54      	ldr	r2, [pc, #336]	; (80023c0 <HAL_GPIO_Init+0x33c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <HAL_GPIO_Init+0x22e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a53      	ldr	r2, [pc, #332]	; (80023c4 <HAL_GPIO_Init+0x340>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d019      	beq.n	80022ae <HAL_GPIO_Init+0x22a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_GPIO_Init+0x344>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_GPIO_Init+0x226>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a51      	ldr	r2, [pc, #324]	; (80023cc <HAL_GPIO_Init+0x348>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x222>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a50      	ldr	r2, [pc, #320]	; (80023d0 <HAL_GPIO_Init+0x34c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x21e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4f      	ldr	r2, [pc, #316]	; (80023d4 <HAL_GPIO_Init+0x350>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x21a>
 800229a:	2309      	movs	r3, #9
 800229c:	e012      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 800229e:	230a      	movs	r3, #10
 80022a0:	e010      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022a2:	2308      	movs	r3, #8
 80022a4:	e00e      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e00c      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022aa:	2306      	movs	r3, #6
 80022ac:	e00a      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e008      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e004      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x240>
 80022c2:	2300      	movs	r3, #0
 80022c4:	69fa      	ldr	r2, [r7, #28]
 80022c6:	f002 0203 	and.w	r2, r2, #3
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	4093      	lsls	r3, r2
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022d4:	4935      	ldr	r1, [pc, #212]	; (80023ac <HAL_GPIO_Init+0x328>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <HAL_GPIO_Init+0x354>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002306:	4a34      	ldr	r2, [pc, #208]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <HAL_GPIO_Init+0x354>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002330:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800235a:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <HAL_GPIO_Init+0x354>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <HAL_GPIO_Init+0x354>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3301      	adds	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b0f      	cmp	r3, #15
 8002394:	f67f ae86 	bls.w	80020a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40020400 	.word	0x40020400
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40021400 	.word	0x40021400
 80023c8:	40021800 	.word	0x40021800
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	40022000 	.word	0x40022000
 80023d4:	40022400 	.word	0x40022400
 80023d8:	40013c00 	.word	0x40013c00

080023dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a22      	ldr	r2, [pc, #136]	; (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800240a:	f7fe fba5 	bl	8000b58 <HAL_GetTick>
 800240e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002410:	e009      	b.n	8002426 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002412:	f7fe fba1 	bl	8000b58 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002420:	d901      	bls.n	8002426 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e022      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d1ee      	bne.n	8002412 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7fe fb8a 	bl	8000b58 <HAL_GetTick>
 8002444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002446:	e009      	b.n	800245c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002448:	f7fe fb86 	bl	8000b58 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002456:	d901      	bls.n	800245c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e007      	b.n	800246c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002468:	d1ee      	bne.n	8002448 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	40007000 	.word	0x40007000

0800247c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e291      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8087 	beq.w	80025ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d00c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ac:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d112      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
 80024b8:	4b90      	ldr	r3, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c4:	d10b      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c6:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06c      	beq.n	80025ac <HAL_RCC_OscConfig+0x130>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d168      	bne.n	80025ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e26b      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x7a>
 80024e8:	4b84      	ldr	r3, [pc, #528]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a83      	ldr	r2, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e02e      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x9c>
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7b      	ldr	r2, [pc, #492]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0xc0>
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b73      	ldr	r3, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a72      	ldr	r2, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 800253c:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6b      	ldr	r2, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fafc 	bl	8000b58 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe faf8 	bl	8000b58 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e21f      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fae8 	bl	8000b58 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fae4 	bl	8000b58 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e20b      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b57      	ldr	r3, [pc, #348]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x110>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d069      	beq.n	800268e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x190>
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1df      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	493d      	ldr	r1, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e040      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a38      	ldr	r2, [pc, #224]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fa9a 	bl	8000b58 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002628:	f7fe fa96 	bl	8000b58 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1bd      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4929      	ldr	r1, [pc, #164]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
 800265a:	e018      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fa76 	bl	8000b58 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fa72 	bl	8000b58 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e199      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d038      	beq.n	800270c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d019      	beq.n	80026d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe fa53 	bl	8000b58 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7fe fa4f 	bl	8000b58 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e176      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x23a>
 80026d4:	e01a      	b.n	800270c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe fa39 	bl	8000b58 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe fa35 	bl	8000b58 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d903      	bls.n	8002700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e15c      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
 80026fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	4b91      	ldr	r3, [pc, #580]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ee      	bne.n	80026ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a4 	beq.w	8002862 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a87      	ldr	r2, [pc, #540]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	4b82      	ldr	r3, [pc, #520]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800274e:	4b7f      	ldr	r3, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7e      	ldr	r2, [pc, #504]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe f9fd 	bl	8000b58 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe f9f9 	bl	8000b58 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e120      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002774:	4b75      	ldr	r3, [pc, #468]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x31a>
 8002788:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x33c>
 800279e:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a69      	ldr	r2, [pc, #420]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a66      	ldr	r2, [pc, #408]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x35e>
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a60      	ldr	r2, [pc, #384]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a5d      	ldr	r2, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 80027da:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a57      	ldr	r2, [pc, #348]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe f9ad 	bl	8000b58 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe f9a9 	bl	8000b58 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0ce      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x386>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe f997 	bl	8000b58 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe f993 	bl	8000b58 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80a4 	beq.w	80029b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d06b      	beq.n	8002950 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d149      	bne.n	8002914 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a30      	ldr	r2, [pc, #192]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe f964 	bl	8000b58 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe f960 	bl	8000b58 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e087      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	4313      	orrs	r3, r2
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe f934 	bl	8000b58 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe f930 	bl	8000b58 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e057      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x478>
 8002912:	e04f      	b.n	80029b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe f91a 	bl	8000b58 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe f916 	bl	8000b58 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e03d      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x4ac>
 8002946:	e035      	b.n	80029b4 <HAL_RCC_OscConfig+0x538>
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x544>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d028      	beq.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d121      	bne.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11a      	bne.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002986:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	4965      	ldr	r1, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d040      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e073      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06b      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4936      	ldr	r1, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab8:	f7fe f84e 	bl	8000b58 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe f84a 	bl	8000b58 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e053      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d210      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	4922      	ldr	r1, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1cc>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1d0>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1d4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fe46 	bl	8000808 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08018bb4 	.word	0x08018bb4
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b5b0      	push	{r4, r5, r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	6079      	str	r1, [r7, #4]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	60f9      	str	r1, [r7, #12]
 8002baa:	2100      	movs	r1, #0
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002bae:	2100      	movs	r1, #0
 8002bb0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb2:	4952      	ldr	r1, [pc, #328]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb4:	6889      	ldr	r1, [r1, #8]
 8002bb6:	f001 010c 	and.w	r1, r1, #12
 8002bba:	2908      	cmp	r1, #8
 8002bbc:	d00d      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x3e>
 8002bbe:	2908      	cmp	r1, #8
 8002bc0:	f200 8094 	bhi.w	8002cec <HAL_RCC_GetSysClockFreq+0x150>
 8002bc4:	2900      	cmp	r1, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x32>
 8002bc8:	2904      	cmp	r1, #4
 8002bca:	d003      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x38>
 8002bcc:	e08e      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bce:	4b4c      	ldr	r3, [pc, #304]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bd0:	60bb      	str	r3, [r7, #8]
      break;
 8002bd2:	e08e      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002bd6:	60bb      	str	r3, [r7, #8]
      break;
 8002bd8:	e08b      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bda:	4948      	ldr	r1, [pc, #288]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002bdc:	6849      	ldr	r1, [r1, #4]
 8002bde:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002be2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002be4:	4945      	ldr	r1, [pc, #276]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002be6:	6849      	ldr	r1, [r1, #4]
 8002be8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002bec:	2900      	cmp	r1, #0
 8002bee:	d024      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf0:	4942      	ldr	r1, [pc, #264]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002bf2:	6849      	ldr	r1, [r1, #4]
 8002bf4:	0989      	lsrs	r1, r1, #6
 8002bf6:	4608      	mov	r0, r1
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002c00:	f04f 0500 	mov.w	r5, #0
 8002c04:	ea00 0204 	and.w	r2, r0, r4
 8002c08:	ea01 0305 	and.w	r3, r1, r5
 8002c0c:	493d      	ldr	r1, [pc, #244]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c0e:	fb01 f003 	mul.w	r0, r1, r3
 8002c12:	2100      	movs	r1, #0
 8002c14:	fb01 f102 	mul.w	r1, r1, r2
 8002c18:	1844      	adds	r4, r0, r1
 8002c1a:	493a      	ldr	r1, [pc, #232]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c1c:	fba2 0101 	umull	r0, r1, r2, r1
 8002c20:	1863      	adds	r3, r4, r1
 8002c22:	4619      	mov	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	f7fd fb40 	bl	80002b0 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4613      	mov	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e04a      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	099b      	lsrs	r3, r3, #6
 8002c40:	461a      	mov	r2, r3
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	ea02 0400 	and.w	r4, r2, r0
 8002c52:	ea03 0501 	and.w	r5, r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	014b      	lsls	r3, r1, #5
 8002c64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c68:	0142      	lsls	r2, r0, #5
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	1b00      	subs	r0, r0, r4
 8002c70:	eb61 0105 	sbc.w	r1, r1, r5
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	018b      	lsls	r3, r1, #6
 8002c7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c82:	0182      	lsls	r2, r0, #6
 8002c84:	1a12      	subs	r2, r2, r0
 8002c86:	eb63 0301 	sbc.w	r3, r3, r1
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	00d9      	lsls	r1, r3, #3
 8002c94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c98:	00d0      	lsls	r0, r2, #3
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	1912      	adds	r2, r2, r4
 8002ca0:	eb45 0303 	adc.w	r3, r5, r3
 8002ca4:	f04f 0000 	mov.w	r0, #0
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	0299      	lsls	r1, r3, #10
 8002cae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cb2:	0290      	lsls	r0, r2, #10
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	f7fd faf4 	bl	80002b0 <__aeabi_uldivmod>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4613      	mov	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce8:	60bb      	str	r3, [r7, #8]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x164>)
 8002cee:	60bb      	str	r3, [r7, #8]
      break;
 8002cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	017d7840 	.word	0x017d7840

08002d08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000

08002d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0b5b      	lsrs	r3, r3, #13
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	08018bc4 	.word	0x08018bc4

08002d48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	220f      	movs	r2, #15
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_RCC_GetClockConfig+0x60>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	601a      	str	r2, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40023c00 	.word	0x40023c00

08002dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e049      	b.n	8002e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f841 	bl	8002e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3304      	adds	r3, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f000 fa00 	bl	80031f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d001      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e054      	b.n	8002f32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_TIM_Base_Start_IT+0xe4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <HAL_TIM_Base_Start_IT+0xe8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d115      	bne.n	8002f1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_TIM_Base_Start_IT+0xec>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d015      	beq.n	8002f2e <HAL_TIM_Base_Start_IT+0xbe>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f08:	d011      	beq.n	8002f2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1a:	e008      	b.n	8002f2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e000      	b.n	8002f30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	40010400 	.word	0x40010400
 8002f54:	40014000 	.word	0x40014000
 8002f58:	40001800 	.word	0x40001800
 8002f5c:	00010007 	.word	0x00010007

08002f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d122      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0202 	mvn.w	r2, #2
 8002f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f905 	bl	80031b2 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f8f7 	bl	800319e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f908 	bl	80031c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d122      	bne.n	8003010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d11b      	bne.n	8003010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0204 	mvn.w	r2, #4
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f8db 	bl	80031b2 <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8cd 	bl	800319e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f8de 	bl	80031c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b08      	cmp	r3, #8
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b08      	cmp	r3, #8
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0208 	mvn.w	r2, #8
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f8b1 	bl	80031b2 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8a3 	bl	800319e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f8b4 	bl	80031c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b10      	cmp	r3, #16
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b10      	cmp	r3, #16
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0210 	mvn.w	r2, #16
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2208      	movs	r2, #8
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f887 	bl	80031b2 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f879 	bl	800319e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f88a 	bl	80031c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d10e      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0201 	mvn.w	r2, #1
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fb52 	bl	8000788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b80      	cmp	r3, #128	; 0x80
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f91a 	bl	8003344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311e:	d10e      	bne.n	800313e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d107      	bne.n	800313e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f90d 	bl	8003358 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d10e      	bne.n	800316a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d107      	bne.n	800316a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f838 	bl	80031da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d10e      	bne.n	8003196 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b20      	cmp	r3, #32
 8003184:	d107      	bne.n	8003196 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0220 	mvn.w	r2, #32
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f8cd 	bl	8003330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a40      	ldr	r2, [pc, #256]	; (8003304 <TIM_Base_SetConfig+0x114>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d00f      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a3d      	ldr	r2, [pc, #244]	; (8003308 <TIM_Base_SetConfig+0x118>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3c      	ldr	r2, [pc, #240]	; (800330c <TIM_Base_SetConfig+0x11c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <TIM_Base_SetConfig+0x120>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <TIM_Base_SetConfig+0x124>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <TIM_Base_SetConfig+0x114>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d02b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d027      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <TIM_Base_SetConfig+0x118>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d023      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2b      	ldr	r2, [pc, #172]	; (800330c <TIM_Base_SetConfig+0x11c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01f      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <TIM_Base_SetConfig+0x120>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a29      	ldr	r2, [pc, #164]	; (8003314 <TIM_Base_SetConfig+0x124>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d017      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a28      	ldr	r2, [pc, #160]	; (8003318 <TIM_Base_SetConfig+0x128>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <TIM_Base_SetConfig+0x12c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00f      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a26      	ldr	r2, [pc, #152]	; (8003320 <TIM_Base_SetConfig+0x130>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a25      	ldr	r2, [pc, #148]	; (8003324 <TIM_Base_SetConfig+0x134>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a24      	ldr	r2, [pc, #144]	; (8003328 <TIM_Base_SetConfig+0x138>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a23      	ldr	r2, [pc, #140]	; (800332c <TIM_Base_SetConfig+0x13c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <TIM_Base_SetConfig+0x114>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_Base_SetConfig+0xf8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <TIM_Base_SetConfig+0x124>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d103      	bne.n	80032f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	615a      	str	r2, [r3, #20]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40010000 	.word	0x40010000
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40000c00 	.word	0x40000c00
 8003314:	40010400 	.word	0x40010400
 8003318:	40014000 	.word	0x40014000
 800331c:	40014400 	.word	0x40014400
 8003320:	40014800 	.word	0x40014800
 8003324:	40001800 	.word	0x40001800
 8003328:	40001c00 	.word	0x40001c00
 800332c:	40002000 	.word	0x40002000

08003330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <MX_Echo_TCP>:
	netmask.addr = 0;
	gw.addr = 0;
}

void MX_Echo_TCP()
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
    struct netbuf* buffer;
    void* data;
    u16_t len;
    err_t recv_err;
    //Makro tworzące nową strukturę oraz inuicjalizyjące ją nowymi wartościami.
    connection = netconn_new(NETCONN_TCP);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	2010      	movs	r0, #16
 8003378:	f003 fe0e 	bl	8006f98 <netconn_new_with_proto_and_callback>
 800337c:	6178      	str	r0, [r7, #20]
    if (connection != NULL)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d050      	beq.n	8003426 <MX_Echo_TCP+0xba>
    {
        err = netconn_bind(connection, NULL, 8080);       //Przypisz połączenie do portu 80
 8003384:	f641 7290 	movw	r2, #8080	; 0x1f90
 8003388:	2100      	movs	r1, #0
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f003 febe 	bl	800710c <netconn_bind>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]
        if (err == ERR_OK)
 8003394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d140      	bne.n	800341e <MX_Echo_TCP+0xb2>
        {
            netconn_listen(connection);                 //Połączenie zamienione na tryb słuchania
 800339c:	21ff      	movs	r1, #255	; 0xff
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f003 feec 	bl	800717c <netconn_listen_with_backlog>
            while (1)
            {
                //Funkcja oczekujaca na polaczenie od klienta
                accept_err = netconn_accept(connection, &newconnection);
 80033a4:	f107 030c 	add.w	r3, r7, #12
 80033a8:	4619      	mov	r1, r3
 80033aa:	6978      	ldr	r0, [r7, #20]
 80033ac:	f003 ff12 	bl	80071d4 <netconn_accept>
 80033b0:	4603      	mov	r3, r0
 80033b2:	74bb      	strb	r3, [r7, #18]
                //Obsluga polaczenia
                if (accept_err == ERR_OK)
 80033b4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f3      	bne.n	80033a4 <MX_Echo_TCP+0x38>
                {
                    while ((recv_err = netconn_recv(newconnection, &buffer)) == ERR_OK)
 80033bc:	e019      	b.n	80033f2 <MX_Echo_TCP+0x86>
                    {
                        do
                        {
                           netbuf_data(buffer, &data, &len);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	1cba      	adds	r2, r7, #2
 80033c2:	1d39      	adds	r1, r7, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f005 fea3 	bl	8009110 <netbuf_data>
                           netconn_write(newconnection, data, len, NETCONN_COPY);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	887b      	ldrh	r3, [r7, #2]
 80033d0:	461a      	mov	r2, r3
 80033d2:	2300      	movs	r3, #0
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2301      	movs	r3, #1
 80033d8:	f004 f97e 	bl	80076d8 <netconn_write_partly>
                        }
                        while (netbuf_next(buffer) >= 0);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f005 fee0 	bl	80091a4 <netbuf_next>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	dae9      	bge.n	80033be <MX_Echo_TCP+0x52>
                       netbuf_delete(buffer);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f005 fe6f 	bl	80090d0 <netbuf_delete>
                    while ((recv_err = netconn_recv(newconnection, &buffer)) == ERR_OK)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f107 0208 	add.w	r2, r7, #8
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f004 f8f2 	bl	80075e4 <netconn_recv>
 8003400:	4603      	mov	r3, r0
 8003402:	747b      	strb	r3, [r7, #17]
 8003404:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0d8      	beq.n	80033be <MX_Echo_TCP+0x52>
                    }
                    //Zamknij polaczenie
                    netconn_close(newconnection);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	f004 fa64 	bl	80078dc <netconn_close>
                    netconn_delete(newconnection);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f003 fe5c 	bl	80070d4 <netconn_delete>
                accept_err = netconn_accept(connection, &newconnection);
 800341c:	e7c2      	b.n	80033a4 <MX_Echo_TCP+0x38>
                }
            }
        }
        else { netconn_delete(newconnection); }  //Nie udalo się nawiazac polaczenia
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	f003 fe57 	bl	80070d4 <netconn_delete>
    }
}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003430:	b5b0      	push	{r4, r5, r7, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
 8003434:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003436:	4ba0      	ldr	r3, [pc, #640]	; (80036b8 <MX_LWIP_Init+0x288>)
 8003438:	22c0      	movs	r2, #192	; 0xc0
 800343a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800343c:	4b9e      	ldr	r3, [pc, #632]	; (80036b8 <MX_LWIP_Init+0x288>)
 800343e:	22a8      	movs	r2, #168	; 0xa8
 8003440:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 3;
 8003442:	4b9d      	ldr	r3, [pc, #628]	; (80036b8 <MX_LWIP_Init+0x288>)
 8003444:	2203      	movs	r2, #3
 8003446:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 42;
 8003448:	4b9b      	ldr	r3, [pc, #620]	; (80036b8 <MX_LWIP_Init+0x288>)
 800344a:	222a      	movs	r2, #42	; 0x2a
 800344c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800344e:	4b9b      	ldr	r3, [pc, #620]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003454:	4b99      	ldr	r3, [pc, #612]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003456:	22ff      	movs	r2, #255	; 0xff
 8003458:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800345a:	4b98      	ldr	r3, [pc, #608]	; (80036bc <MX_LWIP_Init+0x28c>)
 800345c:	22ff      	movs	r2, #255	; 0xff
 800345e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003460:	4b96      	ldr	r3, [pc, #600]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003462:	2200      	movs	r2, #0
 8003464:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003466:	4b96      	ldr	r3, [pc, #600]	; (80036c0 <MX_LWIP_Init+0x290>)
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800346c:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <MX_LWIP_Init+0x290>)
 800346e:	2200      	movs	r2, #0
 8003470:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003472:	4b93      	ldr	r3, [pc, #588]	; (80036c0 <MX_LWIP_Init+0x290>)
 8003474:	2200      	movs	r2, #0
 8003476:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003478:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <MX_LWIP_Init+0x290>)
 800347a:	2200      	movs	r2, #0
 800347c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800347e:	2100      	movs	r1, #0
 8003480:	2000      	movs	r0, #0
 8003482:	f006 f82d 	bl	80094e0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003486:	4b8c      	ldr	r3, [pc, #560]	; (80036b8 <MX_LWIP_Init+0x288>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	061a      	lsls	r2, r3, #24
 800348c:	4b8a      	ldr	r3, [pc, #552]	; (80036b8 <MX_LWIP_Init+0x288>)
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	4b88      	ldr	r3, [pc, #544]	; (80036b8 <MX_LWIP_Init+0x288>)
 8003496:	789b      	ldrb	r3, [r3, #2]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	4313      	orrs	r3, r2
 800349c:	4a86      	ldr	r2, [pc, #536]	; (80036b8 <MX_LWIP_Init+0x288>)
 800349e:	78d2      	ldrb	r2, [r2, #3]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	061a      	lsls	r2, r3, #24
 80034a4:	4b84      	ldr	r3, [pc, #528]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	0619      	lsls	r1, r3, #24
 80034aa:	4b83      	ldr	r3, [pc, #524]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034ac:	785b      	ldrb	r3, [r3, #1]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	4319      	orrs	r1, r3
 80034b2:	4b81      	ldr	r3, [pc, #516]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034b4:	789b      	ldrb	r3, [r3, #2]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	430b      	orrs	r3, r1
 80034ba:	497f      	ldr	r1, [pc, #508]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034bc:	78c9      	ldrb	r1, [r1, #3]
 80034be:	430b      	orrs	r3, r1
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034c6:	431a      	orrs	r2, r3
 80034c8:	4b7b      	ldr	r3, [pc, #492]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	0619      	lsls	r1, r3, #24
 80034ce:	4b7a      	ldr	r3, [pc, #488]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034d0:	785b      	ldrb	r3, [r3, #1]
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	4319      	orrs	r1, r3
 80034d6:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034d8:	789b      	ldrb	r3, [r3, #2]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	430b      	orrs	r3, r1
 80034de:	4976      	ldr	r1, [pc, #472]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034e0:	78c9      	ldrb	r1, [r1, #3]
 80034e2:	430b      	orrs	r3, r1
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034ea:	431a      	orrs	r2, r3
 80034ec:	4b72      	ldr	r3, [pc, #456]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	0619      	lsls	r1, r3, #24
 80034f2:	4b71      	ldr	r3, [pc, #452]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034f4:	785b      	ldrb	r3, [r3, #1]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	4319      	orrs	r1, r3
 80034fa:	4b6f      	ldr	r3, [pc, #444]	; (80036b8 <MX_LWIP_Init+0x288>)
 80034fc:	789b      	ldrb	r3, [r3, #2]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	430b      	orrs	r3, r1
 8003502:	496d      	ldr	r1, [pc, #436]	; (80036b8 <MX_LWIP_Init+0x288>)
 8003504:	78c9      	ldrb	r1, [r1, #3]
 8003506:	430b      	orrs	r3, r1
 8003508:	0e1b      	lsrs	r3, r3, #24
 800350a:	4313      	orrs	r3, r2
 800350c:	4a6d      	ldr	r2, [pc, #436]	; (80036c4 <MX_LWIP_Init+0x294>)
 800350e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003510:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	061a      	lsls	r2, r3, #24
 8003516:	4b69      	ldr	r3, [pc, #420]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	4b67      	ldr	r3, [pc, #412]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003520:	789b      	ldrb	r3, [r3, #2]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	4313      	orrs	r3, r2
 8003526:	4a65      	ldr	r2, [pc, #404]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003528:	78d2      	ldrb	r2, [r2, #3]
 800352a:	4313      	orrs	r3, r2
 800352c:	061a      	lsls	r2, r3, #24
 800352e:	4b63      	ldr	r3, [pc, #396]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	0619      	lsls	r1, r3, #24
 8003534:	4b61      	ldr	r3, [pc, #388]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003536:	785b      	ldrb	r3, [r3, #1]
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	4319      	orrs	r1, r3
 800353c:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <MX_LWIP_Init+0x28c>)
 800353e:	789b      	ldrb	r3, [r3, #2]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	430b      	orrs	r3, r1
 8003544:	495d      	ldr	r1, [pc, #372]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003546:	78c9      	ldrb	r1, [r1, #3]
 8003548:	430b      	orrs	r3, r1
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003550:	431a      	orrs	r2, r3
 8003552:	4b5a      	ldr	r3, [pc, #360]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	0619      	lsls	r1, r3, #24
 8003558:	4b58      	ldr	r3, [pc, #352]	; (80036bc <MX_LWIP_Init+0x28c>)
 800355a:	785b      	ldrb	r3, [r3, #1]
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	4319      	orrs	r1, r3
 8003560:	4b56      	ldr	r3, [pc, #344]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003562:	789b      	ldrb	r3, [r3, #2]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	430b      	orrs	r3, r1
 8003568:	4954      	ldr	r1, [pc, #336]	; (80036bc <MX_LWIP_Init+0x28c>)
 800356a:	78c9      	ldrb	r1, [r1, #3]
 800356c:	430b      	orrs	r3, r1
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003574:	431a      	orrs	r2, r3
 8003576:	4b51      	ldr	r3, [pc, #324]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	0619      	lsls	r1, r3, #24
 800357c:	4b4f      	ldr	r3, [pc, #316]	; (80036bc <MX_LWIP_Init+0x28c>)
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	4319      	orrs	r1, r3
 8003584:	4b4d      	ldr	r3, [pc, #308]	; (80036bc <MX_LWIP_Init+0x28c>)
 8003586:	789b      	ldrb	r3, [r3, #2]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	430b      	orrs	r3, r1
 800358c:	494b      	ldr	r1, [pc, #300]	; (80036bc <MX_LWIP_Init+0x28c>)
 800358e:	78c9      	ldrb	r1, [r1, #3]
 8003590:	430b      	orrs	r3, r1
 8003592:	0e1b      	lsrs	r3, r3, #24
 8003594:	4313      	orrs	r3, r2
 8003596:	4a4c      	ldr	r2, [pc, #304]	; (80036c8 <MX_LWIP_Init+0x298>)
 8003598:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800359a:	4b49      	ldr	r3, [pc, #292]	; (80036c0 <MX_LWIP_Init+0x290>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	061a      	lsls	r2, r3, #24
 80035a0:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035a2:	785b      	ldrb	r3, [r3, #1]
 80035a4:	041b      	lsls	r3, r3, #16
 80035a6:	431a      	orrs	r2, r3
 80035a8:	4b45      	ldr	r3, [pc, #276]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035aa:	789b      	ldrb	r3, [r3, #2]
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	4313      	orrs	r3, r2
 80035b0:	4a43      	ldr	r2, [pc, #268]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035b2:	78d2      	ldrb	r2, [r2, #3]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	061a      	lsls	r2, r3, #24
 80035b8:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	0619      	lsls	r1, r3, #24
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035c0:	785b      	ldrb	r3, [r3, #1]
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	4319      	orrs	r1, r3
 80035c6:	4b3e      	ldr	r3, [pc, #248]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035c8:	789b      	ldrb	r3, [r3, #2]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	430b      	orrs	r3, r1
 80035ce:	493c      	ldr	r1, [pc, #240]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035d0:	78c9      	ldrb	r1, [r1, #3]
 80035d2:	430b      	orrs	r3, r1
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035da:	431a      	orrs	r2, r3
 80035dc:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	0619      	lsls	r1, r3, #24
 80035e2:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	4319      	orrs	r1, r3
 80035ea:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035ec:	789b      	ldrb	r3, [r3, #2]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	430b      	orrs	r3, r1
 80035f2:	4933      	ldr	r1, [pc, #204]	; (80036c0 <MX_LWIP_Init+0x290>)
 80035f4:	78c9      	ldrb	r1, [r1, #3]
 80035f6:	430b      	orrs	r3, r1
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035fe:	431a      	orrs	r2, r3
 8003600:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <MX_LWIP_Init+0x290>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	0619      	lsls	r1, r3, #24
 8003606:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <MX_LWIP_Init+0x290>)
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	4319      	orrs	r1, r3
 800360e:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <MX_LWIP_Init+0x290>)
 8003610:	789b      	ldrb	r3, [r3, #2]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	430b      	orrs	r3, r1
 8003616:	492a      	ldr	r1, [pc, #168]	; (80036c0 <MX_LWIP_Init+0x290>)
 8003618:	78c9      	ldrb	r1, [r1, #3]
 800361a:	430b      	orrs	r3, r1
 800361c:	0e1b      	lsrs	r3, r3, #24
 800361e:	4313      	orrs	r3, r2
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <MX_LWIP_Init+0x29c>)
 8003622:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003624:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <MX_LWIP_Init+0x2a0>)
 8003626:	9302      	str	r3, [sp, #8]
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <MX_LWIP_Init+0x2a4>)
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	2300      	movs	r3, #0
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <MX_LWIP_Init+0x29c>)
 8003632:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <MX_LWIP_Init+0x298>)
 8003634:	4923      	ldr	r1, [pc, #140]	; (80036c4 <MX_LWIP_Init+0x294>)
 8003636:	4828      	ldr	r0, [pc, #160]	; (80036d8 <MX_LWIP_Init+0x2a8>)
 8003638:	f006 fcd6 	bl	8009fe8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800363c:	4826      	ldr	r0, [pc, #152]	; (80036d8 <MX_LWIP_Init+0x2a8>)
 800363e:	f006 fe85 	bl	800a34c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003642:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <MX_LWIP_Init+0x2a8>)
 8003644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003654:	4820      	ldr	r0, [pc, #128]	; (80036d8 <MX_LWIP_Init+0x2a8>)
 8003656:	f006 fe89 	bl	800a36c <netif_set_up>
 800365a:	e002      	b.n	8003662 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800365c:	481e      	ldr	r0, [pc, #120]	; (80036d8 <MX_LWIP_Init+0x2a8>)
 800365e:	f006 fef1 	bl	800a444 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003662:	491e      	ldr	r1, [pc, #120]	; (80036dc <MX_LWIP_Init+0x2ac>)
 8003664:	481c      	ldr	r0, [pc, #112]	; (80036d8 <MX_LWIP_Init+0x2a8>)
 8003666:	f006 ff83 	bl	800a570 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8003672:	f107 0320 	add.w	r3, r7, #32
 8003676:	2101      	movs	r1, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fd79 	bl	8004170 <osSemaphoreCreate>
 800367e:	4603      	mov	r3, r0
 8003680:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <MX_LWIP_Init+0x2b0>)
 8003682:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <MX_LWIP_Init+0x2b4>)
 8003686:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <MX_LWIP_Init+0x2a8>)
 8003688:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <MX_LWIP_Init+0x2b0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <MX_LWIP_Init+0x2b4>)
 8003690:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <MX_LWIP_Init+0x2b8>)
 8003694:	1d3c      	adds	r4, r7, #4
 8003696:	461d      	mov	r5, r3
 8003698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800369a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800369c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80036a4:	1d3b      	adds	r3, r7, #4
 80036a6:	490f      	ldr	r1, [pc, #60]	; (80036e4 <MX_LWIP_Init+0x2b4>)
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fc64 	bl	8003f76 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bdb0      	pop	{r4, r5, r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000427c 	.word	0x2000427c
 80036bc:	20004278 	.word	0x20004278
 80036c0:	2000423c 	.word	0x2000423c
 80036c4:	20004274 	.word	0x20004274
 80036c8:	20004280 	.word	0x20004280
 80036cc:	20004284 	.word	0x20004284
 80036d0:	080093f1 	.word	0x080093f1
 80036d4:	08003d05 	.word	0x08003d05
 80036d8:	20004240 	.word	0x20004240
 80036dc:	08003de9 	.word	0x08003de9
 80036e0:	200002f4 	.word	0x200002f4
 80036e4:	20004234 	.word	0x20004234
 80036e8:	08015648 	.word	0x08015648

080036ec <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08e      	sub	sp, #56	; 0x38
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a44      	ldr	r2, [pc, #272]	; (800381c <HAL_ETH_MspInit+0x130>)
 800370a:	4293      	cmp	r3, r2
 800370c:	f040 8081 	bne.w	8003812 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003710:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	4a42      	ldr	r2, [pc, #264]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800371a:	6313      	str	r3, [r2, #48]	; 0x30
 800371c:	4b40      	ldr	r3, [pc, #256]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	623b      	str	r3, [r7, #32]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	4a3c      	ldr	r2, [pc, #240]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800372e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003732:	6313      	str	r3, [r2, #48]	; 0x30
 8003734:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4b37      	ldr	r3, [pc, #220]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	4a36      	ldr	r2, [pc, #216]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003746:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800374a:	6313      	str	r3, [r2, #48]	; 0x30
 800374c:	4b34      	ldr	r3, [pc, #208]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	4a30      	ldr	r2, [pc, #192]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800375e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003762:	6313      	str	r3, [r2, #48]	; 0x30
 8003764:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	6313      	str	r3, [r2, #48]	; 0x30
 800377c:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	4a24      	ldr	r2, [pc, #144]	; (8003820 <HAL_ETH_MspInit+0x134>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6313      	str	r3, [r2, #48]	; 0x30
 8003794:	4b22      	ldr	r3, [pc, #136]	; (8003820 <HAL_ETH_MspInit+0x134>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 80037a0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a6:	2302      	movs	r3, #2
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ae:	2303      	movs	r3, #3
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037b2:	230b      	movs	r3, #11
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ba:	4619      	mov	r1, r3
 80037bc:	4819      	ldr	r0, [pc, #100]	; (8003824 <HAL_ETH_MspInit+0x138>)
 80037be:	f7fe fc61 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80037c2:	2332      	movs	r3, #50	; 0x32
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	2303      	movs	r3, #3
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037d2:	230b      	movs	r3, #11
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037da:	4619      	mov	r1, r3
 80037dc:	4812      	ldr	r0, [pc, #72]	; (8003828 <HAL_ETH_MspInit+0x13c>)
 80037de:	f7fe fc51 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80037e2:	2386      	movs	r3, #134	; 0x86
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ee:	2303      	movs	r3, #3
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037f2:	230b      	movs	r3, #11
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fa:	4619      	mov	r1, r3
 80037fc:	480b      	ldr	r0, [pc, #44]	; (800382c <HAL_ETH_MspInit+0x140>)
 80037fe:	f7fe fc41 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2105      	movs	r1, #5
 8003806:	203d      	movs	r0, #61	; 0x3d
 8003808:	f7fd fa8e 	bl	8000d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800380c:	203d      	movs	r0, #61	; 0x3d
 800380e:	f7fd faa7 	bl	8000d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003812:	bf00      	nop
 8003814:	3738      	adds	r7, #56	; 0x38
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40028000 	.word	0x40028000
 8003820:	40023800 	.word	0x40023800
 8003824:	40021800 	.word	0x40021800
 8003828:	40020800 	.word	0x40020800
 800382c:	40020000 	.word	0x40020000

08003830 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_ETH_RxCpltCallback+0x1c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fd17 	bl	8004270 <osSemaphoreRelease>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200002f8 	.word	0x200002f8

08003850 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003850:	b5b0      	push	{r4, r5, r7, lr}
 8003852:	b090      	sub	sp, #64	; 0x40
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800385c:	4b60      	ldr	r3, [pc, #384]	; (80039e0 <low_level_init+0x190>)
 800385e:	4a61      	ldr	r2, [pc, #388]	; (80039e4 <low_level_init+0x194>)
 8003860:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <low_level_init+0x190>)
 8003864:	2201      	movs	r2, #1
 8003866:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003868:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <low_level_init+0x190>)
 800386a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800386e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003870:	4b5b      	ldr	r3, [pc, #364]	; (80039e0 <low_level_init+0x190>)
 8003872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003876:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <low_level_init+0x190>)
 800387a:	2201      	movs	r2, #1
 800387c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800387e:	2300      	movs	r3, #0
 8003880:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800388a:	23e1      	movs	r3, #225	; 0xe1
 800388c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8003890:	2300      	movs	r3, #0
 8003892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800389c:	2300      	movs	r3, #0
 800389e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80038a2:	4a4f      	ldr	r2, [pc, #316]	; (80039e0 <low_level_init+0x190>)
 80038a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038a8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80038aa:	4b4d      	ldr	r3, [pc, #308]	; (80039e0 <low_level_init+0x190>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80038b0:	4b4b      	ldr	r3, [pc, #300]	; (80039e0 <low_level_init+0x190>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80038b6:	4b4a      	ldr	r3, [pc, #296]	; (80039e0 <low_level_init+0x190>)
 80038b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038bc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80038be:	4848      	ldr	r0, [pc, #288]	; (80039e0 <low_level_init+0x190>)
 80038c0:	f7fd fa5c 	bl	8000d7c <HAL_ETH_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80038ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d108      	bne.n	80038e4 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80038e4:	2304      	movs	r3, #4
 80038e6:	4a40      	ldr	r2, [pc, #256]	; (80039e8 <low_level_init+0x198>)
 80038e8:	4940      	ldr	r1, [pc, #256]	; (80039ec <low_level_init+0x19c>)
 80038ea:	483d      	ldr	r0, [pc, #244]	; (80039e0 <low_level_init+0x190>)
 80038ec:	f7fd fbe0 	bl	80010b0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80038f0:	2304      	movs	r3, #4
 80038f2:	4a3f      	ldr	r2, [pc, #252]	; (80039f0 <low_level_init+0x1a0>)
 80038f4:	493f      	ldr	r1, [pc, #252]	; (80039f4 <low_level_init+0x1a4>)
 80038f6:	483a      	ldr	r0, [pc, #232]	; (80039e0 <low_level_init+0x190>)
 80038f8:	f7fd fc43 	bl	8001182 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2206      	movs	r2, #6
 8003900:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <low_level_init+0x190>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003910:	4b33      	ldr	r3, [pc, #204]	; (80039e0 <low_level_init+0x190>)
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	785a      	ldrb	r2, [r3, #1]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800391c:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <low_level_init+0x190>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	789a      	ldrb	r2, [r3, #2]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003928:	4b2d      	ldr	r3, [pc, #180]	; (80039e0 <low_level_init+0x190>)
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	78da      	ldrb	r2, [r3, #3]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003934:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <low_level_init+0x190>)
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	791a      	ldrb	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003940:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <low_level_init+0x190>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	795a      	ldrb	r2, [r3, #5]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003952:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800395a:	f043 030a 	orr.w	r3, r3, #10
 800395e:	b2da      	uxtb	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003966:	2300      	movs	r3, #0
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
 800396a:	2300      	movs	r3, #0
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800396e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fbfb 	bl	8004170 <osSemaphoreCreate>
 800397a:	4603      	mov	r3, r0
 800397c:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <low_level_init+0x1a8>)
 800397e:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <low_level_init+0x1ac>)
 8003982:	f107 040c 	add.w	r4, r7, #12
 8003986:	461d      	mov	r5, r3
 8003988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800398a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800398c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003990:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003994:	f107 030c 	add.w	r3, r7, #12
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 faeb 	bl	8003f76 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80039a0:	480f      	ldr	r0, [pc, #60]	; (80039e0 <low_level_init+0x190>)
 80039a2:	f7fd ff16 	bl	80017d2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80039a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039aa:	461a      	mov	r2, r3
 80039ac:	211d      	movs	r1, #29
 80039ae:	480c      	ldr	r0, [pc, #48]	; (80039e0 <low_level_init+0x190>)
 80039b0:	f7fd fe41 	bl	8001636 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	f043 030b 	orr.w	r3, r3, #11
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	461a      	mov	r2, r3
 80039c0:	211d      	movs	r1, #29
 80039c2:	4807      	ldr	r0, [pc, #28]	; (80039e0 <low_level_init+0x190>)
 80039c4:	f7fd fe9f 	bl	8001706 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80039c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039cc:	461a      	mov	r2, r3
 80039ce:	211d      	movs	r1, #29
 80039d0:	4803      	ldr	r0, [pc, #12]	; (80039e0 <low_level_init+0x190>)
 80039d2:	f7fd fe30 	bl	8001636 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80039d6:	bf00      	nop
 80039d8:	3740      	adds	r7, #64	; 0x40
 80039da:	46bd      	mov	sp, r7
 80039dc:	bdb0      	pop	{r4, r5, r7, pc}
 80039de:	bf00      	nop
 80039e0:	20005b58 	.word	0x20005b58
 80039e4:	40028000 	.word	0x40028000
 80039e8:	20005ba0 	.word	0x20005ba0
 80039ec:	20004288 	.word	0x20004288
 80039f0:	20004308 	.word	0x20004308
 80039f4:	20005ad8 	.word	0x20005ad8
 80039f8:	200002f8 	.word	0x200002f8
 80039fc:	0801566c 	.word	0x0801566c

08003a00 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003a0a:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <low_level_output+0x138>)
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003a22:	4b45      	ldr	r3, [pc, #276]	; (8003b38 <low_level_output+0x138>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	e05a      	b.n	8003ae8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da03      	bge.n	8003a42 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003a3a:	23f8      	movs	r3, #248	; 0xf8
 8003a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003a40:	e05c      	b.n	8003afc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	895b      	ldrh	r3, [r3, #10]
 8003a46:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a4c:	e02f      	b.n	8003aae <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	18d0      	adds	r0, r2, r3
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	18d1      	adds	r1, r2, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	461a      	mov	r2, r3
 8003a66:	f010 fd9b 	bl	80145a0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	da03      	bge.n	8003a80 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003a78:	23f8      	movs	r3, #248	; 0xf8
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003a7e:	e03d      	b.n	8003afc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003a90:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a9c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003aa8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d8c8      	bhi.n	8003a4e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	18d0      	adds	r0, r2, r3
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4413      	add	r3, r2
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4619      	mov	r1, r3
 8003ace:	f010 fd67 	bl	80145a0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1a1      	bne.n	8003a32 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	4811      	ldr	r0, [pc, #68]	; (8003b38 <low_level_output+0x138>)
 8003af2:	f7fd fbb3 	bl	800125c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <low_level_output+0x138>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b04:	4413      	add	r3, r2
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00d      	beq.n	8003b2c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <low_level_output+0x138>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b18:	4413      	add	r3, r2
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <low_level_output+0x138>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	f241 0304 	movw	r3, #4100	; 0x1004
 8003b26:	4413      	add	r3, r2
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003b2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20005b58 	.word	0x20005b58

08003b3c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003b60:	484f      	ldr	r0, [pc, #316]	; (8003ca0 <low_level_input+0x164>)
 8003b62:	f7fd fc65 	bl	8001430 <HAL_ETH_GetReceivedFrame_IT>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <low_level_input+0x34>

    return NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e092      	b.n	8003c96 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003b70:	4b4b      	ldr	r3, [pc, #300]	; (8003ca0 <low_level_input+0x164>)
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <low_level_input+0x164>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003b88:	4619      	mov	r1, r3
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f006 fdba 	bl	800a704 <pbuf_alloc>
 8003b90:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d04b      	beq.n	8003c30 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003b98:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <low_level_input+0x164>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba6:	e040      	b.n	8003c2a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	895b      	ldrh	r3, [r3, #10]
 8003bac:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003bb2:	e021      	b.n	8003bf8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	18d0      	adds	r0, r2, r3
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	18d1      	adds	r1, r2, r3
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f010 fce8 	bl	80145a0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	4413      	add	r3, r2
 8003be2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003be6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003bf2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d8d6      	bhi.n	8003bb4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	18d0      	adds	r0, r2, r3
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4619      	mov	r1, r3
 8003c18:	f010 fcc2 	bl	80145a0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4413      	add	r3, r2
 8003c22:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1bb      	bne.n	8003ba8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <low_level_input+0x164>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e00b      	b.n	8003c54 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	3301      	adds	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <low_level_input+0x164>)
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d3ee      	bcc.n	8003c3c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <low_level_input+0x164>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003c64:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <low_level_input+0x164>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c6c:	4413      	add	r3, r2
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <low_level_input+0x164>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c80:	4413      	add	r3, r2
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <low_level_input+0x164>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f241 0308 	movw	r3, #4104	; 0x1008
 8003c8e:	4413      	add	r3, r2
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3730      	adds	r7, #48	; 0x30
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20005b58 	.word	0x20005b58

08003ca4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <ethernetif_input+0x58>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fa8b 	bl	80041d4 <osSemaphoreWait>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f5      	bne.n	8003cb0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003cc4:	480e      	ldr	r0, [pc, #56]	; (8003d00 <ethernetif_input+0x5c>)
 8003cc6:	f010 fbd9 	bl	801447c <sys_mutex_lock>
        p = low_level_input( netif );
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff ff36 	bl	8003b3c <low_level_input>
 8003cd0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	68b8      	ldr	r0, [r7, #8]
 8003ce0:	4798      	blx	r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003ce8:	68b8      	ldr	r0, [r7, #8]
 8003cea:	f006 ffef 	bl	800accc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003cee:	4804      	ldr	r0, [pc, #16]	; (8003d00 <ethernetif_input+0x5c>)
 8003cf0:	f010 fbd3 	bl	801449a <sys_mutex_unlock>
      } while(p!=NULL);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e4      	bne.n	8003cc4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003cfa:	e7d9      	b.n	8003cb0 <ethernetif_input+0xc>
 8003cfc:	200002f8 	.word	0x200002f8
 8003d00:	200073b0 	.word	0x200073b0

08003d04 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <ethernetif_init+0x1c>
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <ethernetif_init+0x48>)
 8003d14:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8003d18:	490d      	ldr	r1, [pc, #52]	; (8003d50 <ethernetif_init+0x4c>)
 8003d1a:	480e      	ldr	r0, [pc, #56]	; (8003d54 <ethernetif_init+0x50>)
 8003d1c:	f010 fc56 	bl	80145cc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2273      	movs	r2, #115	; 0x73
 8003d24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2274      	movs	r2, #116	; 0x74
 8003d2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <ethernetif_init+0x54>)
 8003d34:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <ethernetif_init+0x58>)
 8003d3a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fd87 	bl	8003850 <low_level_init>

  return ERR_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	08015688 	.word	0x08015688
 8003d50:	080156a4 	.word	0x080156a4
 8003d54:	080156b4 	.word	0x080156b4
 8003d58:	08012491 	.word	0x08012491
 8003d5c:	08003a01 	.word	0x08003a01

08003d60 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003d64:	f7fc fef8 	bl	8000b58 <HAL_GetTick>
 8003d68:	4603      	mov	r3, r0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	461a      	mov	r2, r3
 8003d86:	2101      	movs	r1, #1
 8003d88:	4816      	ldr	r0, [pc, #88]	; (8003de4 <ethernetif_set_link+0x74>)
 8003d8a:	f7fd fc54 	bl	8001636 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <ethernetif_set_link+0x48>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f006 fb79 	bl	800a4a8 <netif_set_link_up>
 8003db6:	e011      	b.n	8003ddc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <ethernetif_set_link+0x6c>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d104      	bne.n	8003ddc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f006 fb9a 	bl	800a510 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003ddc:	20c8      	movs	r0, #200	; 0xc8
 8003dde:	f000 f916 	bl	800400e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003de2:	e7cd      	b.n	8003d80 <ethernetif_set_link+0x10>
 8003de4:	20005b58 	.word	0x20005b58

08003de8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d05d      	beq.n	8003ec6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003e0a:	4b34      	ldr	r3, [pc, #208]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d03f      	beq.n	8003e92 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003e12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e16:	2100      	movs	r1, #0
 8003e18:	4830      	ldr	r0, [pc, #192]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e1a:	f7fd fc74 	bl	8001706 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fc fe9b 	bl	8000b58 <HAL_GetTick>
 8003e22:	4603      	mov	r3, r0
 8003e24:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003e26:	f107 0308 	add.w	r3, r7, #8
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	482b      	ldr	r0, [pc, #172]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e30:	f7fd fc01 	bl	8001636 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003e34:	f7fc fe90 	bl	8000b58 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e42:	d828      	bhi.n	8003e96 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0eb      	beq.n	8003e26 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003e4e:	f107 0308 	add.w	r3, r7, #8
 8003e52:	461a      	mov	r2, r3
 8003e54:	2110      	movs	r1, #16
 8003e56:	4821      	ldr	r0, [pc, #132]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e58:	f7fd fbed 	bl	8001636 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	e002      	b.n	8003e76 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003e80:	4b16      	ldr	r3, [pc, #88]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	e016      	b.n	8003eb6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	e011      	b.n	8003eb6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <ethernetif_update_config+0xb0>
          goto error;
 8003e96:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <ethernetif_update_config+0xf4>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	08db      	lsrs	r3, r3, #3
 8003e9e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <ethernetif_update_config+0xf4>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	2100      	movs	r1, #0
 8003eb0:	480a      	ldr	r0, [pc, #40]	; (8003edc <ethernetif_update_config+0xf4>)
 8003eb2:	f7fd fc28 	bl	8001706 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4808      	ldr	r0, [pc, #32]	; (8003edc <ethernetif_update_config+0xf4>)
 8003eba:	f7fd fce9 	bl	8001890 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003ebe:	4807      	ldr	r0, [pc, #28]	; (8003edc <ethernetif_update_config+0xf4>)
 8003ec0:	f7fd fc87 	bl	80017d2 <HAL_ETH_Start>
 8003ec4:	e002      	b.n	8003ecc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003ec6:	4805      	ldr	r0, [pc, #20]	; (8003edc <ethernetif_update_config+0xf4>)
 8003ec8:	f7fd fcb2 	bl	8001830 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f807 	bl	8003ee0 <ethernetif_notify_conn_changed>
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20005b58 	.word	0x20005b58

08003ee0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f06:	2b84      	cmp	r3, #132	; 0x84
 8003f08:	d005      	beq.n	8003f16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	3303      	adds	r3, #3
 8003f14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f16:	68fb      	ldr	r3, [r7, #12]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f2a:	f3ef 8305 	mrs	r3, IPSR
 8003f2e:	607b      	str	r3, [r7, #4]
  return(result);
 8003f30:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f4c:	f001 fd74 	bl	8005a38 <vTaskStartScheduler>
  
  return osOK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003f5a:	f7ff ffe3 	bl	8003f24 <inHandlerMode>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003f64:	f001 fe88 	bl	8005c78 <xTaskGetTickCountFromISR>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	e002      	b.n	8003f72 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003f6c:	f001 fe74 	bl	8005c58 <xTaskGetTickCount>
 8003f70:	4603      	mov	r3, r0
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f78:	b089      	sub	sp, #36	; 0x24
 8003f7a:	af04      	add	r7, sp, #16
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <osThreadCreate+0x54>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01c      	beq.n	8003fca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685c      	ldr	r4, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681d      	ldr	r5, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691e      	ldr	r6, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff ffa6 	bl	8003ef4 <makeFreeRtosPriority>
 8003fa8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fb2:	9202      	str	r2, [sp, #8]
 8003fb4:	9301      	str	r3, [sp, #4]
 8003fb6:	9100      	str	r1, [sp, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4632      	mov	r2, r6
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f001 fb68 	bl	8005694 <xTaskCreateStatic>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e01c      	b.n	8004004 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685c      	ldr	r4, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fd6:	b29e      	uxth	r6, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff88 	bl	8003ef4 <makeFreeRtosPriority>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	f107 030c 	add.w	r3, r7, #12
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	9200      	str	r2, [sp, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	4632      	mov	r2, r6
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f001 fbb0 	bl	800575a <xTaskCreate>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d001      	beq.n	8004004 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004004:	68fb      	ldr	r3, [r7, #12]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800400e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <osDelay+0x16>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	e000      	b.n	8004026 <osDelay+0x18>
 8004024:	2301      	movs	r3, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fcd0 	bl	80059cc <vTaskDelay>
  
  return osOK;
 800402c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4619      	mov	r1, r3
 800404c:	2001      	movs	r0, #1
 800404e:	f000 fc92 	bl	8004976 <xQueueCreateMutexStatic>
 8004052:	4603      	mov	r3, r0
 8004054:	e003      	b.n	800405e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004056:	2001      	movs	r0, #1
 8004058:	f000 fc75 	bl	8004946 <xQueueCreateMutex>
 800405c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <osMutexWait+0x18>
    return osErrorParameter;
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	e03a      	b.n	80040f6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d103      	bne.n	8004094 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e009      	b.n	80040a8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d006      	beq.n	80040a8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <osMutexWait+0x40>
      ticks = 1;
 80040a4:	2301      	movs	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80040a8:	f7ff ff3c 	bl	8003f24 <inHandlerMode>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d017      	beq.n	80040e2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80040b2:	f107 0308 	add.w	r3, r7, #8
 80040b6:	461a      	mov	r2, r3
 80040b8:	2100      	movs	r1, #0
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 f8ac 	bl	8005218 <xQueueReceiveFromISR>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d001      	beq.n	80040ca <osMutexWait+0x62>
      return osErrorOS;
 80040c6:	23ff      	movs	r3, #255	; 0xff
 80040c8:	e015      	b.n	80040f6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d011      	beq.n	80040f4 <osMutexWait+0x8c>
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <osMutexWait+0x98>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	e008      	b.n	80040f4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80040e2:	68f9      	ldr	r1, [r7, #12]
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 ff83 	bl	8004ff0 <xQueueSemaphoreTake>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d001      	beq.n	80040f4 <osMutexWait+0x8c>
    return osErrorOS;
 80040f0:	23ff      	movs	r3, #255	; 0xff
 80040f2:	e000      	b.n	80040f6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	e000ed04 	.word	0xe000ed04

08004104 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004114:	f7ff ff06 	bl	8003f24 <inHandlerMode>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800411e:	f107 0308 	add.w	r3, r7, #8
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fde7 	bl	8004cf8 <xQueueGiveFromISR>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d001      	beq.n	8004134 <osMutexRelease+0x30>
      return osErrorOS;
 8004130:	23ff      	movs	r3, #255	; 0xff
 8004132:	e017      	b.n	8004164 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d013      	beq.n	8004162 <osMutexRelease+0x5e>
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <osMutexRelease+0x68>)
 800413c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	e00a      	b.n	8004162 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800414c:	2300      	movs	r3, #0
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fc2a 	bl	80049ac <xQueueGenericSend>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d001      	beq.n	8004162 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800415e:	23ff      	movs	r3, #255	; 0xff
 8004160:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004162:	68fb      	ldr	r3, [r7, #12]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00f      	beq.n	80041a2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d10a      	bne.n	800419e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2203      	movs	r2, #3
 800418e:	9200      	str	r2, [sp, #0]
 8004190:	2200      	movs	r2, #0
 8004192:	2100      	movs	r1, #0
 8004194:	2001      	movs	r0, #1
 8004196:	f000 fad9 	bl	800474c <xQueueGenericCreateStatic>
 800419a:	4603      	mov	r3, r0
 800419c:	e016      	b.n	80041cc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	e014      	b.n	80041cc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d110      	bne.n	80041ca <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80041a8:	2203      	movs	r2, #3
 80041aa:	2100      	movs	r1, #0
 80041ac:	2001      	movs	r0, #1
 80041ae:	f000 fb4f 	bl	8004850 <xQueueGenericCreate>
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <osSemaphoreCreate+0x56>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2200      	movs	r2, #0
 80041be:	2100      	movs	r1, #0
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fbf3 	bl	80049ac <xQueueGenericSend>
      return sema;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	e000      	b.n	80041cc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80041ca:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <osSemaphoreWait+0x18>
    return osErrorParameter;
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	e03a      	b.n	8004262 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d103      	bne.n	8004200 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e009      	b.n	8004214 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d006      	beq.n	8004214 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <osSemaphoreWait+0x40>
      ticks = 1;
 8004210:	2301      	movs	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004214:	f7ff fe86 	bl	8003f24 <inHandlerMode>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d017      	beq.n	800424e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	461a      	mov	r2, r3
 8004224:	2100      	movs	r1, #0
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fff6 	bl	8005218 <xQueueReceiveFromISR>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d001      	beq.n	8004236 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004232:	23ff      	movs	r3, #255	; 0xff
 8004234:	e015      	b.n	8004262 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <osSemaphoreWait+0x8c>
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <osSemaphoreWait+0x98>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	e008      	b.n	8004260 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fecd 	bl	8004ff0 <xQueueSemaphoreTake>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800425c:	23ff      	movs	r3, #255	; 0xff
 800425e:	e000      	b.n	8004262 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004280:	f7ff fe50 	bl	8003f24 <inHandlerMode>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fd31 	bl	8004cf8 <xQueueGiveFromISR>
 8004296:	4603      	mov	r3, r0
 8004298:	2b01      	cmp	r3, #1
 800429a:	d001      	beq.n	80042a0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800429c:	23ff      	movs	r3, #255	; 0xff
 800429e:	e017      	b.n	80042d0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <osSemaphoreRelease+0x5e>
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <osSemaphoreRelease+0x68>)
 80042a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	e00a      	b.n	80042ce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80042b8:	2300      	movs	r3, #0
 80042ba:	2200      	movs	r2, #0
 80042bc:	2100      	movs	r1, #0
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fb74 	bl	80049ac <xQueueGenericSend>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d001      	beq.n	80042ce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80042ca:	23ff      	movs	r3, #255	; 0xff
 80042cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80042e4:	f7ff fe1e 	bl	8003f24 <inHandlerMode>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80042ee:	2382      	movs	r3, #130	; 0x82
 80042f0:	e003      	b.n	80042fa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 f856 	bl	80053a4 <vQueueDelete>

  return osOK; 
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004302:	b590      	push	{r4, r7, lr}
 8004304:	b085      	sub	sp, #20
 8004306:	af02      	add	r7, sp, #8
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d011      	beq.n	8004338 <osMessageCreate+0x36>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2400      	movs	r4, #0
 800432e:	9400      	str	r4, [sp, #0]
 8004330:	f000 fa0c 	bl	800474c <xQueueGenericCreateStatic>
 8004334:	4603      	mov	r3, r0
 8004336:	e008      	b.n	800434a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	4619      	mov	r1, r3
 8004344:	f000 fa84 	bl	8004850 <xQueueGenericCreate>
 8004348:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bd90      	pop	{r4, r7, pc}
	...

08004354 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <osMessagePut+0x1e>
    ticks = 1;
 800436e:	2301      	movs	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004372:	f7ff fdd7 	bl	8003f24 <inHandlerMode>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d018      	beq.n	80043ae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800437c:	f107 0210 	add.w	r2, r7, #16
 8004380:	f107 0108 	add.w	r1, r7, #8
 8004384:	2300      	movs	r3, #0
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fc16 	bl	8004bb8 <xQueueGenericSendFromISR>
 800438c:	4603      	mov	r3, r0
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <osMessagePut+0x42>
      return osErrorOS;
 8004392:	23ff      	movs	r3, #255	; 0xff
 8004394:	e018      	b.n	80043c8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d014      	beq.n	80043c6 <osMessagePut+0x72>
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <osMessagePut+0x7c>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	e00b      	b.n	80043c6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80043ae:	f107 0108 	add.w	r1, r7, #8
 80043b2:	2300      	movs	r3, #0
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 faf8 	bl	80049ac <xQueueGenericSend>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <osMessagePut+0x72>
      return osErrorOS;
 80043c2:	23ff      	movs	r3, #255	; 0xff
 80043c4:	e000      	b.n	80043c8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b08b      	sub	sp, #44	; 0x2c
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	617b      	str	r3, [r7, #20]
    return event;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	461c      	mov	r4, r3
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004402:	e054      	b.n	80044ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004404:	2300      	movs	r3, #0
 8004406:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d103      	bne.n	800441c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004414:	f04f 33ff 	mov.w	r3, #4294967295
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
 800441a:	e009      	b.n	8004430 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d006      	beq.n	8004430 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <osMessageGet+0x5c>
      ticks = 1;
 800442c:	2301      	movs	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004430:	f7ff fd78 	bl	8003f24 <inHandlerMode>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01c      	beq.n	8004474 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800443a:	f107 0220 	add.w	r2, r7, #32
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	68b8      	ldr	r0, [r7, #8]
 8004448:	f000 fee6 	bl	8005218 <xQueueReceiveFromISR>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d102      	bne.n	8004458 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004452:	2310      	movs	r3, #16
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e001      	b.n	800445c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01d      	beq.n	800449e <osMessageGet+0xca>
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <osMessageGet+0xe4>)
 8004464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	e014      	b.n	800449e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004474:	f107 0314 	add.w	r3, r7, #20
 8004478:	3304      	adds	r3, #4
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	4619      	mov	r1, r3
 800447e:	68b8      	ldr	r0, [r7, #8]
 8004480:	f000 fcd0 	bl	8004e24 <xQueueReceive>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d102      	bne.n	8004490 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800448a:	2310      	movs	r3, #16
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	e006      	b.n	800449e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <osMessageGet+0xc6>
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <osMessageGet+0xc8>
 800449a:	2340      	movs	r3, #64	; 0x40
 800449c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	461c      	mov	r4, r3
 80044a2:	f107 0314 	add.w	r3, r7, #20
 80044a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	372c      	adds	r7, #44	; 0x2c
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd90      	pop	{r4, r7, pc}
 80044b6:	bf00      	nop
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80044c4:	f7ff fd2e 	bl	8003f24 <inHandlerMode>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d004      	beq.n	80044d8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 ff48 	bl	8005364 <uxQueueMessagesWaitingFromISR>
 80044d4:	4603      	mov	r3, r0
 80044d6:	e003      	b.n	80044e0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 ff23 	bl	8005324 <uxQueueMessagesWaiting>
 80044de:	4603      	mov	r3, r0
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80044f0:	f7ff fd18 	bl	8003f24 <inHandlerMode>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <osMessageDelete+0x16>
    return osErrorISR;
 80044fa:	2382      	movs	r3, #130	; 0x82
 80044fc:	e003      	b.n	8004506 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 ff50 	bl	80053a4 <vQueueDelete>

  return osOK; 
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f103 0208 	add.w	r2, r3, #8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f04f 32ff 	mov.w	r2, #4294967295
 8004526:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f103 0208 	add.w	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f103 0208 	add.w	r2, r3, #8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	601a      	str	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d103      	bne.n	80045d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e00c      	b.n	80045ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3308      	adds	r3, #8
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e002      	b.n	80045de <vListInsert+0x2e>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d2f6      	bcs.n	80045d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6892      	ldr	r2, [r2, #8]
 8004638:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6852      	ldr	r2, [r2, #4]
 8004642:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	d103      	bne.n	8004656 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	1e5a      	subs	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10c      	bne.n	80046a6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	b672      	cpsid	i
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	b662      	cpsie	i
 80046a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80046a6:	f002 f949 	bl	800693c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046b6:	fb01 f303 	mul.w	r3, r1, r3
 80046ba:	441a      	add	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	3b01      	subs	r3, #1
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	441a      	add	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	22ff      	movs	r2, #255	; 0xff
 80046ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	22ff      	movs	r2, #255	; 0xff
 80046f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d114      	bne.n	8004726 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01a      	beq.n	800473a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3310      	adds	r3, #16
 8004708:	4618      	mov	r0, r3
 800470a:	f001 fc05 	bl	8005f18 <xTaskRemoveFromEventList>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d012      	beq.n	800473a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <xQueueGenericReset+0xd0>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	e009      	b.n	800473a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3310      	adds	r3, #16
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff feef 	bl	800450e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3324      	adds	r3, #36	; 0x24
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff feea 	bl	800450e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800473a:	f002 f933 	bl	80069a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800473e:	2301      	movs	r3, #1
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08e      	sub	sp, #56	; 0x38
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	b672      	cpsid	i
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	b662      	cpsie	i
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	b672      	cpsid	i
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	b662      	cpsie	i
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <xQueueGenericCreateStatic+0x5a>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <xQueueGenericCreateStatic+0x5e>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericCreateStatic+0x60>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10c      	bne.n	80047ca <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	b672      	cpsid	i
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	b662      	cpsie	i
 80047c4:	623b      	str	r3, [r7, #32]
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <xQueueGenericCreateStatic+0x8a>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <xQueueGenericCreateStatic+0x8e>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <xQueueGenericCreateStatic+0x90>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10c      	bne.n	80047fa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	b672      	cpsid	i
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	b662      	cpsie	i
 80047f4:	61fb      	str	r3, [r7, #28]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047fa:	2348      	movs	r3, #72	; 0x48
 80047fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b48      	cmp	r3, #72	; 0x48
 8004802:	d00c      	beq.n	800481e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	b672      	cpsid	i
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	b662      	cpsie	i
 8004818:	61bb      	str	r3, [r7, #24]
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800481e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004832:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f847 	bl	80048d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004848:	4618      	mov	r0, r3
 800484a:	3730      	adds	r7, #48	; 0x30
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10c      	bne.n	800487e <xQueueGenericCreate+0x2e>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	b672      	cpsid	i
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	b662      	cpsie	i
 8004878:	613b      	str	r3, [r7, #16]
}
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e004      	b.n	8004894 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3348      	adds	r3, #72	; 0x48
 8004898:	4618      	mov	r0, r3
 800489a:	f002 f97b 	bl	8006b94 <pvPortMalloc>
 800489e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	3348      	adds	r3, #72	; 0x48
 80048ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048b8:	79fa      	ldrb	r2, [r7, #7]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f805 	bl	80048d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048ca:	69bb      	ldr	r3, [r7, #24]
	}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3720      	adds	r7, #32
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e002      	b.n	80048f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004902:	2101      	movs	r1, #1
 8004904:	69b8      	ldr	r0, [r7, #24]
 8004906:	f7ff feb7 	bl	8004678 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00e      	beq.n	800493e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004932:	2300      	movs	r3, #0
 8004934:	2200      	movs	r2, #0
 8004936:	2100      	movs	r1, #0
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f837 	bl	80049ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004950:	2301      	movs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	2300      	movs	r3, #0
 8004956:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	461a      	mov	r2, r3
 800495c:	6939      	ldr	r1, [r7, #16]
 800495e:	6978      	ldr	r0, [r7, #20]
 8004960:	f7ff ff76 	bl	8004850 <xQueueGenericCreate>
 8004964:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ffd3 	bl	8004912 <prvInitialiseMutex>

		return xNewQueue;
 800496c:	68fb      	ldr	r3, [r7, #12]
	}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004976:	b580      	push	{r7, lr}
 8004978:	b088      	sub	sp, #32
 800497a:	af02      	add	r7, sp, #8
 800497c:	4603      	mov	r3, r0
 800497e:	6039      	str	r1, [r7, #0]
 8004980:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004982:	2301      	movs	r3, #1
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2200      	movs	r2, #0
 8004992:	6939      	ldr	r1, [r7, #16]
 8004994:	6978      	ldr	r0, [r7, #20]
 8004996:	f7ff fed9 	bl	800474c <xQueueGenericCreateStatic>
 800499a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff ffb8 	bl	8004912 <prvInitialiseMutex>

		return xNewQueue;
 80049a2:	68fb      	ldr	r3, [r7, #12]
	}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08e      	sub	sp, #56	; 0x38
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10c      	bne.n	80049e2 <xQueueGenericSend+0x36>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	b672      	cpsid	i
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	b662      	cpsie	i
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d103      	bne.n	80049f0 <xQueueGenericSend+0x44>
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <xQueueGenericSend+0x48>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <xQueueGenericSend+0x4a>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10c      	bne.n	8004a14 <xQueueGenericSend+0x68>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	b672      	cpsid	i
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	b662      	cpsie	i
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x76>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <xQueueGenericSend+0x7a>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueGenericSend+0x7c>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10c      	bne.n	8004a46 <xQueueGenericSend+0x9a>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	b672      	cpsid	i
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	b662      	cpsie	i
 8004a40:	623b      	str	r3, [r7, #32]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a46:	f001 fc2b 	bl	80062a0 <xTaskGetSchedulerState>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <xQueueGenericSend+0xaa>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <xQueueGenericSend+0xae>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <xQueueGenericSend+0xb0>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10c      	bne.n	8004a7a <xQueueGenericSend+0xce>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	b672      	cpsid	i
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	b662      	cpsie	i
 8004a74:	61fb      	str	r3, [r7, #28]
}
 8004a76:	bf00      	nop
 8004a78:	e7fe      	b.n	8004a78 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a7a:	f001 ff5f 	bl	800693c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <xQueueGenericSend+0xe4>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d129      	bne.n	8004ae4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a96:	f000 fcc2 	bl	800541e <prvCopyDataToQueue>
 8004a9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d010      	beq.n	8004ac6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	3324      	adds	r3, #36	; 0x24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 fa35 	bl	8005f18 <xTaskRemoveFromEventList>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <xQueueGenericSend+0x208>)
 8004ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	e00a      	b.n	8004adc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004acc:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <xQueueGenericSend+0x208>)
 8004ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004adc:	f001 ff62 	bl	80069a4 <vPortExitCritical>
				return pdPASS;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e063      	b.n	8004bac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d103      	bne.n	8004af2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aea:	f001 ff5b 	bl	80069a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e05c      	b.n	8004bac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d106      	bne.n	8004b06 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 fa6f 	bl	8005fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b06:	f001 ff4d 	bl	80069a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b0a:	f000 fff9 	bl	8005b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b0e:	f001 ff15 	bl	800693c <vPortEnterCritical>
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b18:	b25b      	sxtb	r3, r3
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d103      	bne.n	8004b28 <xQueueGenericSend+0x17c>
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b2e:	b25b      	sxtb	r3, r3
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d103      	bne.n	8004b3e <xQueueGenericSend+0x192>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b3e:	f001 ff31 	bl	80069a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b42:	1d3a      	adds	r2, r7, #4
 8004b44:	f107 0314 	add.w	r3, r7, #20
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 fa5e 	bl	800600c <xTaskCheckForTimeOut>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d124      	bne.n	8004ba0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b58:	f000 fd59 	bl	800560e <prvIsQueueFull>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d018      	beq.n	8004b94 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	3310      	adds	r3, #16
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	4611      	mov	r1, r2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 f9ae 	bl	8005ecc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b72:	f000 fce4 	bl	800553e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b76:	f000 ffd1 	bl	8005b1c <xTaskResumeAll>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f47f af7c 	bne.w	8004a7a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <xQueueGenericSend+0x208>)
 8004b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	e772      	b.n	8004a7a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b96:	f000 fcd2 	bl	800553e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b9a:	f000 ffbf 	bl	8005b1c <xTaskResumeAll>
 8004b9e:	e76c      	b.n	8004a7a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ba2:	f000 fccc 	bl	800553e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ba6:	f000 ffb9 	bl	8005b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004baa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3738      	adds	r7, #56	; 0x38
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08e      	sub	sp, #56	; 0x38
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10c      	bne.n	8004bea <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	b672      	cpsid	i
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	b662      	cpsie	i
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <xQueueGenericSendFromISR+0x40>
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <xQueueGenericSendFromISR+0x44>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <xQueueGenericSendFromISR+0x46>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10c      	bne.n	8004c1c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	b672      	cpsid	i
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	b662      	cpsie	i
 8004c16:	623b      	str	r3, [r7, #32]
}
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d103      	bne.n	8004c2a <xQueueGenericSendFromISR+0x72>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <xQueueGenericSendFromISR+0x76>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <xQueueGenericSendFromISR+0x78>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10c      	bne.n	8004c4e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	b672      	cpsid	i
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	b662      	cpsie	i
 8004c48:	61fb      	str	r3, [r7, #28]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c4e:	f001 ff5d 	bl	8006b0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c52:	f3ef 8211 	mrs	r2, BASEPRI
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	b672      	cpsid	i
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	b662      	cpsie	i
 8004c6a:	61ba      	str	r2, [r7, #24]
 8004c6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <xQueueGenericSendFromISR+0xcc>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d12c      	bne.n	8004cde <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c94:	f000 fbc3 	bl	800541e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d112      	bne.n	8004cc8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d016      	beq.n	8004cd8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	3324      	adds	r3, #36	; 0x24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f001 f932 	bl	8005f18 <xTaskRemoveFromEventList>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00e      	beq.n	8004cd8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e007      	b.n	8004cd8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ccc:	3301      	adds	r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	b25a      	sxtb	r2, r3
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004cdc:	e001      	b.n	8004ce2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3738      	adds	r7, #56	; 0x38
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08e      	sub	sp, #56	; 0x38
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10c      	bne.n	8004d26 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	b672      	cpsid	i
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	b662      	cpsie	i
 8004d20:	623b      	str	r3, [r7, #32]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <xQueueGiveFromISR+0x50>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	b672      	cpsid	i
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	b662      	cpsie	i
 8004d42:	61fb      	str	r3, [r7, #28]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d103      	bne.n	8004d58 <xQueueGiveFromISR+0x60>
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <xQueueGiveFromISR+0x64>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <xQueueGiveFromISR+0x66>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <xQueueGiveFromISR+0x84>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	b672      	cpsid	i
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	b662      	cpsie	i
 8004d76:	61bb      	str	r3, [r7, #24]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d7c:	f001 fec6 	bl	8006b0c <vPortValidateInterruptPriority>
	__asm volatile
 8004d80:	f3ef 8211 	mrs	r2, BASEPRI
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	b672      	cpsid	i
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	b662      	cpsie	i
 8004d98:	617a      	str	r2, [r7, #20]
 8004d9a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004d9c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d22b      	bcs.n	8004e08 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004dc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d112      	bne.n	8004df2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d016      	beq.n	8004e02 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	3324      	adds	r3, #36	; 0x24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f89d 	bl	8005f18 <xTaskRemoveFromEventList>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00b      	beq.n	8004e02 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e007      	b.n	8004e02 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004df6:	3301      	adds	r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	b25a      	sxtb	r2, r3
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e02:	2301      	movs	r3, #1
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
 8004e06:	e001      	b.n	8004e0c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f383 8811 	msr	BASEPRI, r3
}
 8004e16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3738      	adds	r7, #56	; 0x38
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08c      	sub	sp, #48	; 0x30
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10c      	bne.n	8004e58 <xQueueReceive+0x34>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	b672      	cpsid	i
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	b662      	cpsie	i
 8004e52:	623b      	str	r3, [r7, #32]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <xQueueReceive+0x42>
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <xQueueReceive+0x46>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <xQueueReceive+0x48>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10c      	bne.n	8004e8a <xQueueReceive+0x66>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	b672      	cpsid	i
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	b662      	cpsie	i
 8004e84:	61fb      	str	r3, [r7, #28]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e8a:	f001 fa09 	bl	80062a0 <xTaskGetSchedulerState>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <xQueueReceive+0x76>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <xQueueReceive+0x7a>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueReceive+0x7c>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10c      	bne.n	8004ebe <xQueueReceive+0x9a>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	b672      	cpsid	i
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	b662      	cpsie	i
 8004eb8:	61bb      	str	r3, [r7, #24]
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ebe:	f001 fd3d 	bl	800693c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01f      	beq.n	8004f0e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed2:	f000 fb0e 	bl	80054f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00f      	beq.n	8004f06 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee8:	3310      	adds	r3, #16
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 f814 	bl	8005f18 <xTaskRemoveFromEventList>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ef6:	4b3d      	ldr	r3, [pc, #244]	; (8004fec <xQueueReceive+0x1c8>)
 8004ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f06:	f001 fd4d 	bl	80069a4 <vPortExitCritical>
				return pdPASS;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e069      	b.n	8004fe2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f14:	f001 fd46 	bl	80069a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e062      	b.n	8004fe2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f22:	f107 0310 	add.w	r3, r7, #16
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f85a 	bl	8005fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f30:	f001 fd38 	bl	80069a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f34:	f000 fde4 	bl	8005b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f38:	f001 fd00 	bl	800693c <vPortEnterCritical>
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d103      	bne.n	8004f52 <xQueueReceive+0x12e>
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f58:	b25b      	sxtb	r3, r3
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d103      	bne.n	8004f68 <xQueueReceive+0x144>
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f68:	f001 fd1c 	bl	80069a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f6c:	1d3a      	adds	r2, r7, #4
 8004f6e:	f107 0310 	add.w	r3, r7, #16
 8004f72:	4611      	mov	r1, r2
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f849 	bl	800600c <xTaskCheckForTimeOut>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d123      	bne.n	8004fc8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f82:	f000 fb2e 	bl	80055e2 <prvIsQueueEmpty>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d017      	beq.n	8004fbc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	3324      	adds	r3, #36	; 0x24
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4611      	mov	r1, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 ff99 	bl	8005ecc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9c:	f000 facf 	bl	800553e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fa0:	f000 fdbc 	bl	8005b1c <xTaskResumeAll>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d189      	bne.n	8004ebe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <xQueueReceive+0x1c8>)
 8004fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	e780      	b.n	8004ebe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fbe:	f000 fabe 	bl	800553e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fc2:	f000 fdab 	bl	8005b1c <xTaskResumeAll>
 8004fc6:	e77a      	b.n	8004ebe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fca:	f000 fab8 	bl	800553e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fce:	f000 fda5 	bl	8005b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd4:	f000 fb05 	bl	80055e2 <prvIsQueueEmpty>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f43f af6f 	beq.w	8004ebe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fe0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3730      	adds	r7, #48	; 0x30
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	e000ed04 	.word	0xe000ed04

08004ff0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	; 0x38
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10c      	bne.n	8005026 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	b672      	cpsid	i
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	b662      	cpsie	i
 8005020:	623b      	str	r3, [r7, #32]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00c      	beq.n	8005048 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	b672      	cpsid	i
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	b662      	cpsie	i
 8005042:	61fb      	str	r3, [r7, #28]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005048:	f001 f92a 	bl	80062a0 <xTaskGetSchedulerState>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <xQueueSemaphoreTake+0x68>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <xQueueSemaphoreTake+0x6c>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <xQueueSemaphoreTake+0x6e>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10c      	bne.n	800507c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	b672      	cpsid	i
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	b662      	cpsie	i
 8005076:	61bb      	str	r3, [r7, #24]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800507c:	f001 fc5e 	bl	800693c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d024      	beq.n	80050d6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	1e5a      	subs	r2, r3, #1
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800509c:	f001 fac6 	bl	800662c <pvTaskIncrementMutexHeldCount>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00f      	beq.n	80050ce <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	3310      	adds	r3, #16
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 ff30 	bl	8005f18 <xTaskRemoveFromEventList>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050be:	4b55      	ldr	r3, [pc, #340]	; (8005214 <xQueueSemaphoreTake+0x224>)
 80050c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ce:	f001 fc69 	bl	80069a4 <vPortExitCritical>
				return pdPASS;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e099      	b.n	800520a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d113      	bne.n	8005104 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	b672      	cpsid	i
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	b662      	cpsie	i
 80050f6:	617b      	str	r3, [r7, #20]
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80050fc:	f001 fc52 	bl	80069a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005100:	2300      	movs	r3, #0
 8005102:	e082      	b.n	800520a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800510a:	f107 030c 	add.w	r3, r7, #12
 800510e:	4618      	mov	r0, r3
 8005110:	f000 ff66 	bl	8005fe0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005118:	f001 fc44 	bl	80069a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800511c:	f000 fcf0 	bl	8005b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005120:	f001 fc0c 	bl	800693c <vPortEnterCritical>
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800512a:	b25b      	sxtb	r3, r3
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d103      	bne.n	800513a <xQueueSemaphoreTake+0x14a>
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005140:	b25b      	sxtb	r3, r3
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005146:	d103      	bne.n	8005150 <xQueueSemaphoreTake+0x160>
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005150:	f001 fc28 	bl	80069a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005154:	463a      	mov	r2, r7
 8005156:	f107 030c 	add.w	r3, r7, #12
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f000 ff55 	bl	800600c <xTaskCheckForTimeOut>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d132      	bne.n	80051ce <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800516a:	f000 fa3a 	bl	80055e2 <prvIsQueueEmpty>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d026      	beq.n	80051c2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800517c:	f001 fbde 	bl	800693c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4618      	mov	r0, r3
 8005186:	f001 f8a9 	bl	80062dc <xTaskPriorityInherit>
 800518a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800518c:	f001 fc0a 	bl	80069a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	3324      	adds	r3, #36	; 0x24
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fe97 	bl	8005ecc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800519e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051a0:	f000 f9cd 	bl	800553e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051a4:	f000 fcba 	bl	8005b1c <xTaskResumeAll>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f47f af66 	bne.w	800507c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80051b0:	4b18      	ldr	r3, [pc, #96]	; (8005214 <xQueueSemaphoreTake+0x224>)
 80051b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	e75c      	b.n	800507c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80051c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051c4:	f000 f9bb 	bl	800553e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051c8:	f000 fca8 	bl	8005b1c <xTaskResumeAll>
 80051cc:	e756      	b.n	800507c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80051ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051d0:	f000 f9b5 	bl	800553e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051d4:	f000 fca2 	bl	8005b1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051da:	f000 fa02 	bl	80055e2 <prvIsQueueEmpty>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f43f af4b 	beq.w	800507c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80051ec:	f001 fba6 	bl	800693c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80051f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051f2:	f000 f8fc 	bl	80053ee <prvGetDisinheritPriorityAfterTimeout>
 80051f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 f976 	bl	80064f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005204:	f001 fbce 	bl	80069a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005208:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800520a:	4618      	mov	r0, r3
 800520c:	3738      	adds	r7, #56	; 0x38
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08e      	sub	sp, #56	; 0x38
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	b672      	cpsid	i
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	b662      	cpsie	i
 8005242:	623b      	str	r3, [r7, #32]
}
 8005244:	bf00      	nop
 8005246:	e7fe      	b.n	8005246 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <xQueueReceiveFromISR+0x3e>
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <xQueueReceiveFromISR+0x42>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <xQueueReceiveFromISR+0x44>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10c      	bne.n	800527a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	b672      	cpsid	i
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	b662      	cpsie	i
 8005274:	61fb      	str	r3, [r7, #28]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800527a:	f001 fc47 	bl	8006b0c <vPortValidateInterruptPriority>
	__asm volatile
 800527e:	f3ef 8211 	mrs	r2, BASEPRI
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	b672      	cpsid	i
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	b662      	cpsie	i
 8005296:	61ba      	str	r2, [r7, #24]
 8005298:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800529a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800529c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d02f      	beq.n	800530a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052b8:	f000 f91b 	bl	80054f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	1e5a      	subs	r2, r3, #1
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80052c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d112      	bne.n	80052f4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	3310      	adds	r3, #16
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fe1c 	bl	8005f18 <xTaskRemoveFromEventList>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00e      	beq.n	8005304 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e007      	b.n	8005304 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80052f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052f8:	3301      	adds	r3, #1
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	b25a      	sxtb	r2, r3
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005304:	2301      	movs	r3, #1
 8005306:	637b      	str	r3, [r7, #52]	; 0x34
 8005308:	e001      	b.n	800530e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800530a:	2300      	movs	r3, #0
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f383 8811 	msr	BASEPRI, r3
}
 8005318:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800531c:	4618      	mov	r0, r3
 800531e:	3738      	adds	r7, #56	; 0x38
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10c      	bne.n	800534c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	b672      	cpsid	i
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	b662      	cpsie	i
 8005346:	60bb      	str	r3, [r7, #8]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800534c:	f001 faf6 	bl	800693c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005356:	f001 fb25 	bl	80069a4 <vPortExitCritical>

	return uxReturn;
 800535a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10c      	bne.n	8005390 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	b672      	cpsid	i
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	b662      	cpsie	i
 800538a:	60fb      	str	r3, [r7, #12]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005396:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10c      	bne.n	80053d0 <vQueueDelete+0x2c>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	b672      	cpsid	i
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	b662      	cpsie	i
 80053ca:	60bb      	str	r3, [r7, #8]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f935 	bl	8005640 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f001 fca1 	bl	8006d28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80053e6:	bf00      	nop
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d006      	beq.n	800540c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1c3 0307 	rsb	r3, r3, #7
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e001      	b.n	8005410 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005410:	68fb      	ldr	r3, [r7, #12]
	}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10d      	bne.n	8005458 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d14d      	bne.n	80054e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 ffc7 	bl	80063dc <xTaskPriorityDisinherit>
 800544e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	609a      	str	r2, [r3, #8]
 8005456:	e043      	b.n	80054e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d119      	bne.n	8005492 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6858      	ldr	r0, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	461a      	mov	r2, r3
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	f00f f899 	bl	80145a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	441a      	add	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	d32b      	bcc.n	80054e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	e026      	b.n	80054e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68d8      	ldr	r0, [r3, #12]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	461a      	mov	r2, r3
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	f00f f87f 	bl	80145a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	425b      	negs	r3, r3
 80054ac:	441a      	add	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d207      	bcs.n	80054ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	425b      	negs	r3, r3
 80054c8:	441a      	add	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d105      	bne.n	80054e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3b01      	subs	r3, #1
 80054de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054e8:	697b      	ldr	r3, [r7, #20]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	2b00      	cmp	r3, #0
 8005502:	d018      	beq.n	8005536 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	441a      	add	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d303      	bcc.n	8005526 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	461a      	mov	r2, r3
 8005530:	6838      	ldr	r0, [r7, #0]
 8005532:	f00f f835 	bl	80145a0 <memcpy>
	}
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005546:	f001 f9f9 	bl	800693c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005550:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005552:	e011      	b.n	8005578 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d012      	beq.n	8005582 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3324      	adds	r3, #36	; 0x24
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fcd9 	bl	8005f18 <xTaskRemoveFromEventList>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800556c:	f000 fdb4 	bl	80060d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	3b01      	subs	r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800557c:	2b00      	cmp	r3, #0
 800557e:	dce9      	bgt.n	8005554 <prvUnlockQueue+0x16>
 8005580:	e000      	b.n	8005584 <prvUnlockQueue+0x46>
					break;
 8005582:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	22ff      	movs	r2, #255	; 0xff
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800558c:	f001 fa0a 	bl	80069a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005590:	f001 f9d4 	bl	800693c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800559a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800559c:	e011      	b.n	80055c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d012      	beq.n	80055cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3310      	adds	r3, #16
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fcb4 	bl	8005f18 <xTaskRemoveFromEventList>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055b6:	f000 fd8f 	bl	80060d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	3b01      	subs	r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	dce9      	bgt.n	800559e <prvUnlockQueue+0x60>
 80055ca:	e000      	b.n	80055ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	22ff      	movs	r2, #255	; 0xff
 80055d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055d6:	f001 f9e5 	bl	80069a4 <vPortExitCritical>
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055ea:	f001 f9a7 	bl	800693c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e001      	b.n	8005600 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005600:	f001 f9d0 	bl	80069a4 <vPortExitCritical>

	return xReturn;
 8005604:	68fb      	ldr	r3, [r7, #12]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005616:	f001 f991 	bl	800693c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	429a      	cmp	r2, r3
 8005624:	d102      	bne.n	800562c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005626:	2301      	movs	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e001      	b.n	8005630 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005630:	f001 f9b8 	bl	80069a4 <vPortExitCritical>

	return xReturn;
 8005634:	68fb      	ldr	r3, [r7, #12]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e016      	b.n	800567c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800564e:	4a10      	ldr	r2, [pc, #64]	; (8005690 <vQueueUnregisterQueue+0x50>)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4413      	add	r3, r2
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	429a      	cmp	r2, r3
 800565c:	d10b      	bne.n	8005676 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800565e:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <vQueueUnregisterQueue+0x50>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2100      	movs	r1, #0
 8005664:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005668:	4a09      	ldr	r2, [pc, #36]	; (8005690 <vQueueUnregisterQueue+0x50>)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4413      	add	r3, r2
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
				break;
 8005674:	e006      	b.n	8005684 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b07      	cmp	r3, #7
 8005680:	d9e5      	bls.n	800564e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20007370 	.word	0x20007370

08005694 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08e      	sub	sp, #56	; 0x38
 8005698:	af04      	add	r7, sp, #16
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10c      	bne.n	80056c2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	b672      	cpsid	i
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	b662      	cpsie	i
 80056bc:	623b      	str	r3, [r7, #32]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10c      	bne.n	80056e2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	b672      	cpsid	i
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	b662      	cpsie	i
 80056dc:	61fb      	str	r3, [r7, #28]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056e2:	2354      	movs	r3, #84	; 0x54
 80056e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b54      	cmp	r3, #84	; 0x54
 80056ea:	d00c      	beq.n	8005706 <xTaskCreateStatic+0x72>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	b672      	cpsid	i
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	b662      	cpsie	i
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005706:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01e      	beq.n	800574c <xTaskCreateStatic+0xb8>
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01b      	beq.n	800574c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800571c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	2202      	movs	r2, #2
 8005722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005726:	2300      	movs	r3, #0
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	9302      	str	r3, [sp, #8]
 800572e:	f107 0314 	add.w	r3, r7, #20
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f850 	bl	80057e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005746:	f000 f8d7 	bl	80058f8 <prvAddNewTaskToReadyList>
 800574a:	e001      	b.n	8005750 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005750:	697b      	ldr	r3, [r7, #20]
	}
 8005752:	4618      	mov	r0, r3
 8005754:	3728      	adds	r7, #40	; 0x28
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800575a:	b580      	push	{r7, lr}
 800575c:	b08c      	sub	sp, #48	; 0x30
 800575e:	af04      	add	r7, sp, #16
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fa10 	bl	8006b94 <pvPortMalloc>
 8005774:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00e      	beq.n	800579a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800577c:	2054      	movs	r0, #84	; 0x54
 800577e:	f001 fa09 	bl	8006b94 <pvPortMalloc>
 8005782:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
 8005790:	e005      	b.n	800579e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005792:	6978      	ldr	r0, [r7, #20]
 8005794:	f001 fac8 	bl	8006d28 <vPortFree>
 8005798:	e001      	b.n	800579e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d017      	beq.n	80057d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	2300      	movs	r3, #0
 80057b0:	9303      	str	r3, [sp, #12]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	9302      	str	r3, [sp, #8]
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f80e 	bl	80057e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057c8:	69f8      	ldr	r0, [r7, #28]
 80057ca:	f000 f895 	bl	80058f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	e002      	b.n	80057da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057d4:	f04f 33ff 	mov.w	r3, #4294967295
 80057d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057da:	69bb      	ldr	r3, [r7, #24]
	}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80057fc:	440b      	add	r3, r1
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f023 0307 	bic.w	r3, r3, #7
 800580a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00c      	beq.n	8005830 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	b672      	cpsid	i
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	b662      	cpsie	i
 800582a:	617b      	str	r3, [r7, #20]
}
 800582c:	bf00      	nop
 800582e:	e7fe      	b.n	800582e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01f      	beq.n	8005876 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	e012      	b.n	8005862 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	7819      	ldrb	r1, [r3, #0]
 8005844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	3334      	adds	r3, #52	; 0x34
 800584c:	460a      	mov	r2, r1
 800584e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d006      	beq.n	800586a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	2b0f      	cmp	r3, #15
 8005866:	d9e9      	bls.n	800583c <prvInitialiseNewTask+0x58>
 8005868:	e000      	b.n	800586c <prvInitialiseNewTask+0x88>
			{
				break;
 800586a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005874:	e003      	b.n	800587e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	2b06      	cmp	r3, #6
 8005882:	d901      	bls.n	8005888 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005884:	2306      	movs	r3, #6
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005892:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	2200      	movs	r2, #0
 8005898:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	3304      	adds	r3, #4
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe fe55 	bl	800454e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	3318      	adds	r3, #24
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe fe50 	bl	800454e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	f1c3 0207 	rsb	r2, r3, #7
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	2200      	movs	r2, #0
 80058c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	68f9      	ldr	r1, [r7, #12]
 80058d6:	69b8      	ldr	r0, [r7, #24]
 80058d8:	f000 ff22 	bl	8006720 <pxPortInitialiseStack>
 80058dc:	4602      	mov	r2, r0
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ee:	bf00      	nop
 80058f0:	3720      	adds	r7, #32
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005900:	f001 f81c 	bl	800693c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005904:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <prvAddNewTaskToReadyList+0xb8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	4a29      	ldr	r2, [pc, #164]	; (80059b0 <prvAddNewTaskToReadyList+0xb8>)
 800590c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800590e:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <prvAddNewTaskToReadyList+0xbc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005916:	4a27      	ldr	r2, [pc, #156]	; (80059b4 <prvAddNewTaskToReadyList+0xbc>)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800591c:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <prvAddNewTaskToReadyList+0xb8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d110      	bne.n	8005946 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005924:	f000 fbfc 	bl	8006120 <prvInitialiseTaskLists>
 8005928:	e00d      	b.n	8005946 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800592a:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <prvAddNewTaskToReadyList+0xc0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <prvAddNewTaskToReadyList+0xbc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	429a      	cmp	r2, r3
 800593e:	d802      	bhi.n	8005946 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005940:	4a1c      	ldr	r2, [pc, #112]	; (80059b4 <prvAddNewTaskToReadyList+0xbc>)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005946:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <prvAddNewTaskToReadyList+0xc4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	4a1b      	ldr	r2, [pc, #108]	; (80059bc <prvAddNewTaskToReadyList+0xc4>)
 800594e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	2201      	movs	r2, #1
 8005956:	409a      	lsls	r2, r3
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <prvAddNewTaskToReadyList+0xc8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4313      	orrs	r3, r2
 800595e:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <prvAddNewTaskToReadyList+0xc8>)
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <prvAddNewTaskToReadyList+0xcc>)
 8005970:	441a      	add	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	4619      	mov	r1, r3
 8005978:	4610      	mov	r0, r2
 800597a:	f7fe fdf5 	bl	8004568 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800597e:	f001 f811 	bl	80069a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005982:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <prvAddNewTaskToReadyList+0xc0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00e      	beq.n	80059a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <prvAddNewTaskToReadyList+0xbc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	429a      	cmp	r2, r3
 8005996:	d207      	bcs.n	80059a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <prvAddNewTaskToReadyList+0xd0>)
 800599a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	200003fc 	.word	0x200003fc
 80059b4:	200002fc 	.word	0x200002fc
 80059b8:	20000408 	.word	0x20000408
 80059bc:	20000418 	.word	0x20000418
 80059c0:	20000404 	.word	0x20000404
 80059c4:	20000300 	.word	0x20000300
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d019      	beq.n	8005a12 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059de:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <vTaskDelay+0x64>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <vTaskDelay+0x34>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	b672      	cpsid	i
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	b662      	cpsie	i
 80059fa:	60bb      	str	r3, [r7, #8]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005a00:	f000 f87e 	bl	8005b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a04:	2100      	movs	r1, #0
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fe24 	bl	8006654 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a0c:	f000 f886 	bl	8005b1c <xTaskResumeAll>
 8005a10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d107      	bne.n	8005a28 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <vTaskDelay+0x68>)
 8005a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000424 	.word	0x20000424
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	; 0x28
 8005a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a46:	463a      	mov	r2, r7
 8005a48:	1d39      	adds	r1, r7, #4
 8005a4a:	f107 0308 	add.w	r3, r7, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fa fdaa 	bl	80005a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	9202      	str	r2, [sp, #8]
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	460a      	mov	r2, r1
 8005a66:	4920      	ldr	r1, [pc, #128]	; (8005ae8 <vTaskStartScheduler+0xb0>)
 8005a68:	4820      	ldr	r0, [pc, #128]	; (8005aec <vTaskStartScheduler+0xb4>)
 8005a6a:	f7ff fe13 	bl	8005694 <xTaskCreateStatic>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <vTaskStartScheduler+0xb8>)
 8005a72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a74:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <vTaskStartScheduler+0xb8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e001      	b.n	8005a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d118      	bne.n	8005abe <vTaskStartScheduler+0x86>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	b672      	cpsid	i
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	b662      	cpsie	i
 8005aa0:	613b      	str	r3, [r7, #16]
}
 8005aa2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005aa4:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <vTaskStartScheduler+0xbc>)
 8005aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aac:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <vTaskStartScheduler+0xc0>)
 8005aae:	2201      	movs	r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <vTaskStartScheduler+0xc4>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ab8:	f000 fec2 	bl	8006840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005abc:	e010      	b.n	8005ae0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d10c      	bne.n	8005ae0 <vTaskStartScheduler+0xa8>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aca:	b672      	cpsid	i
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	b662      	cpsie	i
 8005ada:	60fb      	str	r3, [r7, #12]
}
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <vTaskStartScheduler+0xa6>
}
 8005ae0:	bf00      	nop
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	080156dc 	.word	0x080156dc
 8005aec:	080060f1 	.word	0x080060f1
 8005af0:	20000420 	.word	0x20000420
 8005af4:	2000041c 	.word	0x2000041c
 8005af8:	20000408 	.word	0x20000408
 8005afc:	20000400 	.word	0x20000400

08005b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <vTaskSuspendAll+0x18>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a03      	ldr	r2, [pc, #12]	; (8005b18 <vTaskSuspendAll+0x18>)
 8005b0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005b0e:	bf00      	nop
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	20000424 	.word	0x20000424

08005b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b2a:	4b42      	ldr	r3, [pc, #264]	; (8005c34 <xTaskResumeAll+0x118>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10c      	bne.n	8005b4c <xTaskResumeAll+0x30>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	b672      	cpsid	i
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	b662      	cpsie	i
 8005b46:	603b      	str	r3, [r7, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b4c:	f000 fef6 	bl	800693c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b50:	4b38      	ldr	r3, [pc, #224]	; (8005c34 <xTaskResumeAll+0x118>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	4a37      	ldr	r2, [pc, #220]	; (8005c34 <xTaskResumeAll+0x118>)
 8005b58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b5a:	4b36      	ldr	r3, [pc, #216]	; (8005c34 <xTaskResumeAll+0x118>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d161      	bne.n	8005c26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b62:	4b35      	ldr	r3, [pc, #212]	; (8005c38 <xTaskResumeAll+0x11c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d05d      	beq.n	8005c26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b6a:	e02e      	b.n	8005bca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6c:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <xTaskResumeAll+0x120>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3318      	adds	r3, #24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe fd52 	bl	8004622 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fd4d 	bl	8004622 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <xTaskResumeAll+0x124>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	4a2a      	ldr	r2, [pc, #168]	; (8005c40 <xTaskResumeAll+0x124>)
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4a27      	ldr	r2, [pc, #156]	; (8005c44 <xTaskResumeAll+0x128>)
 8005ba8:	441a      	add	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f7fe fcd9 	bl	8004568 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <xTaskResumeAll+0x12c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d302      	bcc.n	8005bca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <xTaskResumeAll+0x130>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bca:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <xTaskResumeAll+0x120>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1cc      	bne.n	8005b6c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bd8:	f000 fb42 	bl	8006260 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bdc:	4b1c      	ldr	r3, [pc, #112]	; (8005c50 <xTaskResumeAll+0x134>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d010      	beq.n	8005c0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005be8:	f000 f858 	bl	8005c9c <xTaskIncrementTick>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005bf2:	4b16      	ldr	r3, [pc, #88]	; (8005c4c <xTaskResumeAll+0x130>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1f1      	bne.n	8005be8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <xTaskResumeAll+0x134>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <xTaskResumeAll+0x130>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c16:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <xTaskResumeAll+0x138>)
 8005c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c26:	f000 febd 	bl	80069a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000424 	.word	0x20000424
 8005c38:	200003fc 	.word	0x200003fc
 8005c3c:	200003bc 	.word	0x200003bc
 8005c40:	20000404 	.word	0x20000404
 8005c44:	20000300 	.word	0x20000300
 8005c48:	200002fc 	.word	0x200002fc
 8005c4c:	20000410 	.word	0x20000410
 8005c50:	2000040c 	.word	0x2000040c
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <xTaskGetTickCount+0x1c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c64:	687b      	ldr	r3, [r7, #4]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	20000400 	.word	0x20000400

08005c78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c7e:	f000 ff45 	bl	8006b0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005c82:	2300      	movs	r3, #0
 8005c84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005c86:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <xTaskGetTickCountFromISR+0x20>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c8c:	683b      	ldr	r3, [r7, #0]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000400 	.word	0x20000400

08005c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca6:	4b4f      	ldr	r3, [pc, #316]	; (8005de4 <xTaskIncrementTick+0x148>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 808a 	bne.w	8005dc4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cb0:	4b4d      	ldr	r3, [pc, #308]	; (8005de8 <xTaskIncrementTick+0x14c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cb8:	4a4b      	ldr	r2, [pc, #300]	; (8005de8 <xTaskIncrementTick+0x14c>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d122      	bne.n	8005d0a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cc4:	4b49      	ldr	r3, [pc, #292]	; (8005dec <xTaskIncrementTick+0x150>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	b672      	cpsid	i
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	b662      	cpsie	i
 8005ce2:	603b      	str	r3, [r7, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xTaskIncrementTick+0x4a>
 8005ce8:	4b40      	ldr	r3, [pc, #256]	; (8005dec <xTaskIncrementTick+0x150>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	4b40      	ldr	r3, [pc, #256]	; (8005df0 <xTaskIncrementTick+0x154>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a3e      	ldr	r2, [pc, #248]	; (8005dec <xTaskIncrementTick+0x150>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	4a3e      	ldr	r2, [pc, #248]	; (8005df0 <xTaskIncrementTick+0x154>)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	4b3d      	ldr	r3, [pc, #244]	; (8005df4 <xTaskIncrementTick+0x158>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	4a3c      	ldr	r2, [pc, #240]	; (8005df4 <xTaskIncrementTick+0x158>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	f000 faab 	bl	8006260 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d0a:	4b3b      	ldr	r3, [pc, #236]	; (8005df8 <xTaskIncrementTick+0x15c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d348      	bcc.n	8005da6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d14:	4b35      	ldr	r3, [pc, #212]	; (8005dec <xTaskIncrementTick+0x150>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d104      	bne.n	8005d28 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d1e:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <xTaskIncrementTick+0x15c>)
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	601a      	str	r2, [r3, #0]
					break;
 8005d26:	e03e      	b.n	8005da6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d28:	4b30      	ldr	r3, [pc, #192]	; (8005dec <xTaskIncrementTick+0x150>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d203      	bcs.n	8005d48 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d40:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <xTaskIncrementTick+0x15c>)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d46:	e02e      	b.n	8005da6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7fe fc68 	bl	8004622 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fc5f 	bl	8004622 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	2201      	movs	r2, #1
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <xTaskIncrementTick+0x160>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <xTaskIncrementTick+0x160>)
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <xTaskIncrementTick+0x164>)
 8005d84:	441a      	add	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f7fe fbeb 	bl	8004568 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <xTaskIncrementTick+0x168>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d3b9      	bcc.n	8005d14 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da4:	e7b6      	b.n	8005d14 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005da6:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <xTaskIncrementTick+0x168>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4914      	ldr	r1, [pc, #80]	; (8005e00 <xTaskIncrementTick+0x164>)
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d907      	bls.n	8005dce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e004      	b.n	8005dce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005dc4:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <xTaskIncrementTick+0x16c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <xTaskIncrementTick+0x16c>)
 8005dcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <xTaskIncrementTick+0x170>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005dda:	697b      	ldr	r3, [r7, #20]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000424 	.word	0x20000424
 8005de8:	20000400 	.word	0x20000400
 8005dec:	200003b4 	.word	0x200003b4
 8005df0:	200003b8 	.word	0x200003b8
 8005df4:	20000414 	.word	0x20000414
 8005df8:	2000041c 	.word	0x2000041c
 8005dfc:	20000404 	.word	0x20000404
 8005e00:	20000300 	.word	0x20000300
 8005e04:	200002fc 	.word	0x200002fc
 8005e08:	2000040c 	.word	0x2000040c
 8005e0c:	20000410 	.word	0x20000410

08005e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e16:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <vTaskSwitchContext+0xa8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e1e:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <vTaskSwitchContext+0xac>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e24:	e041      	b.n	8005eaa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005e26:	4b25      	ldr	r3, [pc, #148]	; (8005ebc <vTaskSwitchContext+0xac>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <vTaskSwitchContext+0xb0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	fab3 f383 	clz	r3, r3
 8005e38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e3a:	7afb      	ldrb	r3, [r7, #11]
 8005e3c:	f1c3 031f 	rsb	r3, r3, #31
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	4920      	ldr	r1, [pc, #128]	; (8005ec4 <vTaskSwitchContext+0xb4>)
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10c      	bne.n	8005e70 <vTaskSwitchContext+0x60>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	b672      	cpsid	i
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	b662      	cpsie	i
 8005e6a:	607b      	str	r3, [r7, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <vTaskSwitchContext+0x5e>
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4a12      	ldr	r2, [pc, #72]	; (8005ec4 <vTaskSwitchContext+0xb4>)
 8005e7c:	4413      	add	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	3308      	adds	r3, #8
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d104      	bne.n	8005ea0 <vTaskSwitchContext+0x90>
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	605a      	str	r2, [r3, #4]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	4a08      	ldr	r2, [pc, #32]	; (8005ec8 <vTaskSwitchContext+0xb8>)
 8005ea8:	6013      	str	r3, [r2, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20000424 	.word	0x20000424
 8005ebc:	20000410 	.word	0x20000410
 8005ec0:	20000404 	.word	0x20000404
 8005ec4:	20000300 	.word	0x20000300
 8005ec8:	200002fc 	.word	0x200002fc

08005ecc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	b672      	cpsid	i
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	b662      	cpsie	i
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <vTaskPlaceOnEventList+0x48>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3318      	adds	r3, #24
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fe fb56 	bl	80045b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f04:	2101      	movs	r1, #1
 8005f06:	6838      	ldr	r0, [r7, #0]
 8005f08:	f000 fba4 	bl	8006654 <prvAddCurrentTaskToDelayedList>
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	200002fc 	.word	0x200002fc

08005f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10c      	bne.n	8005f48 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	b672      	cpsid	i
 8005f34:	f383 8811 	msr	BASEPRI, r3
 8005f38:	f3bf 8f6f 	isb	sy
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	b662      	cpsie	i
 8005f42:	60fb      	str	r3, [r7, #12]
}
 8005f44:	bf00      	nop
 8005f46:	e7fe      	b.n	8005f46 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	3318      	adds	r3, #24
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe fb68 	bl	8004622 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f52:	4b1d      	ldr	r3, [pc, #116]	; (8005fc8 <xTaskRemoveFromEventList+0xb0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d11c      	bne.n	8005f94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fb5f 	bl	8004622 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	2201      	movs	r2, #1
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <xTaskRemoveFromEventList+0xb4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <xTaskRemoveFromEventList+0xb4>)
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <xTaskRemoveFromEventList+0xb8>)
 8005f84:	441a      	add	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fe faeb 	bl	8004568 <vListInsertEnd>
 8005f92:	e005      	b.n	8005fa0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	3318      	adds	r3, #24
 8005f98:	4619      	mov	r1, r3
 8005f9a:	480e      	ldr	r0, [pc, #56]	; (8005fd4 <xTaskRemoveFromEventList+0xbc>)
 8005f9c:	f7fe fae4 	bl	8004568 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <xTaskRemoveFromEventList+0xc0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d905      	bls.n	8005fba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <xTaskRemoveFromEventList+0xc4>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e001      	b.n	8005fbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fbe:	697b      	ldr	r3, [r7, #20]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000424 	.word	0x20000424
 8005fcc:	20000404 	.word	0x20000404
 8005fd0:	20000300 	.word	0x20000300
 8005fd4:	200003bc 	.word	0x200003bc
 8005fd8:	200002fc 	.word	0x200002fc
 8005fdc:	20000410 	.word	0x20000410

08005fe0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fe8:	4b06      	ldr	r3, [pc, #24]	; (8006004 <vTaskInternalSetTimeOutState+0x24>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <vTaskInternalSetTimeOutState+0x28>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	605a      	str	r2, [r3, #4]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	20000414 	.word	0x20000414
 8006008:	20000400 	.word	0x20000400

0800600c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10c      	bne.n	8006036 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	b672      	cpsid	i
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	b662      	cpsie	i
 8006030:	613b      	str	r3, [r7, #16]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10c      	bne.n	8006056 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	b672      	cpsid	i
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	b662      	cpsie	i
 8006050:	60fb      	str	r3, [r7, #12]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8006056:	f000 fc71 	bl	800693c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800605a:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <xTaskCheckForTimeOut+0xc4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d102      	bne.n	800607a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	e023      	b.n	80060c2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <xTaskCheckForTimeOut+0xc8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d007      	beq.n	8006096 <xTaskCheckForTimeOut+0x8a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e015      	b.n	80060c2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	429a      	cmp	r2, r3
 800609e:	d20b      	bcs.n	80060b8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	1ad2      	subs	r2, r2, r3
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff ff97 	bl	8005fe0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	e004      	b.n	80060c2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060c2:	f000 fc6f 	bl	80069a4 <vPortExitCritical>

	return xReturn;
 80060c6:	69fb      	ldr	r3, [r7, #28]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000400 	.word	0x20000400
 80060d4:	20000414 	.word	0x20000414

080060d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060dc:	4b03      	ldr	r3, [pc, #12]	; (80060ec <vTaskMissedYield+0x14>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
}
 80060e2:	bf00      	nop
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	20000410 	.word	0x20000410

080060f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060f8:	f000 f852 	bl	80061a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060fc:	4b06      	ldr	r3, [pc, #24]	; (8006118 <prvIdleTask+0x28>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d9f9      	bls.n	80060f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <prvIdleTask+0x2c>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006114:	e7f0      	b.n	80060f8 <prvIdleTask+0x8>
 8006116:	bf00      	nop
 8006118:	20000300 	.word	0x20000300
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006126:	2300      	movs	r3, #0
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	e00c      	b.n	8006146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4a12      	ldr	r2, [pc, #72]	; (8006180 <prvInitialiseTaskLists+0x60>)
 8006138:	4413      	add	r3, r2
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe f9e7 	bl	800450e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3301      	adds	r3, #1
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b06      	cmp	r3, #6
 800614a:	d9ef      	bls.n	800612c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800614c:	480d      	ldr	r0, [pc, #52]	; (8006184 <prvInitialiseTaskLists+0x64>)
 800614e:	f7fe f9de 	bl	800450e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006152:	480d      	ldr	r0, [pc, #52]	; (8006188 <prvInitialiseTaskLists+0x68>)
 8006154:	f7fe f9db 	bl	800450e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006158:	480c      	ldr	r0, [pc, #48]	; (800618c <prvInitialiseTaskLists+0x6c>)
 800615a:	f7fe f9d8 	bl	800450e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800615e:	480c      	ldr	r0, [pc, #48]	; (8006190 <prvInitialiseTaskLists+0x70>)
 8006160:	f7fe f9d5 	bl	800450e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006164:	480b      	ldr	r0, [pc, #44]	; (8006194 <prvInitialiseTaskLists+0x74>)
 8006166:	f7fe f9d2 	bl	800450e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <prvInitialiseTaskLists+0x78>)
 800616c:	4a05      	ldr	r2, [pc, #20]	; (8006184 <prvInitialiseTaskLists+0x64>)
 800616e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <prvInitialiseTaskLists+0x7c>)
 8006172:	4a05      	ldr	r2, [pc, #20]	; (8006188 <prvInitialiseTaskLists+0x68>)
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000300 	.word	0x20000300
 8006184:	2000038c 	.word	0x2000038c
 8006188:	200003a0 	.word	0x200003a0
 800618c:	200003bc 	.word	0x200003bc
 8006190:	200003d0 	.word	0x200003d0
 8006194:	200003e8 	.word	0x200003e8
 8006198:	200003b4 	.word	0x200003b4
 800619c:	200003b8 	.word	0x200003b8

080061a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a6:	e019      	b.n	80061dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061a8:	f000 fbc8 	bl	800693c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <prvCheckTasksWaitingTermination+0x50>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fa32 	bl	8004622 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061be:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <prvCheckTasksWaitingTermination+0x54>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4a0b      	ldr	r2, [pc, #44]	; (80061f4 <prvCheckTasksWaitingTermination+0x54>)
 80061c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	4a0a      	ldr	r2, [pc, #40]	; (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061d2:	f000 fbe7 	bl	80069a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f810 	bl	80061fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <prvCheckTasksWaitingTermination+0x58>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e1      	bne.n	80061a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200003d0 	.word	0x200003d0
 80061f4:	200003fc 	.word	0x200003fc
 80061f8:	200003e4 	.word	0x200003e4

080061fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800620a:	2b00      	cmp	r3, #0
 800620c:	d108      	bne.n	8006220 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fd88 	bl	8006d28 <vPortFree>
				vPortFree( pxTCB );
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fd85 	bl	8006d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800621e:	e01a      	b.n	8006256 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006226:	2b01      	cmp	r3, #1
 8006228:	d103      	bne.n	8006232 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fd7c 	bl	8006d28 <vPortFree>
	}
 8006230:	e011      	b.n	8006256 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006238:	2b02      	cmp	r3, #2
 800623a:	d00c      	beq.n	8006256 <prvDeleteTCB+0x5a>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	b672      	cpsid	i
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	b662      	cpsie	i
 8006250:	60fb      	str	r3, [r7, #12]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <prvDeleteTCB+0x58>
	}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <prvResetNextTaskUnblockTime+0x38>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006270:	4b0a      	ldr	r3, [pc, #40]	; (800629c <prvResetNextTaskUnblockTime+0x3c>)
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006278:	e008      	b.n	800628c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <prvResetNextTaskUnblockTime+0x38>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <prvResetNextTaskUnblockTime+0x3c>)
 800628a:	6013      	str	r3, [r2, #0]
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	200003b4 	.word	0x200003b4
 800629c:	2000041c 	.word	0x2000041c

080062a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062a6:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <xTaskGetSchedulerState+0x34>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062ae:	2301      	movs	r3, #1
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	e008      	b.n	80062c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b4:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <xTaskGetSchedulerState+0x38>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062bc:	2302      	movs	r3, #2
 80062be:	607b      	str	r3, [r7, #4]
 80062c0:	e001      	b.n	80062c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062c2:	2300      	movs	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062c6:	687b      	ldr	r3, [r7, #4]
	}
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	20000408 	.word	0x20000408
 80062d8:	20000424 	.word	0x20000424

080062dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d069      	beq.n	80063c6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <xTaskPriorityInherit+0xf4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d259      	bcs.n	80063b4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	db06      	blt.n	8006316 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006308:	4b31      	ldr	r3, [pc, #196]	; (80063d0 <xTaskPriorityInherit+0xf4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	f1c3 0207 	rsb	r2, r3, #7
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	6959      	ldr	r1, [r3, #20]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4a2b      	ldr	r2, [pc, #172]	; (80063d4 <xTaskPriorityInherit+0xf8>)
 8006328:	4413      	add	r3, r2
 800632a:	4299      	cmp	r1, r3
 800632c:	d13a      	bne.n	80063a4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	3304      	adds	r3, #4
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe f975 	bl	8004622 <uxListRemove>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d115      	bne.n	800636a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006342:	4924      	ldr	r1, [pc, #144]	; (80063d4 <xTaskPriorityInherit+0xf8>)
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xTaskPriorityInherit+0x8e>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	2201      	movs	r2, #1
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	43da      	mvns	r2, r3
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <xTaskPriorityInherit+0xfc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4013      	ands	r3, r2
 8006366:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <xTaskPriorityInherit+0xfc>)
 8006368:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800636a:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <xTaskPriorityInherit+0xf4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	2201      	movs	r2, #1
 800637a:	409a      	lsls	r2, r3
 800637c:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <xTaskPriorityInherit+0xfc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4313      	orrs	r3, r2
 8006382:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <xTaskPriorityInherit+0xfc>)
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4a10      	ldr	r2, [pc, #64]	; (80063d4 <xTaskPriorityInherit+0xf8>)
 8006394:	441a      	add	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f7fe f8e3 	bl	8004568 <vListInsertEnd>
 80063a2:	e004      	b.n	80063ae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <xTaskPriorityInherit+0xf4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e008      	b.n	80063c6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <xTaskPriorityInherit+0xf4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	429a      	cmp	r2, r3
 80063c0:	d201      	bcs.n	80063c6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80063c2:	2301      	movs	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063c6:	68fb      	ldr	r3, [r7, #12]
	}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	200002fc 	.word	0x200002fc
 80063d4:	20000300 	.word	0x20000300
 80063d8:	20000404 	.word	0x20000404

080063dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d072      	beq.n	80064d8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063f2:	4b3c      	ldr	r3, [pc, #240]	; (80064e4 <xTaskPriorityDisinherit+0x108>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d00c      	beq.n	8006416 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	b672      	cpsid	i
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	b662      	cpsie	i
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10c      	bne.n	8006438 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	b672      	cpsid	i
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	b662      	cpsie	i
 8006432:	60bb      	str	r3, [r7, #8]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	429a      	cmp	r2, r3
 800644c:	d044      	beq.n	80064d8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	2b00      	cmp	r3, #0
 8006454:	d140      	bne.n	80064d8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe f8e1 	bl	8004622 <uxListRemove>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d115      	bne.n	8006492 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800646a:	491f      	ldr	r1, [pc, #124]	; (80064e8 <xTaskPriorityDisinherit+0x10c>)
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <xTaskPriorityDisinherit+0xb6>
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	2201      	movs	r2, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43da      	mvns	r2, r3
 8006488:	4b18      	ldr	r3, [pc, #96]	; (80064ec <xTaskPriorityDisinherit+0x110>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4013      	ands	r3, r2
 800648e:	4a17      	ldr	r2, [pc, #92]	; (80064ec <xTaskPriorityDisinherit+0x110>)
 8006490:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	f1c3 0207 	rsb	r2, r3, #7
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	2201      	movs	r2, #1
 80064ac:	409a      	lsls	r2, r3
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <xTaskPriorityDisinherit+0x110>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	4a0d      	ldr	r2, [pc, #52]	; (80064ec <xTaskPriorityDisinherit+0x110>)
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4a08      	ldr	r2, [pc, #32]	; (80064e8 <xTaskPriorityDisinherit+0x10c>)
 80064c6:	441a      	add	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f7fe f84a 	bl	8004568 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064d8:	697b      	ldr	r3, [r7, #20]
	}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200002fc 	.word	0x200002fc
 80064e8:	20000300 	.word	0x20000300
 80064ec:	20000404 	.word	0x20000404

080064f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80064fe:	2301      	movs	r3, #1
 8006500:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 8087 	beq.w	8006618 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10c      	bne.n	800652c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	b672      	cpsid	i
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	b662      	cpsie	i
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d902      	bls.n	800653c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	e002      	b.n	8006542 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	429a      	cmp	r2, r3
 800654a:	d065      	beq.n	8006618 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	429a      	cmp	r2, r3
 8006554:	d160      	bne.n	8006618 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006556:	4b32      	ldr	r3, [pc, #200]	; (8006620 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	429a      	cmp	r2, r3
 800655e:	d10c      	bne.n	800657a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	b672      	cpsid	i
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	b662      	cpsie	i
 8006574:	60bb      	str	r3, [r7, #8]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	2b00      	cmp	r3, #0
 800658c:	db04      	blt.n	8006598 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f1c3 0207 	rsb	r2, r3, #7
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	6959      	ldr	r1, [r3, #20]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80065a8:	4413      	add	r3, r2
 80065aa:	4299      	cmp	r1, r3
 80065ac:	d134      	bne.n	8006618 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe f835 	bl	8004622 <uxListRemove>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d115      	bne.n	80065ea <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c2:	4918      	ldr	r1, [pc, #96]	; (8006624 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80065c4:	4613      	mov	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	2201      	movs	r2, #1
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43da      	mvns	r2, r3
 80065e0:	4b11      	ldr	r3, [pc, #68]	; (8006628 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4013      	ands	r3, r2
 80065e6:	4a10      	ldr	r2, [pc, #64]	; (8006628 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80065e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	2201      	movs	r2, #1
 80065f0:	409a      	lsls	r2, r3
 80065f2:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4a06      	ldr	r2, [pc, #24]	; (8006624 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800660a:	441a      	add	r2, r3
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f7fd ffa8 	bl	8004568 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006618:	bf00      	nop
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	200002fc 	.word	0x200002fc
 8006624:	20000300 	.word	0x20000300
 8006628:	20000404 	.word	0x20000404

0800662c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006630:	4b07      	ldr	r3, [pc, #28]	; (8006650 <pvTaskIncrementMutexHeldCount+0x24>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <pvTaskIncrementMutexHeldCount+0x24>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800663e:	3201      	adds	r2, #1
 8006640:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006642:	4b03      	ldr	r3, [pc, #12]	; (8006650 <pvTaskIncrementMutexHeldCount+0x24>)
 8006644:	681b      	ldr	r3, [r3, #0]
	}
 8006646:	4618      	mov	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	200002fc 	.word	0x200002fc

08006654 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800665e:	4b29      	ldr	r3, [pc, #164]	; (8006704 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006664:	4b28      	ldr	r3, [pc, #160]	; (8006708 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7fd ffd9 	bl	8004622 <uxListRemove>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10b      	bne.n	800668e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006676:	4b24      	ldr	r3, [pc, #144]	; (8006708 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	2201      	movs	r2, #1
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	43da      	mvns	r2, r3
 8006684:	4b21      	ldr	r3, [pc, #132]	; (800670c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4013      	ands	r3, r2
 800668a:	4a20      	ldr	r2, [pc, #128]	; (800670c <prvAddCurrentTaskToDelayedList+0xb8>)
 800668c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d10a      	bne.n	80066ac <prvAddCurrentTaskToDelayedList+0x58>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800669c:	4b1a      	ldr	r3, [pc, #104]	; (8006708 <prvAddCurrentTaskToDelayedList+0xb4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4619      	mov	r1, r3
 80066a4:	481a      	ldr	r0, [pc, #104]	; (8006710 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066a6:	f7fd ff5f 	bl	8004568 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066aa:	e026      	b.n	80066fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4413      	add	r3, r2
 80066b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066b4:	4b14      	ldr	r3, [pc, #80]	; (8006708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d209      	bcs.n	80066d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c4:	4b13      	ldr	r3, [pc, #76]	; (8006714 <prvAddCurrentTaskToDelayedList+0xc0>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f7fd ff6d 	bl	80045b0 <vListInsert>
}
 80066d6:	e010      	b.n	80066fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d8:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <prvAddCurrentTaskToDelayedList+0xc4>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3304      	adds	r3, #4
 80066e2:	4619      	mov	r1, r3
 80066e4:	4610      	mov	r0, r2
 80066e6:	f7fd ff63 	bl	80045b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <prvAddCurrentTaskToDelayedList+0xc8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d202      	bcs.n	80066fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066f4:	4a09      	ldr	r2, [pc, #36]	; (800671c <prvAddCurrentTaskToDelayedList+0xc8>)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6013      	str	r3, [r2, #0]
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000400 	.word	0x20000400
 8006708:	200002fc 	.word	0x200002fc
 800670c:	20000404 	.word	0x20000404
 8006710:	200003e8 	.word	0x200003e8
 8006714:	200003b8 	.word	0x200003b8
 8006718:	200003b4 	.word	0x200003b4
 800671c:	2000041c 	.word	0x2000041c

08006720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3b04      	subs	r3, #4
 8006730:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3b04      	subs	r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f023 0201 	bic.w	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3b04      	subs	r3, #4
 800674e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006750:	4a0c      	ldr	r2, [pc, #48]	; (8006784 <pxPortInitialiseStack+0x64>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3b14      	subs	r3, #20
 800675a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3b04      	subs	r3, #4
 8006766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f06f 0202 	mvn.w	r2, #2
 800676e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3b20      	subs	r3, #32
 8006774:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006776:	68fb      	ldr	r3, [r7, #12]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	08006789 	.word	0x08006789

08006788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006792:	4b14      	ldr	r3, [pc, #80]	; (80067e4 <prvTaskExitError+0x5c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d00c      	beq.n	80067b6 <prvTaskExitError+0x2e>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	b672      	cpsid	i
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	b662      	cpsie	i
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <prvTaskExitError+0x2c>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	b672      	cpsid	i
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	b662      	cpsie	i
 80067ca:	60bb      	str	r3, [r7, #8]
}
 80067cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067ce:	bf00      	nop
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0fc      	beq.n	80067d0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	2000000c 	.word	0x2000000c
	...

080067f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <pxCurrentTCBConst2>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	f380 8809 	msr	PSP, r0
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	4770      	bx	lr
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst2>:
 8006810:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006818:	4808      	ldr	r0, [pc, #32]	; (800683c <prvPortStartFirstTask+0x24>)
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f380 8808 	msr	MSP, r0
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8814 	msr	CONTROL, r0
 800682a:	b662      	cpsie	i
 800682c:	b661      	cpsie	f
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	df00      	svc	0
 8006838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800683a:	bf00      	nop
 800683c:	e000ed08 	.word	0xe000ed08

08006840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006846:	4b37      	ldr	r3, [pc, #220]	; (8006924 <xPortStartScheduler+0xe4>)
 8006848:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b2f      	ldr	r3, [pc, #188]	; (8006928 <xPortStartScheduler+0xe8>)
 800686c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800686e:	4b2f      	ldr	r3, [pc, #188]	; (800692c <xPortStartScheduler+0xec>)
 8006870:	2207      	movs	r2, #7
 8006872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006874:	e009      	b.n	800688a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006876:	4b2d      	ldr	r3, [pc, #180]	; (800692c <xPortStartScheduler+0xec>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3b01      	subs	r3, #1
 800687c:	4a2b      	ldr	r2, [pc, #172]	; (800692c <xPortStartScheduler+0xec>)
 800687e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	b2db      	uxtb	r3, r3
 8006888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800688a:	78fb      	ldrb	r3, [r7, #3]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d0ef      	beq.n	8006876 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <xPortStartScheduler+0xec>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f1c3 0307 	rsb	r3, r3, #7
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d00c      	beq.n	80068bc <xPortStartScheduler+0x7c>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	b672      	cpsid	i
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	b662      	cpsie	i
 80068b6:	60bb      	str	r3, [r7, #8]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <xPortStartScheduler+0xec>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	4a1a      	ldr	r2, [pc, #104]	; (800692c <xPortStartScheduler+0xec>)
 80068c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068c6:	4b19      	ldr	r3, [pc, #100]	; (800692c <xPortStartScheduler+0xec>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <xPortStartScheduler+0xec>)
 80068d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068da:	4b15      	ldr	r3, [pc, #84]	; (8006930 <xPortStartScheduler+0xf0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a14      	ldr	r2, [pc, #80]	; (8006930 <xPortStartScheduler+0xf0>)
 80068e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068e6:	4b12      	ldr	r3, [pc, #72]	; (8006930 <xPortStartScheduler+0xf0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a11      	ldr	r2, [pc, #68]	; (8006930 <xPortStartScheduler+0xf0>)
 80068ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068f2:	f000 f8dd 	bl	8006ab0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068f6:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <xPortStartScheduler+0xf4>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068fc:	f000 f8fc 	bl	8006af8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006900:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <xPortStartScheduler+0xf8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a0c      	ldr	r2, [pc, #48]	; (8006938 <xPortStartScheduler+0xf8>)
 8006906:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800690a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800690c:	f7ff ff84 	bl	8006818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006910:	f7ff fa7e 	bl	8005e10 <vTaskSwitchContext>
	prvTaskExitError();
 8006914:	f7ff ff38 	bl	8006788 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	e000e400 	.word	0xe000e400
 8006928:	20000428 	.word	0x20000428
 800692c:	2000042c 	.word	0x2000042c
 8006930:	e000ed20 	.word	0xe000ed20
 8006934:	2000000c 	.word	0x2000000c
 8006938:	e000ef34 	.word	0xe000ef34

0800693c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	b672      	cpsid	i
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	b662      	cpsie	i
 8006956:	607b      	str	r3, [r7, #4]
}
 8006958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800695a:	4b10      	ldr	r3, [pc, #64]	; (800699c <vPortEnterCritical+0x60>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	4a0e      	ldr	r2, [pc, #56]	; (800699c <vPortEnterCritical+0x60>)
 8006962:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006964:	4b0d      	ldr	r3, [pc, #52]	; (800699c <vPortEnterCritical+0x60>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d111      	bne.n	8006990 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800696c:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <vPortEnterCritical+0x64>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00c      	beq.n	8006990 <vPortEnterCritical+0x54>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	b672      	cpsid	i
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	b662      	cpsie	i
 800698a:	603b      	str	r3, [r7, #0]
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <vPortEnterCritical+0x52>
	}
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	2000000c 	.word	0x2000000c
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069aa:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <vPortExitCritical+0x54>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10c      	bne.n	80069cc <vPortExitCritical+0x28>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	b672      	cpsid	i
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	b662      	cpsie	i
 80069c6:	607b      	str	r3, [r7, #4]
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <vPortExitCritical+0x54>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <vPortExitCritical+0x54>)
 80069d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069d6:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <vPortExitCritical+0x54>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d105      	bne.n	80069ea <vPortExitCritical+0x46>
 80069de:	2300      	movs	r3, #0
 80069e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	f383 8811 	msr	BASEPRI, r3
}
 80069e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069ea:	bf00      	nop
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	2000000c 	.word	0x2000000c
 80069fc:	00000000 	.word	0x00000000

08006a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a00:	f3ef 8009 	mrs	r0, PSP
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <pxCurrentTCBConst>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	f01e 0f10 	tst.w	lr, #16
 8006a10:	bf08      	it	eq
 8006a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	6010      	str	r0, [r2, #0]
 8006a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a24:	b672      	cpsid	i
 8006a26:	f380 8811 	msr	BASEPRI, r0
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	b662      	cpsie	i
 8006a34:	f7ff f9ec 	bl	8005e10 <vTaskSwitchContext>
 8006a38:	f04f 0000 	mov.w	r0, #0
 8006a3c:	f380 8811 	msr	BASEPRI, r0
 8006a40:	bc09      	pop	{r0, r3}
 8006a42:	6819      	ldr	r1, [r3, #0]
 8006a44:	6808      	ldr	r0, [r1, #0]
 8006a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	f01e 0f10 	tst.w	lr, #16
 8006a4e:	bf08      	it	eq
 8006a50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a54:	f380 8809 	msr	PSP, r0
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop

08006a60 <pxCurrentTCBConst>:
 8006a60:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop

08006a68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	b672      	cpsid	i
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	b662      	cpsie	i
 8006a82:	607b      	str	r3, [r7, #4]
}
 8006a84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a86:	f7ff f909 	bl	8005c9c <xTaskIncrementTick>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <SysTick_Handler+0x44>)
 8006a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f383 8811 	msr	BASEPRI, r3
}
 8006aa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <vPortSetupTimerInterrupt+0x34>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <vPortSetupTimerInterrupt+0x38>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ac0:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <vPortSetupTimerInterrupt+0x3c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <vPortSetupTimerInterrupt+0x40>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	099b      	lsrs	r3, r3, #6
 8006acc:	4a09      	ldr	r2, [pc, #36]	; (8006af4 <vPortSetupTimerInterrupt+0x44>)
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ad2:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <vPortSetupTimerInterrupt+0x34>)
 8006ad4:	2207      	movs	r2, #7
 8006ad6:	601a      	str	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	e000e010 	.word	0xe000e010
 8006ae8:	e000e018 	.word	0xe000e018
 8006aec:	20000000 	.word	0x20000000
 8006af0:	10624dd3 	.word	0x10624dd3
 8006af4:	e000e014 	.word	0xe000e014

08006af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006af8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b08 <vPortEnableVFP+0x10>
 8006afc:	6801      	ldr	r1, [r0, #0]
 8006afe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b02:	6001      	str	r1, [r0, #0]
 8006b04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b06:	bf00      	nop
 8006b08:	e000ed88 	.word	0xe000ed88

08006b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b12:	f3ef 8305 	mrs	r3, IPSR
 8006b16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b0f      	cmp	r3, #15
 8006b1c:	d916      	bls.n	8006b4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b1e:	4a19      	ldr	r2, [pc, #100]	; (8006b84 <vPortValidateInterruptPriority+0x78>)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b28:	4b17      	ldr	r3, [pc, #92]	; (8006b88 <vPortValidateInterruptPriority+0x7c>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	7afa      	ldrb	r2, [r7, #11]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d20c      	bcs.n	8006b4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	b672      	cpsid	i
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	b662      	cpsie	i
 8006b46:	607b      	str	r3, [r7, #4]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <vPortValidateInterruptPriority+0x80>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b54:	4b0e      	ldr	r3, [pc, #56]	; (8006b90 <vPortValidateInterruptPriority+0x84>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d90c      	bls.n	8006b76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	b672      	cpsid	i
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	b662      	cpsie	i
 8006b70:	603b      	str	r3, [r7, #0]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <vPortValidateInterruptPriority+0x68>
	}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	e000e3f0 	.word	0xe000e3f0
 8006b88:	20000428 	.word	0x20000428
 8006b8c:	e000ed0c 	.word	0xe000ed0c
 8006b90:	2000042c 	.word	0x2000042c

08006b94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08a      	sub	sp, #40	; 0x28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ba0:	f7fe ffae 	bl	8005b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ba4:	4b5b      	ldr	r3, [pc, #364]	; (8006d14 <pvPortMalloc+0x180>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bac:	f000 f91a 	bl	8006de4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bb0:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <pvPortMalloc+0x184>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f040 8092 	bne.w	8006ce2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01f      	beq.n	8006c04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4413      	add	r3, r2
 8006bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d016      	beq.n	8006c04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	3308      	adds	r3, #8
 8006bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <pvPortMalloc+0x70>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	b672      	cpsid	i
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	b662      	cpsie	i
 8006bfe:	617b      	str	r3, [r7, #20]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d06b      	beq.n	8006ce2 <pvPortMalloc+0x14e>
 8006c0a:	4b44      	ldr	r3, [pc, #272]	; (8006d1c <pvPortMalloc+0x188>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d866      	bhi.n	8006ce2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c14:	4b42      	ldr	r3, [pc, #264]	; (8006d20 <pvPortMalloc+0x18c>)
 8006c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c18:	4b41      	ldr	r3, [pc, #260]	; (8006d20 <pvPortMalloc+0x18c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c1e:	e004      	b.n	8006c2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d903      	bls.n	8006c3c <pvPortMalloc+0xa8>
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f1      	bne.n	8006c20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c3c:	4b35      	ldr	r3, [pc, #212]	; (8006d14 <pvPortMalloc+0x180>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d04d      	beq.n	8006ce2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	4413      	add	r3, r2
 8006c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	2308      	movs	r3, #8
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d921      	bls.n	8006cac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00c      	beq.n	8006c94 <pvPortMalloc+0x100>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	b672      	cpsid	i
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	b662      	cpsie	i
 8006c8e:	613b      	str	r3, [r7, #16]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ca6:	69b8      	ldr	r0, [r7, #24]
 8006ca8:	f000 f8fe 	bl	8006ea8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cac:	4b1b      	ldr	r3, [pc, #108]	; (8006d1c <pvPortMalloc+0x188>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	4a19      	ldr	r2, [pc, #100]	; (8006d1c <pvPortMalloc+0x188>)
 8006cb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cba:	4b18      	ldr	r3, [pc, #96]	; (8006d1c <pvPortMalloc+0x188>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b19      	ldr	r3, [pc, #100]	; (8006d24 <pvPortMalloc+0x190>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d203      	bcs.n	8006cce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cc6:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <pvPortMalloc+0x188>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a16      	ldr	r2, [pc, #88]	; (8006d24 <pvPortMalloc+0x190>)
 8006ccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <pvPortMalloc+0x184>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ce2:	f7fe ff1b 	bl	8005b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00c      	beq.n	8006d0a <pvPortMalloc+0x176>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	b672      	cpsid	i
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	b662      	cpsie	i
 8006d04:	60fb      	str	r3, [r7, #12]
}
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <pvPortMalloc+0x174>
	return pvReturn;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3728      	adds	r7, #40	; 0x28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20004038 	.word	0x20004038
 8006d18:	20004044 	.word	0x20004044
 8006d1c:	2000403c 	.word	0x2000403c
 8006d20:	20004030 	.word	0x20004030
 8006d24:	20004040 	.word	0x20004040

08006d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d04c      	beq.n	8006dd4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	425b      	negs	r3, r3
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	4b23      	ldr	r3, [pc, #140]	; (8006ddc <vPortFree+0xb4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10c      	bne.n	8006d70 <vPortFree+0x48>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	b672      	cpsid	i
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	b662      	cpsie	i
 8006d6a:	60fb      	str	r3, [r7, #12]
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00c      	beq.n	8006d92 <vPortFree+0x6a>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	b672      	cpsid	i
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	b662      	cpsie	i
 8006d8c:	60bb      	str	r3, [r7, #8]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <vPortFree+0xb4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d019      	beq.n	8006dd4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d115      	bne.n	8006dd4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <vPortFree+0xb4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	401a      	ands	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006db8:	f7fe fea2 	bl	8005b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <vPortFree+0xb8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	4a06      	ldr	r2, [pc, #24]	; (8006de0 <vPortFree+0xb8>)
 8006dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f000 f86c 	bl	8006ea8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006dd0:	f7fe fea4 	bl	8005b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dd4:	bf00      	nop
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20004044 	.word	0x20004044
 8006de0:	2000403c 	.word	0x2000403c

08006de4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006df0:	4b27      	ldr	r3, [pc, #156]	; (8006e90 <prvHeapInit+0xac>)
 8006df2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3307      	adds	r3, #7
 8006e02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0307 	bic.w	r3, r3, #7
 8006e0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <prvHeapInit+0xac>)
 8006e14:	4413      	add	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <prvHeapInit+0xb0>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <prvHeapInit+0xb0>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e30:	2208      	movs	r2, #8
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0307 	bic.w	r3, r3, #7
 8006e3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <prvHeapInit+0xb4>)
 8006e44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <prvHeapInit+0xb4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e4e:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <prvHeapInit+0xb4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e64:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <prvHeapInit+0xb4>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	4a0a      	ldr	r2, [pc, #40]	; (8006e9c <prvHeapInit+0xb8>)
 8006e72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <prvHeapInit+0xbc>)
 8006e7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <prvHeapInit+0xc0>)
 8006e7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e82:	601a      	str	r2, [r3, #0]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	20000430 	.word	0x20000430
 8006e94:	20004030 	.word	0x20004030
 8006e98:	20004038 	.word	0x20004038
 8006e9c:	20004040 	.word	0x20004040
 8006ea0:	2000403c 	.word	0x2000403c
 8006ea4:	20004044 	.word	0x20004044

08006ea8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006eb0:	4b28      	ldr	r3, [pc, #160]	; (8006f54 <prvInsertBlockIntoFreeList+0xac>)
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e002      	b.n	8006ebc <prvInsertBlockIntoFreeList+0x14>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d8f7      	bhi.n	8006eb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d108      	bne.n	8006eea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	441a      	add	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d118      	bne.n	8006f30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <prvInsertBlockIntoFreeList+0xb0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d00d      	beq.n	8006f26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	441a      	add	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	e008      	b.n	8006f38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f26:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <prvInsertBlockIntoFreeList+0xb0>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e003      	b.n	8006f38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d002      	beq.n	8006f46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	20004030 	.word	0x20004030
 8006f58:	20004038 	.word	0x20004038

08006f5c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f002 fa9f 	bl	80094b4 <tcpip_send_msg_wait_sem>
 8006f76:	4603      	mov	r3, r0
 8006f78:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8006f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d103      	bne.n	8006f8a <netconn_apimsg+0x2e>
    return apimsg->err;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006f88:	e001      	b.n	8006f8e <netconn_apimsg+0x32>
  }
  return err;
 8006f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08c      	sub	sp, #48	; 0x30
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	603a      	str	r2, [r7, #0]
 8006fa2:	71fb      	strb	r3, [r7, #7]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 f923 	bl	80081f8 <netconn_alloc>
 8006fb2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d054      	beq.n	8007064 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006fba:	79bb      	ldrb	r3, [r7, #6]
 8006fbc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006fc2:	f107 0308 	add.w	r3, r7, #8
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4829      	ldr	r0, [pc, #164]	; (8007070 <netconn_new_with_proto_and_callback+0xd8>)
 8006fca:	f7ff ffc7 	bl	8006f5c <netconn_apimsg>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8006fd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d043      	beq.n	8007064 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <netconn_new_with_proto_and_callback+0x58>
 8006fe4:	4b23      	ldr	r3, [pc, #140]	; (8007074 <netconn_new_with_proto_and_callback+0xdc>)
 8006fe6:	22a3      	movs	r2, #163	; 0xa3
 8006fe8:	4923      	ldr	r1, [pc, #140]	; (8007078 <netconn_new_with_proto_and_callback+0xe0>)
 8006fea:	4824      	ldr	r0, [pc, #144]	; (800707c <netconn_new_with_proto_and_callback+0xe4>)
 8006fec:	f00d faee 	bl	80145cc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	3310      	adds	r3, #16
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f00d f968 	bl	80142ca <sys_mbox_valid>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d105      	bne.n	800700c <netconn_new_with_proto_and_callback+0x74>
 8007000:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <netconn_new_with_proto_and_callback+0xdc>)
 8007002:	22a4      	movs	r2, #164	; 0xa4
 8007004:	491e      	ldr	r1, [pc, #120]	; (8007080 <netconn_new_with_proto_and_callback+0xe8>)
 8007006:	481d      	ldr	r0, [pc, #116]	; (800707c <netconn_new_with_proto_and_callback+0xe4>)
 8007008:	f00d fae0 	bl	80145cc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	3314      	adds	r3, #20
 8007010:	4618      	mov	r0, r3
 8007012:	f00d f95a 	bl	80142ca <sys_mbox_valid>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <netconn_new_with_proto_and_callback+0x90>
 800701c:	4b15      	ldr	r3, [pc, #84]	; (8007074 <netconn_new_with_proto_and_callback+0xdc>)
 800701e:	22a6      	movs	r2, #166	; 0xa6
 8007020:	4918      	ldr	r1, [pc, #96]	; (8007084 <netconn_new_with_proto_and_callback+0xec>)
 8007022:	4816      	ldr	r0, [pc, #88]	; (800707c <netconn_new_with_proto_and_callback+0xe4>)
 8007024:	f00d fad2 	bl	80145cc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	330c      	adds	r3, #12
 800702c:	4618      	mov	r0, r3
 800702e:	f00d f9dd 	bl	80143ec <sys_sem_valid>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d105      	bne.n	8007044 <netconn_new_with_proto_and_callback+0xac>
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <netconn_new_with_proto_and_callback+0xdc>)
 800703a:	22a9      	movs	r2, #169	; 0xa9
 800703c:	4912      	ldr	r1, [pc, #72]	; (8007088 <netconn_new_with_proto_and_callback+0xf0>)
 800703e:	480f      	ldr	r0, [pc, #60]	; (800707c <netconn_new_with_proto_and_callback+0xe4>)
 8007040:	f00d fac4 	bl	80145cc <iprintf>
      sys_sem_free(&conn->op_completed);
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	330c      	adds	r3, #12
 8007048:	4618      	mov	r0, r3
 800704a:	f00d f9c2 	bl	80143d2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	3310      	adds	r3, #16
 8007052:	4618      	mov	r0, r3
 8007054:	f00d f8b2 	bl	80141bc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800705a:	2007      	movs	r0, #7
 800705c:	f002 ff92 	bl	8009f84 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	e000      	b.n	8007066 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007066:	4618      	mov	r0, r3
 8007068:	3730      	adds	r7, #48	; 0x30
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	080081cd 	.word	0x080081cd
 8007074:	080156e4 	.word	0x080156e4
 8007078:	08015718 	.word	0x08015718
 800707c:	0801573c 	.word	0x0801573c
 8007080:	08015764 	.word	0x08015764
 8007084:	0801577c 	.word	0x0801577c
 8007088:	080157a0 	.word	0x080157a0

0800708c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	; 0x30
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	e014      	b.n	80070c8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80070a2:	2329      	movs	r3, #41	; 0x29
 80070a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80070a6:	f107 030c 	add.w	r3, r7, #12
 80070aa:	4619      	mov	r1, r3
 80070ac:	4808      	ldr	r0, [pc, #32]	; (80070d0 <netconn_prepare_delete+0x44>)
 80070ae:	f7ff ff55 	bl	8006f5c <netconn_apimsg>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80070b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <netconn_prepare_delete+0x3a>
    return err;
 80070c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070c4:	e000      	b.n	80070c8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3730      	adds	r7, #48	; 0x30
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	08008731 	.word	0x08008731

080070d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <netconn_delete+0x12>
    return ERR_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	e00d      	b.n	8007102 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff ffd0 	bl	800708c <netconn_prepare_delete>
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80070f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <netconn_delete+0x2a>
    netconn_free(conn);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f8eb 	bl	80082d4 <netconn_free>
  }
  return err;
 80070fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08e      	sub	sp, #56	; 0x38
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <netconn_bind+0x28>
 8007120:	4b11      	ldr	r3, [pc, #68]	; (8007168 <netconn_bind+0x5c>)
 8007122:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007126:	4911      	ldr	r1, [pc, #68]	; (800716c <netconn_bind+0x60>)
 8007128:	4811      	ldr	r0, [pc, #68]	; (8007170 <netconn_bind+0x64>)
 800712a:	f00d fa4f 	bl	80145cc <iprintf>
 800712e:	f06f 030f 	mvn.w	r3, #15
 8007132:	e015      	b.n	8007160 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800713a:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <netconn_bind+0x68>)
 800713c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800714a:	f107 0314 	add.w	r3, r7, #20
 800714e:	4619      	mov	r1, r3
 8007150:	4809      	ldr	r0, [pc, #36]	; (8007178 <netconn_bind+0x6c>)
 8007152:	f7ff ff03 	bl	8006f5c <netconn_apimsg>
 8007156:	4603      	mov	r3, r0
 8007158:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800715c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007160:	4618      	mov	r0, r3
 8007162:	3738      	adds	r7, #56	; 0x38
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	080156e4 	.word	0x080156e4
 800716c:	0801581c 	.word	0x0801581c
 8007170:	0801573c 	.word	0x0801573c
 8007174:	08018ce0 	.word	0x08018ce0
 8007178:	080088f9 	.word	0x080088f9

0800717c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08c      	sub	sp, #48	; 0x30
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <netconn_listen_with_backlog+0x26>
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <netconn_listen_with_backlog+0x48>)
 8007190:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007194:	490c      	ldr	r1, [pc, #48]	; (80071c8 <netconn_listen_with_backlog+0x4c>)
 8007196:	480d      	ldr	r0, [pc, #52]	; (80071cc <netconn_listen_with_backlog+0x50>)
 8007198:	f00d fa18 	bl	80145cc <iprintf>
 800719c:	f06f 030f 	mvn.w	r3, #15
 80071a0:	e00c      	b.n	80071bc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80071a6:	f107 030c 	add.w	r3, r7, #12
 80071aa:	4619      	mov	r1, r3
 80071ac:	4808      	ldr	r0, [pc, #32]	; (80071d0 <netconn_listen_with_backlog+0x54>)
 80071ae:	f7ff fed5 	bl	8006f5c <netconn_apimsg>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80071b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3730      	adds	r7, #48	; 0x30
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	080156e4 	.word	0x080156e4
 80071c8:	0801589c 	.word	0x0801589c
 80071cc:	0801573c 	.word	0x0801573c
 80071d0:	0800896d 	.word	0x0800896d

080071d4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <netconn_accept+0x24>
 80071e4:	4b3d      	ldr	r3, [pc, #244]	; (80072dc <netconn_accept+0x108>)
 80071e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80071ea:	493d      	ldr	r1, [pc, #244]	; (80072e0 <netconn_accept+0x10c>)
 80071ec:	483d      	ldr	r0, [pc, #244]	; (80072e4 <netconn_accept+0x110>)
 80071ee:	f00d f9ed 	bl	80145cc <iprintf>
 80071f2:	f06f 030f 	mvn.w	r3, #15
 80071f6:	e06c      	b.n	80072d2 <netconn_accept+0xfe>
  *new_conn = NULL;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d109      	bne.n	8007218 <netconn_accept+0x44>
 8007204:	4b35      	ldr	r3, [pc, #212]	; (80072dc <netconn_accept+0x108>)
 8007206:	f240 12e3 	movw	r2, #483	; 0x1e3
 800720a:	4937      	ldr	r1, [pc, #220]	; (80072e8 <netconn_accept+0x114>)
 800720c:	4835      	ldr	r0, [pc, #212]	; (80072e4 <netconn_accept+0x110>)
 800720e:	f00d f9dd 	bl	80145cc <iprintf>
 8007212:	f06f 030f 	mvn.w	r3, #15
 8007216:	e05c      	b.n	80072d2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fb6c 	bl	80078f6 <netconn_err>
 800721e:	4603      	mov	r3, r0
 8007220:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007222:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800722a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800722e:	e050      	b.n	80072d2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3314      	adds	r3, #20
 8007234:	4618      	mov	r0, r3
 8007236:	f00d f848 	bl	80142ca <sys_mbox_valid>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <netconn_accept+0x78>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7f1b      	ldrb	r3, [r3, #28]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800724c:	f06f 030e 	mvn.w	r3, #14
 8007250:	e03f      	b.n	80072d2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	7f1b      	ldrb	r3, [r3, #28]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00e      	beq.n	800727c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	3314      	adds	r3, #20
 8007262:	f107 020c 	add.w	r2, r7, #12
 8007266:	4611      	mov	r1, r2
 8007268:	4618      	mov	r0, r3
 800726a:	f00d f812 	bl	8014292 <sys_arch_mbox_tryfetch>
 800726e:	4603      	mov	r3, r0
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d10a      	bne.n	800728c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007276:	f06f 0306 	mvn.w	r3, #6
 800727a:	e02a      	b.n	80072d2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3314      	adds	r3, #20
 8007280:	f107 010c 	add.w	r1, r7, #12
 8007284:	2200      	movs	r2, #0
 8007286:	4618      	mov	r0, r3
 8007288:	f00c ffc4 	bl	8014214 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <netconn_accept+0xcc>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	2200      	movs	r2, #0
 800729a:	2101      	movs	r1, #1
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f107 0213 	add.w	r2, r7, #19
 80072a6:	4611      	mov	r1, r2
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 fb75 	bl	8007998 <lwip_netconn_is_err_msg>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80072b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80072b8:	e00b      	b.n	80072d2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80072c0:	f06f 030e 	mvn.w	r3, #14
 80072c4:	e005      	b.n	80072d2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80072d0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	080156e4 	.word	0x080156e4
 80072e0:	080158bc 	.word	0x080158bc
 80072e4:	0801573c 	.word	0x0801573c
 80072e8:	080158dc 	.word	0x080158dc

080072ec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	4613      	mov	r3, r2
 80072f8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d109      	bne.n	8007318 <netconn_recv_data+0x2c>
 8007304:	4b58      	ldr	r3, [pc, #352]	; (8007468 <netconn_recv_data+0x17c>)
 8007306:	f44f 7212 	mov.w	r2, #584	; 0x248
 800730a:	4958      	ldr	r1, [pc, #352]	; (800746c <netconn_recv_data+0x180>)
 800730c:	4858      	ldr	r0, [pc, #352]	; (8007470 <netconn_recv_data+0x184>)
 800730e:	f00d f95d 	bl	80145cc <iprintf>
 8007312:	f06f 030f 	mvn.w	r3, #15
 8007316:	e0a2      	b.n	800745e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <netconn_recv_data+0x4c>
 8007324:	4b50      	ldr	r3, [pc, #320]	; (8007468 <netconn_recv_data+0x17c>)
 8007326:	f240 224a 	movw	r2, #586	; 0x24a
 800732a:	4952      	ldr	r1, [pc, #328]	; (8007474 <netconn_recv_data+0x188>)
 800732c:	4850      	ldr	r0, [pc, #320]	; (8007470 <netconn_recv_data+0x184>)
 800732e:	f00d f94d 	bl	80145cc <iprintf>
 8007332:	f06f 030f 	mvn.w	r3, #15
 8007336:	e092      	b.n	800745e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3310      	adds	r3, #16
 800733c:	4618      	mov	r0, r3
 800733e:	f00c ffc4 	bl	80142ca <sys_mbox_valid>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10e      	bne.n	8007366 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fad4 	bl	80078f6 <netconn_err>
 800734e:	4603      	mov	r3, r0
 8007350:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007352:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800735a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800735e:	e07e      	b.n	800745e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007360:	f06f 030a 	mvn.w	r3, #10
 8007364:	e07b      	b.n	800745e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	7f1b      	ldrb	r3, [r3, #28]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10f      	bne.n	8007392 <netconn_recv_data+0xa6>
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10a      	bne.n	8007392 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	7f1b      	ldrb	r3, [r3, #28]
 8007380:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007384:	2b00      	cmp	r3, #0
 8007386:	d104      	bne.n	8007392 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d023      	beq.n	80073da <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3310      	adds	r3, #16
 8007396:	f107 0218 	add.w	r2, r7, #24
 800739a:	4611      	mov	r1, r2
 800739c:	4618      	mov	r0, r3
 800739e:	f00c ff78 	bl	8014292 <sys_arch_mbox_tryfetch>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d11f      	bne.n	80073ea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 faa3 	bl	80078f6 <netconn_err>
 80073b0:	4603      	mov	r3, r0
 80073b2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80073b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80073bc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80073c0:	e04d      	b.n	800745e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	7f1b      	ldrb	r3, [r3, #28]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80073ce:	f06f 030a 	mvn.w	r3, #10
 80073d2:	e044      	b.n	800745e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80073d4:	f06f 0306 	mvn.w	r3, #6
 80073d8:	e041      	b.n	800745e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3310      	adds	r3, #16
 80073de:	f107 0118 	add.w	r1, r7, #24
 80073e2:	2200      	movs	r2, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f00c ff15 	bl	8014214 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073f2:	2b10      	cmp	r3, #16
 80073f4:	d117      	bne.n	8007426 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	f107 0217 	add.w	r2, r7, #23
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 faca 	bl	8007998 <lwip_netconn_is_err_msg>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800740a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800740e:	f113 0f0f 	cmn.w	r3, #15
 8007412:	d101      	bne.n	8007418 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	e022      	b.n	800745e <netconn_recv_data+0x172>
      }
      return err;
 8007418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800741c:	e01f      	b.n	800745e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	891b      	ldrh	r3, [r3, #8]
 8007422:	83fb      	strh	r3, [r7, #30]
 8007424:	e00d      	b.n	8007442 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <netconn_recv_data+0x14e>
 800742c:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <netconn_recv_data+0x17c>)
 800742e:	f240 2291 	movw	r2, #657	; 0x291
 8007432:	4911      	ldr	r1, [pc, #68]	; (8007478 <netconn_recv_data+0x18c>)
 8007434:	480e      	ldr	r0, [pc, #56]	; (8007470 <netconn_recv_data+0x184>)
 8007436:	f00d f8c9 	bl	80145cc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	891b      	ldrh	r3, [r3, #8]
 8007440:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <netconn_recv_data+0x16a>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	8bfa      	ldrh	r2, [r7, #30]
 8007450:	2101      	movs	r1, #1
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3720      	adds	r7, #32
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	080156e4 	.word	0x080156e4
 800746c:	080158fc 	.word	0x080158fc
 8007470:	0801573c 	.word	0x0801573c
 8007474:	0801591c 	.word	0x0801591c
 8007478:	08015938 	.word	0x08015938

0800747c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <netconn_tcp_recvd_msg+0x1e>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007496:	2b10      	cmp	r3, #16
 8007498:	d009      	beq.n	80074ae <netconn_tcp_recvd_msg+0x32>
 800749a:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <netconn_tcp_recvd_msg+0x50>)
 800749c:	f240 22a7 	movw	r2, #679	; 0x2a7
 80074a0:	490b      	ldr	r1, [pc, #44]	; (80074d0 <netconn_tcp_recvd_msg+0x54>)
 80074a2:	480c      	ldr	r0, [pc, #48]	; (80074d4 <netconn_tcp_recvd_msg+0x58>)
 80074a4:	f00d f892 	bl	80145cc <iprintf>
 80074a8:	f06f 030f 	mvn.w	r3, #15
 80074ac:	e00a      	b.n	80074c4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4806      	ldr	r0, [pc, #24]	; (80074d8 <netconn_tcp_recvd_msg+0x5c>)
 80074be:	f7ff fd4d 	bl	8006f5c <netconn_apimsg>
 80074c2:	4603      	mov	r3, r0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	080156e4 	.word	0x080156e4
 80074d0:	08015944 	.word	0x08015944
 80074d4:	0801573c 	.word	0x0801573c
 80074d8:	08008a9d 	.word	0x08008a9d

080074dc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b090      	sub	sp, #64	; 0x40
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3310      	adds	r3, #16
 80074ee:	4618      	mov	r0, r3
 80074f0:	f00c feeb 	bl	80142ca <sys_mbox_valid>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80074fa:	f06f 030a 	mvn.w	r3, #10
 80074fe:	e06d      	b.n	80075dc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	7f1b      	ldrb	r3, [r3, #28]
 8007504:	b25b      	sxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	da07      	bge.n	800751a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	7f1b      	ldrb	r3, [r3, #28]
 800750e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007512:	b2da      	uxtb	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007518:	e039      	b.n	800758e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	461a      	mov	r2, r3
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff fee3 	bl	80072ec <netconn_recv_data>
 8007526:	4603      	mov	r3, r0
 8007528:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800752c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007534:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007538:	e050      	b.n	80075dc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10e      	bne.n	8007568 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <netconn_recv_data_tcp+0x7a>
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	891b      	ldrh	r3, [r3, #8]
 8007554:	e000      	b.n	8007558 <netconn_recv_data_tcp+0x7c>
 8007556:	2301      	movs	r3, #1
 8007558:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800755a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800755c:	f107 0214 	add.w	r2, r7, #20
 8007560:	4619      	mov	r1, r3
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f7ff ff8a 	bl	800747c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756a:	2b00      	cmp	r3, #0
 800756c:	d134      	bne.n	80075d8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	f003 0310 	and.w	r3, r3, #16
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	7f1b      	ldrb	r3, [r3, #28]
 800757c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007580:	b2da      	uxtb	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007586:	f06f 0306 	mvn.w	r3, #6
 800758a:	e027      	b.n	80075dc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800758c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <netconn_recv_data_tcp+0xc6>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	2200      	movs	r2, #0
 800759c:	2101      	movs	r1, #1
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10f      	bne.n	80075ca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 f9a3 	bl	80078f6 <netconn_err>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80075b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <netconn_recv_data_tcp+0xe8>
          return err;
 80075be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075c2:	e00b      	b.n	80075dc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80075c4:	f06f 030d 	mvn.w	r3, #13
 80075c8:	e008      	b.n	80075dc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80075ca:	2101      	movs	r1, #1
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 f955 	bl	800787c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80075d2:	f06f 030e 	mvn.w	r3, #14
 80075d6:	e001      	b.n	80075dc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80075d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3740      	adds	r7, #64	; 0x40
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d109      	bne.n	800760c <netconn_recv+0x28>
 80075f8:	4b32      	ldr	r3, [pc, #200]	; (80076c4 <netconn_recv+0xe0>)
 80075fa:	f240 3263 	movw	r2, #867	; 0x363
 80075fe:	4932      	ldr	r1, [pc, #200]	; (80076c8 <netconn_recv+0xe4>)
 8007600:	4832      	ldr	r0, [pc, #200]	; (80076cc <netconn_recv+0xe8>)
 8007602:	f00c ffe3 	bl	80145cc <iprintf>
 8007606:	f06f 030f 	mvn.w	r3, #15
 800760a:	e056      	b.n	80076ba <netconn_recv+0xd6>
  *new_buf = NULL;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d109      	bne.n	800762c <netconn_recv+0x48>
 8007618:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <netconn_recv+0xe0>)
 800761a:	f240 3265 	movw	r2, #869	; 0x365
 800761e:	492c      	ldr	r1, [pc, #176]	; (80076d0 <netconn_recv+0xec>)
 8007620:	482a      	ldr	r0, [pc, #168]	; (80076cc <netconn_recv+0xe8>)
 8007622:	f00c ffd3 	bl	80145cc <iprintf>
 8007626:	f06f 030f 	mvn.w	r3, #15
 800762a:	e046      	b.n	80076ba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007634:	2b10      	cmp	r3, #16
 8007636:	d13a      	bne.n	80076ae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800763c:	2006      	movs	r0, #6
 800763e:	f002 fc4f 	bl	8009ee0 <memp_malloc>
 8007642:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d102      	bne.n	8007650 <netconn_recv+0x6c>
      return ERR_MEM;
 800764a:	f04f 33ff 	mov.w	r3, #4294967295
 800764e:	e034      	b.n	80076ba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8007650:	f107 030c 	add.w	r3, r7, #12
 8007654:	2200      	movs	r2, #0
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff3f 	bl	80074dc <netconn_recv_data_tcp>
 800765e:	4603      	mov	r3, r0
 8007660:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007662:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d006      	beq.n	8007678 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800766a:	6979      	ldr	r1, [r7, #20]
 800766c:	2006      	movs	r0, #6
 800766e:	f002 fc89 	bl	8009f84 <memp_free>
      return err;
 8007672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007676:	e020      	b.n	80076ba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <netconn_recv+0xa8>
 800767e:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <netconn_recv+0xe0>)
 8007680:	f240 3279 	movw	r2, #889	; 0x379
 8007684:	4913      	ldr	r1, [pc, #76]	; (80076d4 <netconn_recv+0xf0>)
 8007686:	4811      	ldr	r0, [pc, #68]	; (80076cc <netconn_recv+0xe8>)
 8007688:	f00c ffa0 	bl	80145cc <iprintf>

    buf->p = p;
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2200      	movs	r2, #0
 800769c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2200      	movs	r2, #0
 80076a2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	e005      	b.n	80076ba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80076ae:	2200      	movs	r2, #0
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff fe1a 	bl	80072ec <netconn_recv_data>
 80076b8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	080156e4 	.word	0x080156e4
 80076c8:	080158fc 	.word	0x080158fc
 80076cc:	0801573c 	.word	0x0801573c
 80076d0:	0801591c 	.word	0x0801591c
 80076d4:	08015994 	.word	0x08015994

080076d8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80076ee:	78fa      	ldrb	r2, [r7, #3]
 80076f0:	f107 0110 	add.w	r1, r7, #16
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	4613      	mov	r3, r2
 80076fa:	2201      	movs	r2, #1
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f805 	bl	800770c <netconn_write_vectors_partly>
 8007702:	4603      	mov	r3, r0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b092      	sub	sp, #72	; 0x48
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4611      	mov	r1, r2
 8007718:	461a      	mov	r2, r3
 800771a:	460b      	mov	r3, r1
 800771c:	80fb      	strh	r3, [r7, #6]
 800771e:	4613      	mov	r3, r2
 8007720:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d109      	bne.n	800773c <netconn_write_vectors_partly+0x30>
 8007728:	4b4e      	ldr	r3, [pc, #312]	; (8007864 <netconn_write_vectors_partly+0x158>)
 800772a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800772e:	494e      	ldr	r1, [pc, #312]	; (8007868 <netconn_write_vectors_partly+0x15c>)
 8007730:	484e      	ldr	r0, [pc, #312]	; (800786c <netconn_write_vectors_partly+0x160>)
 8007732:	f00c ff4b 	bl	80145cc <iprintf>
 8007736:	f06f 030f 	mvn.w	r3, #15
 800773a:	e08e      	b.n	800785a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007744:	2b10      	cmp	r3, #16
 8007746:	d009      	beq.n	800775c <netconn_write_vectors_partly+0x50>
 8007748:	4b46      	ldr	r3, [pc, #280]	; (8007864 <netconn_write_vectors_partly+0x158>)
 800774a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800774e:	4948      	ldr	r1, [pc, #288]	; (8007870 <netconn_write_vectors_partly+0x164>)
 8007750:	4846      	ldr	r0, [pc, #280]	; (800786c <netconn_write_vectors_partly+0x160>)
 8007752:	f00c ff3b 	bl	80145cc <iprintf>
 8007756:	f06f 0305 	mvn.w	r3, #5
 800775a:	e07e      	b.n	800785a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	7f1b      	ldrb	r3, [r3, #28]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <netconn_write_vectors_partly+0x66>
 8007768:	797b      	ldrb	r3, [r7, #5]
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <netconn_write_vectors_partly+0x6a>
 8007772:	2301      	movs	r3, #1
 8007774:	e000      	b.n	8007778 <netconn_write_vectors_partly+0x6c>
 8007776:	2300      	movs	r3, #0
 8007778:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800777c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <netconn_write_vectors_partly+0x84>
 8007784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800778a:	f06f 0305 	mvn.w	r3, #5
 800778e:	e064      	b.n	800785a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8007794:	2300      	movs	r3, #0
 8007796:	643b      	str	r3, [r7, #64]	; 0x40
 8007798:	e015      	b.n	80077c6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800779a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4413      	add	r3, r2
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a6:	4413      	add	r3, r2
 80077a8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80077aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d202      	bcs.n	80077c0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80077ba:	f06f 0305 	mvn.w	r3, #5
 80077be:	e04c      	b.n	800785a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80077c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c2:	3301      	adds	r3, #1
 80077c4:	643b      	str	r3, [r7, #64]	; 0x40
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077ca:	429a      	cmp	r2, r3
 80077cc:	dbe5      	blt.n	800779a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80077ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e040      	b.n	800785a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80077d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077da:	2b00      	cmp	r3, #0
 80077dc:	da0a      	bge.n	80077f4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80077de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80077e4:	f06f 0305 	mvn.w	r3, #5
 80077e8:	e037      	b.n	800785a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80077ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80077ee:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80077f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80077fc:	88fb      	ldrh	r3, [r7, #6]
 80077fe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8007804:	797b      	ldrb	r3, [r7, #5]
 8007806:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800780a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800780c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007812:	f107 0314 	add.w	r3, r7, #20
 8007816:	4619      	mov	r1, r3
 8007818:	4816      	ldr	r0, [pc, #88]	; (8007874 <netconn_write_vectors_partly+0x168>)
 800781a:	f7ff fb9f 	bl	8006f5c <netconn_apimsg>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8007824:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007828:	2b00      	cmp	r3, #0
 800782a:	d114      	bne.n	8007856 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800782c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8007832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007836:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8007838:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007844:	429a      	cmp	r2, r3
 8007846:	d006      	beq.n	8007856 <netconn_write_vectors_partly+0x14a>
 8007848:	4b06      	ldr	r3, [pc, #24]	; (8007864 <netconn_write_vectors_partly+0x158>)
 800784a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800784e:	490a      	ldr	r1, [pc, #40]	; (8007878 <netconn_write_vectors_partly+0x16c>)
 8007850:	4806      	ldr	r0, [pc, #24]	; (800786c <netconn_write_vectors_partly+0x160>)
 8007852:	f00c febb 	bl	80145cc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8007856:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800785a:	4618      	mov	r0, r3
 800785c:	3748      	adds	r7, #72	; 0x48
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	080156e4 	.word	0x080156e4
 8007868:	080159bc 	.word	0x080159bc
 800786c:	0801573c 	.word	0x0801573c
 8007870:	080159d8 	.word	0x080159d8
 8007874:	08008ea1 	.word	0x08008ea1
 8007878:	080159fc 	.word	0x080159fc

0800787c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08c      	sub	sp, #48	; 0x30
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <netconn_close_shutdown+0x26>
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <netconn_close_shutdown+0x50>)
 8007890:	f240 4247 	movw	r2, #1095	; 0x447
 8007894:	490e      	ldr	r1, [pc, #56]	; (80078d0 <netconn_close_shutdown+0x54>)
 8007896:	480f      	ldr	r0, [pc, #60]	; (80078d4 <netconn_close_shutdown+0x58>)
 8007898:	f00c fe98 	bl	80145cc <iprintf>
 800789c:	f06f 030f 	mvn.w	r3, #15
 80078a0:	e010      	b.n	80078c4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80078aa:	2329      	movs	r3, #41	; 0x29
 80078ac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80078ae:	f107 030c 	add.w	r3, r7, #12
 80078b2:	4619      	mov	r1, r3
 80078b4:	4808      	ldr	r0, [pc, #32]	; (80078d8 <netconn_close_shutdown+0x5c>)
 80078b6:	f7ff fb51 	bl	8006f5c <netconn_apimsg>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80078c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3730      	adds	r7, #48	; 0x30
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	080156e4 	.word	0x080156e4
 80078d0:	08015a20 	.word	0x08015a20
 80078d4:	0801573c 	.word	0x0801573c
 80078d8:	08008fb9 	.word	0x08008fb9

080078dc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80078e4:	2103      	movs	r1, #3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff ffc8 	bl	800787c <netconn_close_shutdown>
 80078ec:	4603      	mov	r3, r0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <netconn_err+0x12>
    return ERR_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	e00d      	b.n	8007924 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8007908:	f00c fdfa 	bl	8014500 <sys_arch_protect>
 800790c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	7a1b      	ldrb	r3, [r3, #8]
 8007912:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f00c fdfe 	bl	801451c <sys_arch_unprotect>
  return err;
 8007920:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8007936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800793a:	f113 0f0d 	cmn.w	r3, #13
 800793e:	d009      	beq.n	8007954 <lwip_netconn_err_to_msg+0x28>
 8007940:	f113 0f0d 	cmn.w	r3, #13
 8007944:	dc0c      	bgt.n	8007960 <lwip_netconn_err_to_msg+0x34>
 8007946:	f113 0f0f 	cmn.w	r3, #15
 800794a:	d007      	beq.n	800795c <lwip_netconn_err_to_msg+0x30>
 800794c:	f113 0f0e 	cmn.w	r3, #14
 8007950:	d002      	beq.n	8007958 <lwip_netconn_err_to_msg+0x2c>
 8007952:	e005      	b.n	8007960 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8007954:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <lwip_netconn_err_to_msg+0x54>)
 8007956:	e00e      	b.n	8007976 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8007958:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <lwip_netconn_err_to_msg+0x58>)
 800795a:	e00c      	b.n	8007976 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800795c:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <lwip_netconn_err_to_msg+0x5c>)
 800795e:	e00a      	b.n	8007976 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8007960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <lwip_netconn_err_to_msg+0x48>
 8007968:	4b08      	ldr	r3, [pc, #32]	; (800798c <lwip_netconn_err_to_msg+0x60>)
 800796a:	227d      	movs	r2, #125	; 0x7d
 800796c:	4908      	ldr	r1, [pc, #32]	; (8007990 <lwip_netconn_err_to_msg+0x64>)
 800796e:	4809      	ldr	r0, [pc, #36]	; (8007994 <lwip_netconn_err_to_msg+0x68>)
 8007970:	f00c fe2c 	bl	80145cc <iprintf>
      return NULL;
 8007974:	2300      	movs	r3, #0
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	08018bcc 	.word	0x08018bcc
 8007984:	08018bcd 	.word	0x08018bcd
 8007988:	08018bce 	.word	0x08018bce
 800798c:	08015a3c 	.word	0x08015a3c
 8007990:	08015a70 	.word	0x08015a70
 8007994:	08015a80 	.word	0x08015a80

08007998 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d105      	bne.n	80079b4 <lwip_netconn_is_err_msg+0x1c>
 80079a8:	4b12      	ldr	r3, [pc, #72]	; (80079f4 <lwip_netconn_is_err_msg+0x5c>)
 80079aa:	2285      	movs	r2, #133	; 0x85
 80079ac:	4912      	ldr	r1, [pc, #72]	; (80079f8 <lwip_netconn_is_err_msg+0x60>)
 80079ae:	4813      	ldr	r0, [pc, #76]	; (80079fc <lwip_netconn_is_err_msg+0x64>)
 80079b0:	f00c fe0c 	bl	80145cc <iprintf>

  if (msg == &netconn_aborted) {
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a12      	ldr	r2, [pc, #72]	; (8007a00 <lwip_netconn_is_err_msg+0x68>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d104      	bne.n	80079c6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	22f3      	movs	r2, #243	; 0xf3
 80079c0:	701a      	strb	r2, [r3, #0]
    return 1;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e012      	b.n	80079ec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a0e      	ldr	r2, [pc, #56]	; (8007a04 <lwip_netconn_is_err_msg+0x6c>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d104      	bne.n	80079d8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	22f2      	movs	r2, #242	; 0xf2
 80079d2:	701a      	strb	r2, [r3, #0]
    return 1;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e009      	b.n	80079ec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a0b      	ldr	r2, [pc, #44]	; (8007a08 <lwip_netconn_is_err_msg+0x70>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d104      	bne.n	80079ea <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	22f1      	movs	r2, #241	; 0xf1
 80079e4:	701a      	strb	r2, [r3, #0]
    return 1;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	08015a3c 	.word	0x08015a3c
 80079f8:	08015aa8 	.word	0x08015aa8
 80079fc:	08015a80 	.word	0x08015a80
 8007a00:	08018bcc 	.word	0x08018bcc
 8007a04:	08018bcd 	.word	0x08018bcd
 8007a08:	08018bce 	.word	0x08018bce

08007a0c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d105      	bne.n	8007a2c <recv_udp+0x20>
 8007a20:	4b34      	ldr	r3, [pc, #208]	; (8007af4 <recv_udp+0xe8>)
 8007a22:	22e5      	movs	r2, #229	; 0xe5
 8007a24:	4934      	ldr	r1, [pc, #208]	; (8007af8 <recv_udp+0xec>)
 8007a26:	4835      	ldr	r0, [pc, #212]	; (8007afc <recv_udp+0xf0>)
 8007a28:	f00c fdd0 	bl	80145cc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <recv_udp+0x32>
 8007a32:	4b30      	ldr	r3, [pc, #192]	; (8007af4 <recv_udp+0xe8>)
 8007a34:	22e6      	movs	r2, #230	; 0xe6
 8007a36:	4932      	ldr	r1, [pc, #200]	; (8007b00 <recv_udp+0xf4>)
 8007a38:	4830      	ldr	r0, [pc, #192]	; (8007afc <recv_udp+0xf0>)
 8007a3a:	f00c fdc7 	bl	80145cc <iprintf>
  conn = (struct netconn *)arg;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <recv_udp+0x44>
    pbuf_free(p);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f003 f93f 	bl	800accc <pbuf_free>
    return;
 8007a4e:	e04d      	b.n	8007aec <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d005      	beq.n	8007a66 <recv_udp+0x5a>
 8007a5a:	4b26      	ldr	r3, [pc, #152]	; (8007af4 <recv_udp+0xe8>)
 8007a5c:	22ee      	movs	r2, #238	; 0xee
 8007a5e:	4929      	ldr	r1, [pc, #164]	; (8007b04 <recv_udp+0xf8>)
 8007a60:	4826      	ldr	r0, [pc, #152]	; (8007afc <recv_udp+0xf0>)
 8007a62:	f00c fdb3 	bl	80145cc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	3310      	adds	r3, #16
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f00c fc2d 	bl	80142ca <sys_mbox_valid>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f003 f928 	bl	800accc <pbuf_free>
    return;
 8007a7c:	e036      	b.n	8007aec <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007a7e:	2006      	movs	r0, #6
 8007a80:	f002 fa2e 	bl	8009ee0 <memp_malloc>
 8007a84:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <recv_udp+0x88>
    pbuf_free(p);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f003 f91d 	bl	800accc <pbuf_free>
    return;
 8007a92:	e02b      	b.n	8007aec <recv_udp+0xe0>
  } else {
    buf->p = p;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <recv_udp+0xa0>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	e000      	b.n	8007aae <recv_udp+0xa2>
 8007aac:	2300      	movs	r3, #0
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007ab6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	891b      	ldrh	r3, [r3, #8]
 8007abc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	69b9      	ldr	r1, [r7, #24]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f00c fb8b 	bl	80141e0 <sys_mbox_trypost>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8007ad0:	69b8      	ldr	r0, [r7, #24]
 8007ad2:	f001 fafd 	bl	80090d0 <netbuf_delete>
    return;
 8007ad6:	e009      	b.n	8007aec <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <recv_udp+0xe0>
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	8afa      	ldrh	r2, [r7, #22]
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	69f8      	ldr	r0, [r7, #28]
 8007aea:	4798      	blx	r3
  }
}
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08015a3c 	.word	0x08015a3c
 8007af8:	08015ab4 	.word	0x08015ab4
 8007afc:	08015a80 	.word	0x08015a80
 8007b00:	08015ad8 	.word	0x08015ad8
 8007b04:	08015af8 	.word	0x08015af8

08007b08 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d106      	bne.n	8007b2a <recv_tcp+0x22>
 8007b1c:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <recv_tcp+0xf0>)
 8007b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b22:	4936      	ldr	r1, [pc, #216]	; (8007bfc <recv_tcp+0xf4>)
 8007b24:	4836      	ldr	r0, [pc, #216]	; (8007c00 <recv_tcp+0xf8>)
 8007b26:	f00c fd51 	bl	80145cc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <recv_tcp+0x36>
 8007b30:	4b31      	ldr	r3, [pc, #196]	; (8007bf8 <recv_tcp+0xf0>)
 8007b32:	f240 122d 	movw	r2, #301	; 0x12d
 8007b36:	4933      	ldr	r1, [pc, #204]	; (8007c04 <recv_tcp+0xfc>)
 8007b38:	4831      	ldr	r0, [pc, #196]	; (8007c00 <recv_tcp+0xf8>)
 8007b3a:	f00c fd47 	bl	80145cc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d006      	beq.n	8007b54 <recv_tcp+0x4c>
 8007b46:	4b2c      	ldr	r3, [pc, #176]	; (8007bf8 <recv_tcp+0xf0>)
 8007b48:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8007b4c:	492e      	ldr	r1, [pc, #184]	; (8007c08 <recv_tcp+0x100>)
 8007b4e:	482c      	ldr	r0, [pc, #176]	; (8007c00 <recv_tcp+0xf8>)
 8007b50:	f00c fd3c 	bl	80145cc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <recv_tcp+0x5c>
    return ERR_VAL;
 8007b5e:	f06f 0305 	mvn.w	r3, #5
 8007b62:	e045      	b.n	8007bf0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d006      	beq.n	8007b7c <recv_tcp+0x74>
 8007b6e:	4b22      	ldr	r3, [pc, #136]	; (8007bf8 <recv_tcp+0xf0>)
 8007b70:	f240 1235 	movw	r2, #309	; 0x135
 8007b74:	4925      	ldr	r1, [pc, #148]	; (8007c0c <recv_tcp+0x104>)
 8007b76:	4822      	ldr	r0, [pc, #136]	; (8007c00 <recv_tcp+0xf8>)
 8007b78:	f00c fd28 	bl	80145cc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	3310      	adds	r3, #16
 8007b80:	4618      	mov	r0, r3
 8007b82:	f00c fba2 	bl	80142ca <sys_mbox_valid>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10d      	bne.n	8007ba8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d008      	beq.n	8007ba4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	891b      	ldrh	r3, [r3, #8]
 8007b96:	4619      	mov	r1, r3
 8007b98:	68b8      	ldr	r0, [r7, #8]
 8007b9a:	f004 f84f 	bl	800bc3c <tcp_recved>
      pbuf_free(p);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f003 f894 	bl	800accc <pbuf_free>
    }
    return ERR_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e023      	b.n	8007bf0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <recv_tcp+0xb2>
    msg = p;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	891b      	ldrh	r3, [r3, #8]
 8007bb6:	83fb      	strh	r3, [r7, #30]
 8007bb8:	e003      	b.n	8007bc2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8007bba:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <recv_tcp+0x108>)
 8007bbc:	61bb      	str	r3, [r7, #24]
    len = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	3310      	adds	r3, #16
 8007bc6:	69b9      	ldr	r1, [r7, #24]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f00c fb09 	bl	80141e0 <sys_mbox_trypost>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8007bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd8:	e00a      	b.n	8007bf0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <recv_tcp+0xe6>
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	8bfa      	ldrh	r2, [r7, #30]
 8007be8:	2100      	movs	r1, #0
 8007bea:	6978      	ldr	r0, [r7, #20]
 8007bec:	4798      	blx	r3
  }

  return ERR_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	08015a3c 	.word	0x08015a3c
 8007bfc:	08015b18 	.word	0x08015b18
 8007c00:	08015a80 	.word	0x08015a80
 8007c04:	08015b3c 	.word	0x08015b3c
 8007c08:	08015b5c 	.word	0x08015b5c
 8007c0c:	08015b74 	.word	0x08015b74
 8007c10:	08018bce 	.word	0x08018bce

08007c14 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d106      	bne.n	8007c36 <poll_tcp+0x22>
 8007c28:	4b29      	ldr	r3, [pc, #164]	; (8007cd0 <poll_tcp+0xbc>)
 8007c2a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007c2e:	4929      	ldr	r1, [pc, #164]	; (8007cd4 <poll_tcp+0xc0>)
 8007c30:	4829      	ldr	r0, [pc, #164]	; (8007cd8 <poll_tcp+0xc4>)
 8007c32:	f00c fccb 	bl	80145cc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d104      	bne.n	8007c48 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007c3e:	2101      	movs	r1, #1
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 ff61 	bl	8008b08 <lwip_netconn_do_writemore>
 8007c46:	e016      	b.n	8007c76 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d112      	bne.n	8007c76 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <poll_tcp+0x5a>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	7a5b      	ldrb	r3, [r3, #9]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	7a5a      	ldrb	r2, [r3, #9]
 8007c68:	3a01      	subs	r2, #1
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007c6e:	2101      	movs	r1, #1
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fbf7 	bl	8008464 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	7f1b      	ldrb	r3, [r3, #28]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d021      	beq.n	8007cc6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01d      	beq.n	8007cc6 <poll_tcp+0xb2>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007c92:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007c96:	d316      	bcc.n	8007cc6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d810      	bhi.n	8007cc6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	7f1b      	ldrb	r3, [r3, #28]
 8007ca8:	f023 0310 	bic.w	r3, r3, #16
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <poll_tcp+0xb2>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	08015a3c 	.word	0x08015a3c
 8007cd4:	08015b94 	.word	0x08015b94
 8007cd8:	08015a80 	.word	0x08015a80

08007cdc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d106      	bne.n	8007d02 <sent_tcp+0x26>
 8007cf4:	4b20      	ldr	r3, [pc, #128]	; (8007d78 <sent_tcp+0x9c>)
 8007cf6:	f240 1293 	movw	r2, #403	; 0x193
 8007cfa:	4920      	ldr	r1, [pc, #128]	; (8007d7c <sent_tcp+0xa0>)
 8007cfc:	4820      	ldr	r0, [pc, #128]	; (8007d80 <sent_tcp+0xa4>)
 8007cfe:	f00c fc65 	bl	80145cc <iprintf>

  if (conn) {
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d032      	beq.n	8007d6e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d104      	bne.n	8007d1a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007d10:	2101      	movs	r1, #1
 8007d12:	6978      	ldr	r0, [r7, #20]
 8007d14:	f000 fef8 	bl	8008b08 <lwip_netconn_do_writemore>
 8007d18:	e007      	b.n	8007d2a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	d103      	bne.n	8007d2a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007d22:	2101      	movs	r1, #1
 8007d24:	6978      	ldr	r0, [r7, #20]
 8007d26:	f000 fb9d 	bl	8008464 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01d      	beq.n	8007d6e <sent_tcp+0x92>
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007d3a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007d3e:	d316      	bcc.n	8007d6e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d810      	bhi.n	8007d6e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	7f1b      	ldrb	r3, [r3, #28]
 8007d50:	f023 0310 	bic.w	r3, r3, #16
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <sent_tcp+0x92>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	88fa      	ldrh	r2, [r7, #6]
 8007d68:	2102      	movs	r1, #2
 8007d6a:	6978      	ldr	r0, [r7, #20]
 8007d6c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	08015a3c 	.word	0x08015a3c
 8007d7c:	08015b94 	.word	0x08015b94
 8007d80:	08015a80 	.word	0x08015a80

08007d84 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b088      	sub	sp, #32
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <err_tcp+0x24>
 8007d9a:	4b5f      	ldr	r3, [pc, #380]	; (8007f18 <err_tcp+0x194>)
 8007d9c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8007da0:	495e      	ldr	r1, [pc, #376]	; (8007f1c <err_tcp+0x198>)
 8007da2:	485f      	ldr	r0, [pc, #380]	; (8007f20 <err_tcp+0x19c>)
 8007da4:	f00c fc12 	bl	80145cc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8007da8:	f00c fbaa 	bl	8014500 <sys_arch_protect>
 8007dac:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	2200      	movs	r2, #0
 8007db2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	78fa      	ldrb	r2, [r7, #3]
 8007db8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	7f1b      	ldrb	r3, [r3, #28]
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8007dd4:	69b8      	ldr	r0, [r7, #24]
 8007dd6:	f00c fba1 	bl	801451c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d005      	beq.n	8007dee <err_tcp+0x6a>
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2200      	movs	r2, #0
 8007de8:	2104      	movs	r1, #4
 8007dea:	69f8      	ldr	r0, [r7, #28]
 8007dec:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <err_tcp+0x7e>
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	69f8      	ldr	r0, [r7, #28]
 8007e00:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <err_tcp+0x92>
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2102      	movs	r1, #2
 8007e12:	69f8      	ldr	r0, [r7, #28]
 8007e14:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8007e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff fd86 	bl	800792c <lwip_netconn_err_to_msg>
 8007e20:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	3310      	adds	r3, #16
 8007e26:	4618      	mov	r0, r3
 8007e28:	f00c fa4f 	bl	80142ca <sys_mbox_valid>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	3310      	adds	r3, #16
 8007e36:	6939      	ldr	r1, [r7, #16]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f00c f9d1 	bl	80141e0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	3314      	adds	r3, #20
 8007e42:	4618      	mov	r0, r3
 8007e44:	f00c fa41 	bl	80142ca <sys_mbox_valid>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	3314      	adds	r3, #20
 8007e52:	6939      	ldr	r1, [r7, #16]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f00c f9c3 	bl	80141e0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d005      	beq.n	8007e6c <err_tcp+0xe8>
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d002      	beq.n	8007e6c <err_tcp+0xe8>
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	d143      	bne.n	8007ef4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	7f1b      	ldrb	r3, [r3, #28]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bf14      	ite	ne
 8007e78:	2301      	movne	r3, #1
 8007e7a:	2300      	moveq	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	7f1b      	ldrb	r3, [r3, #28]
 8007e84:	f023 0304 	bic.w	r3, r3, #4
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d13b      	bne.n	8007f0c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d106      	bne.n	8007eaa <err_tcp+0x126>
 8007e9c:	4b1e      	ldr	r3, [pc, #120]	; (8007f18 <err_tcp+0x194>)
 8007e9e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007ea2:	4920      	ldr	r1, [pc, #128]	; (8007f24 <err_tcp+0x1a0>)
 8007ea4:	481e      	ldr	r0, [pc, #120]	; (8007f20 <err_tcp+0x19c>)
 8007ea6:	f00c fb91 	bl	80145cc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d104      	bne.n	8007eba <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	711a      	strb	r2, [r3, #4]
 8007eb8:	e003      	b.n	8007ec2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	330c      	adds	r3, #12
 8007eca:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007ecc:	68b8      	ldr	r0, [r7, #8]
 8007ece:	f00c fa8d 	bl	80143ec <sys_sem_valid>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d106      	bne.n	8007ee6 <err_tcp+0x162>
 8007ed8:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <err_tcp+0x194>)
 8007eda:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007ede:	4912      	ldr	r1, [pc, #72]	; (8007f28 <err_tcp+0x1a4>)
 8007ee0:	480f      	ldr	r0, [pc, #60]	; (8007f20 <err_tcp+0x19c>)
 8007ee2:	f00c fb73 	bl	80145cc <iprintf>
      conn->current_msg = NULL;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8007eec:	68b8      	ldr	r0, [r7, #8]
 8007eee:	f00c fa63 	bl	80143b8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8007ef2:	e00b      	b.n	8007f0c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d008      	beq.n	8007f0e <err_tcp+0x18a>
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <err_tcp+0x194>)
 8007efe:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007f02:	490a      	ldr	r1, [pc, #40]	; (8007f2c <err_tcp+0x1a8>)
 8007f04:	4806      	ldr	r0, [pc, #24]	; (8007f20 <err_tcp+0x19c>)
 8007f06:	f00c fb61 	bl	80145cc <iprintf>
  }
}
 8007f0a:	e000      	b.n	8007f0e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8007f0c:	bf00      	nop
}
 8007f0e:	bf00      	nop
 8007f10:	3720      	adds	r7, #32
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	08015a3c 	.word	0x08015a3c
 8007f1c:	08015b94 	.word	0x08015b94
 8007f20:	08015a80 	.word	0x08015a80
 8007f24:	08015ba4 	.word	0x08015ba4
 8007f28:	08015bc0 	.word	0x08015bc0
 8007f2c:	08015bdc 	.word	0x08015bdc

08007f30 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f004 fd41 	bl	800c9c8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8007f46:	490a      	ldr	r1, [pc, #40]	; (8007f70 <setup_tcp+0x40>)
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f004 fd4f 	bl	800c9ec <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007f4e:	4909      	ldr	r1, [pc, #36]	; (8007f74 <setup_tcp+0x44>)
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f004 fd6d 	bl	800ca30 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007f56:	2202      	movs	r2, #2
 8007f58:	4907      	ldr	r1, [pc, #28]	; (8007f78 <setup_tcp+0x48>)
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f004 fdc4 	bl	800cae8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8007f60:	4906      	ldr	r1, [pc, #24]	; (8007f7c <setup_tcp+0x4c>)
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f004 fd86 	bl	800ca74 <tcp_err>
}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	08007b09 	.word	0x08007b09
 8007f74:	08007cdd 	.word	0x08007cdd
 8007f78:	08007c15 	.word	0x08007c15
 8007f7c:	08007d85 	.word	0x08007d85

08007f80 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	b089      	sub	sp, #36	; 0x24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d102      	bne.n	8007f9e <accept_function+0x1e>
    return ERR_VAL;
 8007f98:	f06f 0305 	mvn.w	r3, #5
 8007f9c:	e0a1      	b.n	80080e2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	3314      	adds	r3, #20
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f00c f991 	bl	80142ca <sys_mbox_valid>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8007fae:	f06f 0305 	mvn.w	r3, #5
 8007fb2:	e096      	b.n	80080e2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d11b      	bne.n	8007ff2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f103 0414 	add.w	r4, r3, #20
 8007fc0:	f06f 000c 	mvn.w	r0, #12
 8007fc4:	f7ff fcb2 	bl	800792c <lwip_netconn_err_to_msg>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f00c f907 	bl	80141e0 <sys_mbox_trypost>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <accept_function+0x6c>
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	69f8      	ldr	r0, [r7, #28]
 8007fea:	4798      	blx	r3
    }
    return ERR_VAL;
 8007fec:	f06f 0305 	mvn.w	r3, #5
 8007ff0:	e077      	b.n	80080e2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d006      	beq.n	8008008 <accept_function+0x88>
 8007ffa:	4b3c      	ldr	r3, [pc, #240]	; (80080ec <accept_function+0x16c>)
 8007ffc:	f240 222a 	movw	r2, #554	; 0x22a
 8008000:	493b      	ldr	r1, [pc, #236]	; (80080f0 <accept_function+0x170>)
 8008002:	483c      	ldr	r0, [pc, #240]	; (80080f4 <accept_function+0x174>)
 8008004:	f00c fae2 	bl	80145cc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	781a      	ldrb	r2, [r3, #0]
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f000 f8f0 	bl	80081f8 <netconn_alloc>
 8008018:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11b      	bne.n	8008058 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	f103 0414 	add.w	r4, r3, #20
 8008026:	f06f 000c 	mvn.w	r0, #12
 800802a:	f7ff fc7f 	bl	800792c <lwip_netconn_err_to_msg>
 800802e:	4603      	mov	r3, r0
 8008030:	4619      	mov	r1, r3
 8008032:	4620      	mov	r0, r4
 8008034:	f00c f8d4 	bl	80141e0 <sys_mbox_trypost>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d109      	bne.n	8008052 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <accept_function+0xd2>
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	2200      	movs	r2, #0
 800804c:	2100      	movs	r1, #0
 800804e:	69f8      	ldr	r0, [r7, #28]
 8008050:	4798      	blx	r3
    }
    return ERR_MEM;
 8008052:	f04f 33ff 	mov.w	r3, #4294967295
 8008056:	e044      	b.n	80080e2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800805e:	69b8      	ldr	r0, [r7, #24]
 8008060:	f7ff ff66 	bl	8007f30 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	3314      	adds	r3, #20
 8008068:	69b9      	ldr	r1, [r7, #24]
 800806a:	4618      	mov	r0, r3
 800806c:	f00c f8b8 	bl	80141e0 <sys_mbox_trypost>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d02a      	beq.n	80080cc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800807c:	2100      	movs	r1, #0
 800807e:	6978      	ldr	r0, [r7, #20]
 8008080:	f004 fca2 	bl	800c9c8 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008084:	2100      	movs	r1, #0
 8008086:	6978      	ldr	r0, [r7, #20]
 8008088:	f004 fcb0 	bl	800c9ec <tcp_recv>
    tcp_sent(pcb, NULL);
 800808c:	2100      	movs	r1, #0
 800808e:	6978      	ldr	r0, [r7, #20]
 8008090:	f004 fcce 	bl	800ca30 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008094:	2200      	movs	r2, #0
 8008096:	2100      	movs	r1, #0
 8008098:	6978      	ldr	r0, [r7, #20]
 800809a:	f004 fd25 	bl	800cae8 <tcp_poll>
    tcp_err(pcb, NULL);
 800809e:	2100      	movs	r1, #0
 80080a0:	6978      	ldr	r0, [r7, #20]
 80080a2:	f004 fce7 	bl	800ca74 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2200      	movs	r2, #0
 80080aa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	3310      	adds	r3, #16
 80080b0:	4618      	mov	r0, r3
 80080b2:	f00c f883 	bl	80141bc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	3310      	adds	r3, #16
 80080ba:	4618      	mov	r0, r3
 80080bc:	f00c f916 	bl	80142ec <sys_mbox_set_invalid>
    netconn_free(newconn);
 80080c0:	69b8      	ldr	r0, [r7, #24]
 80080c2:	f000 f907 	bl	80082d4 <netconn_free>
    return ERR_MEM;
 80080c6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ca:	e00a      	b.n	80080e2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <accept_function+0x160>
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	2200      	movs	r2, #0
 80080da:	2100      	movs	r1, #0
 80080dc:	69f8      	ldr	r0, [r7, #28]
 80080de:	4798      	blx	r3
  }

  return ERR_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3724      	adds	r7, #36	; 0x24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd90      	pop	{r4, r7, pc}
 80080ea:	bf00      	nop
 80080ec:	08015a3c 	.word	0x08015a3c
 80080f0:	08015bf8 	.word	0x08015bf8
 80080f4:	08015a80 	.word	0x08015a80

080080f8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d006      	beq.n	800811c <pcb_new+0x24>
 800810e:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <pcb_new+0xc4>)
 8008110:	f240 2265 	movw	r2, #613	; 0x265
 8008114:	492a      	ldr	r1, [pc, #168]	; (80081c0 <pcb_new+0xc8>)
 8008116:	482b      	ldr	r0, [pc, #172]	; (80081c4 <pcb_new+0xcc>)
 8008118:	f00c fa58 	bl	80145cc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008126:	2b10      	cmp	r3, #16
 8008128:	d022      	beq.n	8008170 <pcb_new+0x78>
 800812a:	2b20      	cmp	r3, #32
 800812c:	d133      	bne.n	8008196 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681c      	ldr	r4, [r3, #0]
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	4618      	mov	r0, r3
 8008136:	f009 fd22 	bl	8011b7e <udp_new_ip_type>
 800813a:	4603      	mov	r3, r0
 800813c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d02a      	beq.n	800819e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b22      	cmp	r3, #34	; 0x22
 8008150:	d104      	bne.n	800815c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6858      	ldr	r0, [r3, #4]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	4917      	ldr	r1, [pc, #92]	; (80081c8 <pcb_new+0xd0>)
 800816a:	f009 fc8f 	bl	8011a8c <udp_recv>
      }
      break;
 800816e:	e016      	b.n	800819e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681c      	ldr	r4, [r3, #0]
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4618      	mov	r0, r3
 8008178:	f004 fc18 	bl	800c9ac <tcp_new_ip_type>
 800817c:	4603      	mov	r3, r0
 800817e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fece 	bl	8007f30 <setup_tcp>
      }
      break;
 8008194:	e005      	b.n	80081a2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	22fa      	movs	r2, #250	; 0xfa
 800819a:	711a      	strb	r2, [r3, #4]
      return;
 800819c:	e00a      	b.n	80081b4 <pcb_new+0xbc>
      break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <pcb_new+0xac>
      break;
 80081a2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	22ff      	movs	r2, #255	; 0xff
 80081b2:	711a      	strb	r2, [r3, #4]
  }
}
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd90      	pop	{r4, r7, pc}
 80081ba:	bf00      	nop
 80081bc:	08015a3c 	.word	0x08015a3c
 80081c0:	08015c20 	.word	0x08015c20
 80081c4:	08015a80 	.word	0x08015a80
 80081c8:	08007a0d 	.word	0x08007a0d

080081cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d102      	bne.n	80081ee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff ff85 	bl	80080f8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008208:	2007      	movs	r0, #7
 800820a:	f001 fe69 	bl	8009ee0 <memp_malloc>
 800820e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <netconn_alloc+0x22>
    return NULL;
 8008216:	2300      	movs	r3, #0
 8008218:	e052      	b.n	80082c0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	79fa      	ldrb	r2, [r7, #7]
 8008224:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008232:	2b10      	cmp	r3, #16
 8008234:	d004      	beq.n	8008240 <netconn_alloc+0x48>
 8008236:	2b20      	cmp	r3, #32
 8008238:	d105      	bne.n	8008246 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800823a:	2306      	movs	r3, #6
 800823c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800823e:	e00a      	b.n	8008256 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008240:	2306      	movs	r3, #6
 8008242:	617b      	str	r3, [r7, #20]
      break;
 8008244:	e007      	b.n	8008256 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008246:	4b20      	ldr	r3, [pc, #128]	; (80082c8 <netconn_alloc+0xd0>)
 8008248:	f240 22e5 	movw	r2, #741	; 0x2e5
 800824c:	491f      	ldr	r1, [pc, #124]	; (80082cc <netconn_alloc+0xd4>)
 800824e:	4820      	ldr	r0, [pc, #128]	; (80082d0 <netconn_alloc+0xd8>)
 8008250:	f00c f9bc 	bl	80145cc <iprintf>
      goto free_and_return;
 8008254:	e02f      	b.n	80082b6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3310      	adds	r3, #16
 800825a:	6979      	ldr	r1, [r7, #20]
 800825c:	4618      	mov	r0, r3
 800825e:	f00b ff8b 	bl	8014178 <sys_mbox_new>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d125      	bne.n	80082b4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	330c      	adds	r3, #12
 800826c:	2100      	movs	r1, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f00c f849 	bl	8014306 <sys_sem_new>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d005      	beq.n	8008286 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3310      	adds	r3, #16
 800827e:	4618      	mov	r0, r3
 8008280:	f00b ff9c 	bl	80141bc <sys_mbox_free>
    goto free_and_return;
 8008284:	e017      	b.n	80082b6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3314      	adds	r3, #20
 800828a:	4618      	mov	r0, r3
 800828c:	f00c f82e 	bl	80142ec <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f04f 32ff 	mov.w	r2, #4294967295
 800829c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	7cfa      	ldrb	r2, [r7, #19]
 80082ae:	771a      	strb	r2, [r3, #28]
  return conn;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	e005      	b.n	80082c0 <netconn_alloc+0xc8>
    goto free_and_return;
 80082b4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80082b6:	68f9      	ldr	r1, [r7, #12]
 80082b8:	2007      	movs	r0, #7
 80082ba:	f001 fe63 	bl	8009f84 <memp_free>
  return NULL;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	08015a3c 	.word	0x08015a3c
 80082cc:	08015c40 	.word	0x08015c40
 80082d0:	08015a80 	.word	0x08015a80

080082d4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d006      	beq.n	80082f2 <netconn_free+0x1e>
 80082e4:	4b1b      	ldr	r3, [pc, #108]	; (8008354 <netconn_free+0x80>)
 80082e6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80082ea:	491b      	ldr	r1, [pc, #108]	; (8008358 <netconn_free+0x84>)
 80082ec:	481b      	ldr	r0, [pc, #108]	; (800835c <netconn_free+0x88>)
 80082ee:	f00c f96d 	bl	80145cc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3310      	adds	r3, #16
 80082f6:	4618      	mov	r0, r3
 80082f8:	f00b ffe7 	bl	80142ca <sys_mbox_valid>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d006      	beq.n	8008310 <netconn_free+0x3c>
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <netconn_free+0x80>)
 8008304:	f240 3223 	movw	r2, #803	; 0x323
 8008308:	4915      	ldr	r1, [pc, #84]	; (8008360 <netconn_free+0x8c>)
 800830a:	4814      	ldr	r0, [pc, #80]	; (800835c <netconn_free+0x88>)
 800830c:	f00c f95e 	bl	80145cc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3314      	adds	r3, #20
 8008314:	4618      	mov	r0, r3
 8008316:	f00b ffd8 	bl	80142ca <sys_mbox_valid>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d006      	beq.n	800832e <netconn_free+0x5a>
 8008320:	4b0c      	ldr	r3, [pc, #48]	; (8008354 <netconn_free+0x80>)
 8008322:	f240 3226 	movw	r2, #806	; 0x326
 8008326:	490f      	ldr	r1, [pc, #60]	; (8008364 <netconn_free+0x90>)
 8008328:	480c      	ldr	r0, [pc, #48]	; (800835c <netconn_free+0x88>)
 800832a:	f00c f94f 	bl	80145cc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	330c      	adds	r3, #12
 8008332:	4618      	mov	r0, r3
 8008334:	f00c f84d 	bl	80143d2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	330c      	adds	r3, #12
 800833c:	4618      	mov	r0, r3
 800833e:	f00c f866 	bl	801440e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	2007      	movs	r0, #7
 8008346:	f001 fe1d 	bl	8009f84 <memp_free>
}
 800834a:	bf00      	nop
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	08015a3c 	.word	0x08015a3c
 8008358:	08015c68 	.word	0x08015c68
 800835c:	08015a80 	.word	0x08015a80
 8008360:	08015c98 	.word	0x08015c98
 8008364:	08015cd4 	.word	0x08015cd4

08008368 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3310      	adds	r3, #16
 8008374:	4618      	mov	r0, r3
 8008376:	f00b ffa8 	bl	80142ca <sys_mbox_valid>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d02f      	beq.n	80083e0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008380:	e018      	b.n	80083b4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800838a:	2b10      	cmp	r3, #16
 800838c:	d10e      	bne.n	80083ac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f107 020f 	add.w	r2, r7, #15
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f7ff fafe 	bl	8007998 <lwip_netconn_is_err_msg>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d108      	bne.n	80083b4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f002 fc91 	bl	800accc <pbuf_free>
 80083aa:	e003      	b.n	80083b4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fe8e 	bl	80090d0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3310      	adds	r3, #16
 80083b8:	f107 0210 	add.w	r2, r7, #16
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f00b ff67 	bl	8014292 <sys_arch_mbox_tryfetch>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d1da      	bne.n	8008382 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3310      	adds	r3, #16
 80083d0:	4618      	mov	r0, r3
 80083d2:	f00b fef3 	bl	80141bc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	3310      	adds	r3, #16
 80083da:	4618      	mov	r0, r3
 80083dc:	f00b ff86 	bl	80142ec <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3314      	adds	r3, #20
 80083e4:	4618      	mov	r0, r3
 80083e6:	f00b ff70 	bl	80142ca <sys_mbox_valid>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d034      	beq.n	800845a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80083f0:	e01d      	b.n	800842e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f107 020e 	add.w	r2, r7, #14
 80083f8:	4611      	mov	r1, r2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff facc 	bl	8007998 <lwip_netconn_is_err_msg>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d113      	bne.n	800842e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800840a:	6978      	ldr	r0, [r7, #20]
 800840c:	f7ff ffac 	bl	8008368 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	4618      	mov	r0, r3
 800841e:	f003 fa45 	bl	800b8ac <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008428:	6978      	ldr	r0, [r7, #20]
 800842a:	f7ff ff53 	bl	80082d4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3314      	adds	r3, #20
 8008432:	f107 0210 	add.w	r2, r7, #16
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f00b ff2a 	bl	8014292 <sys_arch_mbox_tryfetch>
 800843e:	4603      	mov	r3, r0
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008444:	d1d5      	bne.n	80083f2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3314      	adds	r3, #20
 800844a:	4618      	mov	r0, r3
 800844c:	f00b feb6 	bl	80141bc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3314      	adds	r3, #20
 8008454:	4618      	mov	r0, r3
 8008456:	f00b ff49 	bl	80142ec <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800845a:	bf00      	nop
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <lwip_netconn_do_close_internal+0x24>
 800847a:	4ba1      	ldr	r3, [pc, #644]	; (8008700 <lwip_netconn_do_close_internal+0x29c>)
 800847c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008480:	49a0      	ldr	r1, [pc, #640]	; (8008704 <lwip_netconn_do_close_internal+0x2a0>)
 8008482:	48a1      	ldr	r0, [pc, #644]	; (8008708 <lwip_netconn_do_close_internal+0x2a4>)
 8008484:	f00c f8a2 	bl	80145cc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008490:	2b10      	cmp	r3, #16
 8008492:	d006      	beq.n	80084a2 <lwip_netconn_do_close_internal+0x3e>
 8008494:	4b9a      	ldr	r3, [pc, #616]	; (8008700 <lwip_netconn_do_close_internal+0x29c>)
 8008496:	f240 32a3 	movw	r2, #931	; 0x3a3
 800849a:	499c      	ldr	r1, [pc, #624]	; (800870c <lwip_netconn_do_close_internal+0x2a8>)
 800849c:	489a      	ldr	r0, [pc, #616]	; (8008708 <lwip_netconn_do_close_internal+0x2a4>)
 800849e:	f00c f895 	bl	80145cc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	785b      	ldrb	r3, [r3, #1]
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d006      	beq.n	80084b8 <lwip_netconn_do_close_internal+0x54>
 80084aa:	4b95      	ldr	r3, [pc, #596]	; (8008700 <lwip_netconn_do_close_internal+0x29c>)
 80084ac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80084b0:	4997      	ldr	r1, [pc, #604]	; (8008710 <lwip_netconn_do_close_internal+0x2ac>)
 80084b2:	4895      	ldr	r0, [pc, #596]	; (8008708 <lwip_netconn_do_close_internal+0x2a4>)
 80084b4:	f00c f88a 	bl	80145cc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <lwip_netconn_do_close_internal+0x6a>
 80084c0:	4b8f      	ldr	r3, [pc, #572]	; (8008700 <lwip_netconn_do_close_internal+0x29c>)
 80084c2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80084c6:	4993      	ldr	r1, [pc, #588]	; (8008714 <lwip_netconn_do_close_internal+0x2b0>)
 80084c8:	488f      	ldr	r0, [pc, #572]	; (8008708 <lwip_netconn_do_close_internal+0x2a4>)
 80084ca:	f00c f87f 	bl	80145cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <lwip_netconn_do_close_internal+0x80>
 80084d6:	4b8a      	ldr	r3, [pc, #552]	; (8008700 <lwip_netconn_do_close_internal+0x29c>)
 80084d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80084dc:	498e      	ldr	r1, [pc, #568]	; (8008718 <lwip_netconn_do_close_internal+0x2b4>)
 80084de:	488a      	ldr	r0, [pc, #552]	; (8008708 <lwip_netconn_do_close_internal+0x2a4>)
 80084e0:	f00c f874 	bl	80145cc <iprintf>

  tpcb = conn->pcb.tcp;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	7a1b      	ldrb	r3, [r3, #8]
 80084f0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	2b03      	cmp	r3, #3
 8008506:	d102      	bne.n	800850e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008508:	2301      	movs	r3, #1
 800850a:	75bb      	strb	r3, [r7, #22]
 800850c:	e01f      	b.n	800854e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008518:	2b05      	cmp	r3, #5
 800851a:	d007      	beq.n	800852c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008520:	2b06      	cmp	r3, #6
 8008522:	d003      	beq.n	800852c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008528:	2b08      	cmp	r3, #8
 800852a:	d102      	bne.n	8008532 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800852c:	2301      	movs	r3, #1
 800852e:	75bb      	strb	r3, [r7, #22]
 8008530:	e00d      	b.n	800854e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008532:	7b7b      	ldrb	r3, [r7, #13]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d008      	beq.n	800854a <lwip_netconn_do_close_internal+0xe6>
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	8b5b      	ldrh	r3, [r3, #26]
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b00      	cmp	r3, #0
 8008542:	d002      	beq.n	800854a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008544:	2301      	movs	r3, #1
 8008546:	75bb      	strb	r3, [r7, #22]
 8008548:	e001      	b.n	800854e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800854e:	7dbb      	ldrb	r3, [r7, #22]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008554:	2100      	movs	r1, #0
 8008556:	6938      	ldr	r0, [r7, #16]
 8008558:	f004 fa36 	bl	800c9c8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	7d1b      	ldrb	r3, [r3, #20]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d104      	bne.n	800856e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008564:	2100      	movs	r1, #0
 8008566:	6938      	ldr	r0, [r7, #16]
 8008568:	f004 faa6 	bl	800cab8 <tcp_accept>
 800856c:	e01d      	b.n	80085aa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008574:	2100      	movs	r1, #0
 8008576:	6938      	ldr	r0, [r7, #16]
 8008578:	f004 fa38 	bl	800c9ec <tcp_recv>
      tcp_accept(tpcb, NULL);
 800857c:	2100      	movs	r1, #0
 800857e:	6938      	ldr	r0, [r7, #16]
 8008580:	f004 fa9a 	bl	800cab8 <tcp_accept>
    }
    if (shut_tx) {
 8008584:	7b7b      	ldrb	r3, [r7, #13]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800858a:	2100      	movs	r1, #0
 800858c:	6938      	ldr	r0, [r7, #16]
 800858e:	f004 fa4f 	bl	800ca30 <tcp_sent>
    }
    if (shut_close) {
 8008592:	7dbb      	ldrb	r3, [r7, #22]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008598:	2200      	movs	r2, #0
 800859a:	2100      	movs	r1, #0
 800859c:	6938      	ldr	r0, [r7, #16]
 800859e:	f004 faa3 	bl	800cae8 <tcp_poll>
      tcp_err(tpcb, NULL);
 80085a2:	2100      	movs	r1, #0
 80085a4:	6938      	ldr	r0, [r7, #16]
 80085a6:	f004 fa65 	bl	800ca74 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80085aa:	7dbb      	ldrb	r3, [r7, #22]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d005      	beq.n	80085bc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80085b0:	6938      	ldr	r0, [r7, #16]
 80085b2:	f003 f835 	bl	800b620 <tcp_close>
 80085b6:	4603      	mov	r3, r0
 80085b8:	75fb      	strb	r3, [r7, #23]
 80085ba:	e007      	b.n	80085cc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	7b7a      	ldrb	r2, [r7, #13]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6938      	ldr	r0, [r7, #16]
 80085c4:	f003 f858 	bl	800b678 <tcp_shutdown>
 80085c8:	4603      	mov	r3, r0
 80085ca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80085cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80085d4:	2301      	movs	r3, #1
 80085d6:	757b      	strb	r3, [r7, #21]
 80085d8:	e016      	b.n	8008608 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80085da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e2:	d10f      	bne.n	8008604 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	7a5b      	ldrb	r3, [r3, #9]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10c      	bne.n	8008608 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80085ee:	2301      	movs	r3, #1
 80085f0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80085f2:	7dbb      	ldrb	r3, [r7, #22]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80085f8:	6938      	ldr	r0, [r7, #16]
 80085fa:	f003 f957 	bl	800b8ac <tcp_abort>
          err = ERR_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]
 8008602:	e001      	b.n	8008608 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008604:	2301      	movs	r3, #1
 8008606:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008608:	7d7b      	ldrb	r3, [r7, #21]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d044      	beq.n	8008698 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	330c      	adds	r3, #12
 8008616:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	7dfa      	ldrb	r2, [r7, #23]
 800861e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800862c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d129      	bne.n	8008688 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008634:	7dbb      	ldrb	r3, [r7, #22]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00c      	beq.n	8008654 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <lwip_netconn_do_close_internal+0x1f0>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2200      	movs	r2, #0
 800864e:	2104      	movs	r1, #4
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
      }
      if (shut_rx) {
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <lwip_netconn_do_close_internal+0x20a>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	2200      	movs	r2, #0
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
      }
      if (shut_tx) {
 800866e:	7b7b      	ldrb	r3, [r7, #13]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d009      	beq.n	8008688 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <lwip_netconn_do_close_internal+0x224>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2200      	movs	r2, #0
 8008682:	2102      	movs	r1, #2
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800868e:	68b8      	ldr	r0, [r7, #8]
 8008690:	f00b fe92 	bl	80143b8 <sys_sem_signal>
    }
    return ERR_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	e02e      	b.n	80086f6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8008698:	7d7b      	ldrb	r3, [r7, #21]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d11e      	bne.n	80086dc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	7d1b      	ldrb	r3, [r3, #20]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d106      	bne.n	80086b4 <lwip_netconn_do_close_internal+0x250>
 80086a6:	4b16      	ldr	r3, [pc, #88]	; (8008700 <lwip_netconn_do_close_internal+0x29c>)
 80086a8:	f240 4241 	movw	r2, #1089	; 0x441
 80086ac:	491b      	ldr	r1, [pc, #108]	; (800871c <lwip_netconn_do_close_internal+0x2b8>)
 80086ae:	4816      	ldr	r0, [pc, #88]	; (8008708 <lwip_netconn_do_close_internal+0x2a4>)
 80086b0:	f00b ff8c 	bl	80145cc <iprintf>
    if (shut_tx) {
 80086b4:	7b7b      	ldrb	r3, [r7, #13]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80086ba:	4919      	ldr	r1, [pc, #100]	; (8008720 <lwip_netconn_do_close_internal+0x2bc>)
 80086bc:	6938      	ldr	r0, [r7, #16]
 80086be:	f004 f9b7 	bl	800ca30 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80086c2:	2201      	movs	r2, #1
 80086c4:	4917      	ldr	r1, [pc, #92]	; (8008724 <lwip_netconn_do_close_internal+0x2c0>)
 80086c6:	6938      	ldr	r0, [r7, #16]
 80086c8:	f004 fa0e 	bl	800cae8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80086cc:	4916      	ldr	r1, [pc, #88]	; (8008728 <lwip_netconn_do_close_internal+0x2c4>)
 80086ce:	6938      	ldr	r0, [r7, #16]
 80086d0:	f004 f9d0 	bl	800ca74 <tcp_err>
    tcp_arg(tpcb, conn);
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	6938      	ldr	r0, [r7, #16]
 80086d8:	f004 f976 	bl	800c9c8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80086dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <lwip_netconn_do_close_internal+0x28e>
 80086e4:	4b06      	ldr	r3, [pc, #24]	; (8008700 <lwip_netconn_do_close_internal+0x29c>)
 80086e6:	f240 424d 	movw	r2, #1101	; 0x44d
 80086ea:	4910      	ldr	r1, [pc, #64]	; (800872c <lwip_netconn_do_close_internal+0x2c8>)
 80086ec:	4806      	ldr	r0, [pc, #24]	; (8008708 <lwip_netconn_do_close_internal+0x2a4>)
 80086ee:	f00b ff6d 	bl	80145cc <iprintf>
  return err;
 80086f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	08015a3c 	.word	0x08015a3c
 8008704:	08015d10 	.word	0x08015d10
 8008708:	08015a80 	.word	0x08015a80
 800870c:	08015d20 	.word	0x08015d20
 8008710:	08015d40 	.word	0x08015d40
 8008714:	08015d64 	.word	0x08015d64
 8008718:	08015ba4 	.word	0x08015ba4
 800871c:	08015d78 	.word	0x08015d78
 8008720:	08007cdd 	.word	0x08007cdd
 8008724:	08007c15 	.word	0x08007c15
 8008728:	08007d85 	.word	0x08007d85
 800872c:	08015d9c 	.word	0x08015d9c

08008730 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00d      	beq.n	8008766 <lwip_netconn_do_delconn+0x36>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008754:	2b10      	cmp	r3, #16
 8008756:	d006      	beq.n	8008766 <lwip_netconn_do_delconn+0x36>
 8008758:	4b60      	ldr	r3, [pc, #384]	; (80088dc <lwip_netconn_do_delconn+0x1ac>)
 800875a:	f240 425e 	movw	r2, #1118	; 0x45e
 800875e:	4960      	ldr	r1, [pc, #384]	; (80088e0 <lwip_netconn_do_delconn+0x1b0>)
 8008760:	4860      	ldr	r0, [pc, #384]	; (80088e4 <lwip_netconn_do_delconn+0x1b4>)
 8008762:	f00b ff33 	bl	80145cc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <lwip_netconn_do_delconn+0x48>
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d002      	beq.n	8008778 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	2b03      	cmp	r3, #3
 8008776:	d109      	bne.n	800878c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	2b03      	cmp	r3, #3
 800877c:	d10a      	bne.n	8008794 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	7f1b      	ldrb	r3, [r3, #28]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	22fb      	movs	r2, #251	; 0xfb
 8008790:	711a      	strb	r2, [r3, #4]
 8008792:	e097      	b.n	80088c4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008794:	7afb      	ldrb	r3, [r7, #11]
 8008796:	2b03      	cmp	r3, #3
 8008798:	d10d      	bne.n	80087b6 <lwip_netconn_do_delconn+0x86>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	7f1b      	ldrb	r3, [r3, #28]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d106      	bne.n	80087b6 <lwip_netconn_do_delconn+0x86>
 80087a8:	4b4c      	ldr	r3, [pc, #304]	; (80088dc <lwip_netconn_do_delconn+0x1ac>)
 80087aa:	f240 427a 	movw	r2, #1146	; 0x47a
 80087ae:	494e      	ldr	r1, [pc, #312]	; (80088e8 <lwip_netconn_do_delconn+0x1b8>)
 80087b0:	484c      	ldr	r0, [pc, #304]	; (80088e4 <lwip_netconn_do_delconn+0x1b4>)
 80087b2:	f00b ff0b 	bl	80145cc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff fdd1 	bl	8008368 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d05f      	beq.n	8008890 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d00d      	beq.n	80087fa <lwip_netconn_do_delconn+0xca>
 80087de:	2b20      	cmp	r3, #32
 80087e0:	d151      	bne.n	8008886 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f009 f96a 	bl	8011acc <udp_remove>
          break;
 80087f8:	e046      	b.n	8008888 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d006      	beq.n	8008812 <lwip_netconn_do_delconn+0xe2>
 8008804:	4b35      	ldr	r3, [pc, #212]	; (80088dc <lwip_netconn_do_delconn+0x1ac>)
 8008806:	f240 4294 	movw	r2, #1172	; 0x494
 800880a:	4938      	ldr	r1, [pc, #224]	; (80088ec <lwip_netconn_do_delconn+0x1bc>)
 800880c:	4835      	ldr	r0, [pc, #212]	; (80088e4 <lwip_netconn_do_delconn+0x1b4>)
 800880e:	f00b fedd 	bl	80145cc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2204      	movs	r2, #4
 8008818:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2203      	movs	r2, #3
 800881e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fe18 	bl	8008464 <lwip_netconn_do_close_internal>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d04b      	beq.n	80088d2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	785b      	ldrb	r3, [r3, #1]
 8008840:	2b04      	cmp	r3, #4
 8008842:	d006      	beq.n	8008852 <lwip_netconn_do_delconn+0x122>
 8008844:	4b25      	ldr	r3, [pc, #148]	; (80088dc <lwip_netconn_do_delconn+0x1ac>)
 8008846:	f240 429a 	movw	r2, #1178	; 0x49a
 800884a:	4929      	ldr	r1, [pc, #164]	; (80088f0 <lwip_netconn_do_delconn+0x1c0>)
 800884c:	4825      	ldr	r0, [pc, #148]	; (80088e4 <lwip_netconn_do_delconn+0x1b4>)
 800884e:	f00b febd 	bl	80145cc <iprintf>
            UNLOCK_TCPIP_CORE();
 8008852:	4828      	ldr	r0, [pc, #160]	; (80088f4 <lwip_netconn_do_delconn+0x1c4>)
 8008854:	f00b fe21 	bl	801449a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	330c      	adds	r3, #12
 800885e:	2100      	movs	r1, #0
 8008860:	4618      	mov	r0, r3
 8008862:	f00b fd78 	bl	8014356 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008866:	4823      	ldr	r0, [pc, #140]	; (80088f4 <lwip_netconn_do_delconn+0x1c4>)
 8008868:	f00b fe08 	bl	801447c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d02d      	beq.n	80088d2 <lwip_netconn_do_delconn+0x1a2>
 8008876:	4b19      	ldr	r3, [pc, #100]	; (80088dc <lwip_netconn_do_delconn+0x1ac>)
 8008878:	f240 429e 	movw	r2, #1182	; 0x49e
 800887c:	491c      	ldr	r1, [pc, #112]	; (80088f0 <lwip_netconn_do_delconn+0x1c0>)
 800887e:	4819      	ldr	r0, [pc, #100]	; (80088e4 <lwip_netconn_do_delconn+0x1b4>)
 8008880:	f00b fea4 	bl	80145cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8008884:	e025      	b.n	80088d2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8008886:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2200      	movs	r2, #0
 800888e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <lwip_netconn_do_delconn+0x17a>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	6810      	ldr	r0, [r2, #0]
 80088a4:	2200      	movs	r2, #0
 80088a6:	2100      	movs	r1, #0
 80088a8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d007      	beq.n	80088c4 <lwip_netconn_do_delconn+0x194>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	6810      	ldr	r0, [r2, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	2102      	movs	r1, #2
 80088c2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	330c      	adds	r3, #12
 80088ca:	4618      	mov	r0, r3
 80088cc:	f00b fd8e 	bl	80143ec <sys_sem_valid>
 80088d0:	e000      	b.n	80088d4 <lwip_netconn_do_delconn+0x1a4>
          return;
 80088d2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	08015a3c 	.word	0x08015a3c
 80088e0:	08015dac 	.word	0x08015dac
 80088e4:	08015a80 	.word	0x08015a80
 80088e8:	08015dc0 	.word	0x08015dc0
 80088ec:	08015de0 	.word	0x08015de0
 80088f0:	08015dfc 	.word	0x08015dfc
 80088f4:	200073b0 	.word	0x200073b0

080088f8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d025      	beq.n	800895a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008918:	2b10      	cmp	r3, #16
 800891a:	d00e      	beq.n	800893a <lwip_netconn_do_bind+0x42>
 800891c:	2b20      	cmp	r3, #32
 800891e:	d119      	bne.n	8008954 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6858      	ldr	r0, [r3, #4]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	6899      	ldr	r1, [r3, #8]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	899b      	ldrh	r3, [r3, #12]
 800892e:	461a      	mov	r2, r3
 8008930:	f009 f824 	bl	801197c <udp_bind>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]
        break;
 8008938:	e011      	b.n	800895e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6858      	ldr	r0, [r3, #4]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	6899      	ldr	r1, [r3, #8]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	899b      	ldrh	r3, [r3, #12]
 8008948:	461a      	mov	r2, r3
 800894a:	f002 ffbb 	bl	800b8c4 <tcp_bind>
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]
        break;
 8008952:	e004      	b.n	800895e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8008954:	23fa      	movs	r3, #250	; 0xfa
 8008956:	73fb      	strb	r3, [r7, #15]
        break;
 8008958:	e001      	b.n	800895e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800895a:	23fa      	movs	r3, #250	; 0xfa
 800895c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	7bfa      	ldrb	r2, [r7, #15]
 8008962:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008964:	bf00      	nop
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d07f      	beq.n	8008a82 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800898c:	2b10      	cmp	r3, #16
 800898e:	d175      	bne.n	8008a7c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	785b      	ldrb	r3, [r3, #1]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d165      	bne.n	8008a66 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	7d1b      	ldrb	r3, [r3, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80089a6:	23fa      	movs	r3, #250	; 0xfa
 80089a8:	72fb      	strb	r3, [r7, #11]
 80089aa:	e06c      	b.n	8008a86 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80089ac:	23ff      	movs	r3, #255	; 0xff
 80089ae:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f107 020b 	add.w	r2, r7, #11
 80089ba:	7cf9      	ldrb	r1, [r7, #19]
 80089bc:	4618      	mov	r0, r3
 80089be:	f003 f839 	bl	800ba34 <tcp_listen_with_backlog_and_err>
 80089c2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d05d      	beq.n	8008a86 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3310      	adds	r3, #16
 80089d0:	4618      	mov	r0, r3
 80089d2:	f00b fc7a 	bl	80142ca <sys_mbox_valid>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00b      	beq.n	80089f4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3310      	adds	r3, #16
 80089e2:	4618      	mov	r0, r3
 80089e4:	f00b fbea 	bl	80141bc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3310      	adds	r3, #16
 80089ee:	4618      	mov	r0, r3
 80089f0:	f00b fc7c 	bl	80142ec <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3314      	adds	r3, #20
 80089fe:	4618      	mov	r0, r3
 8008a00:	f00b fc63 	bl	80142ca <sys_mbox_valid>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d108      	bne.n	8008a1c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3314      	adds	r3, #20
 8008a10:	2106      	movs	r1, #6
 8008a12:	4618      	mov	r0, r3
 8008a14:	f00b fbb0 	bl	8014178 <sys_mbox_new>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8008a1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d118      	bne.n	8008a56 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4610      	mov	r0, r2
 8008a42:	f003 ffc1 	bl	800c9c8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	4912      	ldr	r1, [pc, #72]	; (8008a98 <lwip_netconn_do_listen+0x12c>)
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f004 f832 	bl	800cab8 <tcp_accept>
 8008a54:	e017      	b.n	8008a86 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f002 fde2 	bl	800b620 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2200      	movs	r2, #0
 8008a62:	605a      	str	r2, [r3, #4]
 8008a64:	e00f      	b.n	8008a86 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d102      	bne.n	8008a76 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	72fb      	strb	r3, [r7, #11]
 8008a74:	e007      	b.n	8008a86 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8008a76:	23f5      	movs	r3, #245	; 0xf5
 8008a78:	72fb      	strb	r3, [r7, #11]
 8008a7a:	e004      	b.n	8008a86 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8008a7c:	23f0      	movs	r3, #240	; 0xf0
 8008a7e:	72fb      	strb	r3, [r7, #11]
 8008a80:	e001      	b.n	8008a86 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8008a82:	23f5      	movs	r3, #245	; 0xf5
 8008a84:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8008a86:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008a8e:	bf00      	nop
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	08007f81 	.word	0x08007f81

08008a9c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d022      	beq.n	8008afe <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ac2:	2b10      	cmp	r3, #16
 8008ac4:	d11b      	bne.n	8008afe <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad2:	d202      	bcs.n	8008ada <lwip_netconn_do_recv+0x3e>
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	e001      	b.n	8008ade <lwip_netconn_do_recv+0x42>
 8008ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ade:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	89fa      	ldrh	r2, [r7, #14]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f003 f8a6 	bl	800bc3c <tcp_recved>
        remaining -= recved;
 8008af0:	89fb      	ldrh	r3, [r7, #14]
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e6      	bne.n	8008acc <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8008afe:	bf00      	nop
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d106      	bne.n	8008b2c <lwip_netconn_do_writemore+0x24>
 8008b1e:	4b96      	ldr	r3, [pc, #600]	; (8008d78 <lwip_netconn_do_writemore+0x270>)
 8008b20:	f240 6273 	movw	r2, #1651	; 0x673
 8008b24:	4995      	ldr	r1, [pc, #596]	; (8008d7c <lwip_netconn_do_writemore+0x274>)
 8008b26:	4896      	ldr	r0, [pc, #600]	; (8008d80 <lwip_netconn_do_writemore+0x278>)
 8008b28:	f00b fd50 	bl	80145cc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	785b      	ldrb	r3, [r3, #1]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d006      	beq.n	8008b42 <lwip_netconn_do_writemore+0x3a>
 8008b34:	4b90      	ldr	r3, [pc, #576]	; (8008d78 <lwip_netconn_do_writemore+0x270>)
 8008b36:	f240 6274 	movw	r2, #1652	; 0x674
 8008b3a:	4992      	ldr	r1, [pc, #584]	; (8008d84 <lwip_netconn_do_writemore+0x27c>)
 8008b3c:	4890      	ldr	r0, [pc, #576]	; (8008d80 <lwip_netconn_do_writemore+0x278>)
 8008b3e:	f00b fd45 	bl	80145cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <lwip_netconn_do_writemore+0x50>
 8008b4a:	4b8b      	ldr	r3, [pc, #556]	; (8008d78 <lwip_netconn_do_writemore+0x270>)
 8008b4c:	f240 6275 	movw	r2, #1653	; 0x675
 8008b50:	498d      	ldr	r1, [pc, #564]	; (8008d88 <lwip_netconn_do_writemore+0x280>)
 8008b52:	488b      	ldr	r0, [pc, #556]	; (8008d80 <lwip_netconn_do_writemore+0x278>)
 8008b54:	f00b fd3a 	bl	80145cc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <lwip_netconn_do_writemore+0x66>
 8008b60:	4b85      	ldr	r3, [pc, #532]	; (8008d78 <lwip_netconn_do_writemore+0x270>)
 8008b62:	f240 6276 	movw	r2, #1654	; 0x676
 8008b66:	4989      	ldr	r1, [pc, #548]	; (8008d8c <lwip_netconn_do_writemore+0x284>)
 8008b68:	4885      	ldr	r0, [pc, #532]	; (8008d80 <lwip_netconn_do_writemore+0x278>)
 8008b6a:	f00b fd2f 	bl	80145cc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	699a      	ldr	r2, [r3, #24]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d306      	bcc.n	8008b8c <lwip_netconn_do_writemore+0x84>
 8008b7e:	4b7e      	ldr	r3, [pc, #504]	; (8008d78 <lwip_netconn_do_writemore+0x270>)
 8008b80:	f240 6277 	movw	r2, #1655	; 0x677
 8008b84:	4982      	ldr	r1, [pc, #520]	; (8008d90 <lwip_netconn_do_writemore+0x288>)
 8008b86:	487e      	ldr	r0, [pc, #504]	; (8008d80 <lwip_netconn_do_writemore+0x278>)
 8008b88:	f00b fd20 	bl	80145cc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	899b      	ldrh	r3, [r3, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d106      	bne.n	8008ba4 <lwip_netconn_do_writemore+0x9c>
 8008b96:	4b78      	ldr	r3, [pc, #480]	; (8008d78 <lwip_netconn_do_writemore+0x270>)
 8008b98:	f240 6279 	movw	r2, #1657	; 0x679
 8008b9c:	497d      	ldr	r1, [pc, #500]	; (8008d94 <lwip_netconn_do_writemore+0x28c>)
 8008b9e:	4878      	ldr	r0, [pc, #480]	; (8008d80 <lwip_netconn_do_writemore+0x278>)
 8008ba0:	f00b fd14 	bl	80145cc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	7f1b      	ldrb	r3, [r3, #28]
 8008baa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	7f1b      	ldrb	r3, [r3, #28]
 8008bb0:	f003 0302 	and.w	r3, r3, #2
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d104      	bne.n	8008bc2 <lwip_netconn_do_writemore+0xba>
 8008bb8:	7ebb      	ldrb	r3, [r7, #26]
 8008bba:	f003 0304 	and.w	r3, r3, #4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <lwip_netconn_do_writemore+0xbe>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e000      	b.n	8008bc8 <lwip_netconn_do_writemore+0xc0>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	4413      	add	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf4:	d307      	bcc.n	8008c06 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8008bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bfa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008bfc:	7ebb      	ldrb	r3, [r7, #26]
 8008bfe:	f043 0302 	orr.w	r3, r3, #2
 8008c02:	76bb      	strb	r3, [r7, #26]
 8008c04:	e001      	b.n	8008c0a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008c12:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8008c14:	89fa      	ldrh	r2, [r7, #14]
 8008c16:	8bbb      	ldrh	r3, [r7, #28]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d216      	bcs.n	8008c4a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
 8008c1e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8008c20:	7e3b      	ldrb	r3, [r7, #24]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00d      	beq.n	8008c42 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8008c26:	8bbb      	ldrh	r3, [r7, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10e      	bne.n	8008c4a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <lwip_netconn_do_writemore+0x134>
 8008c36:	f06f 0306 	mvn.w	r3, #6
 8008c3a:	e000      	b.n	8008c3e <lwip_netconn_do_writemore+0x136>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8008c40:	e07d      	b.n	8008d3e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8008c42:	7ebb      	ldrb	r3, [r7, #26]
 8008c44:	f043 0302 	orr.w	r3, r3, #2
 8008c48:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	8bbb      	ldrh	r3, [r7, #28]
 8008c52:	441a      	add	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d906      	bls.n	8008c6e <lwip_netconn_do_writemore+0x166>
 8008c60:	4b45      	ldr	r3, [pc, #276]	; (8008d78 <lwip_netconn_do_writemore+0x270>)
 8008c62:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8008c66:	494c      	ldr	r1, [pc, #304]	; (8008d98 <lwip_netconn_do_writemore+0x290>)
 8008c68:	4845      	ldr	r0, [pc, #276]	; (8008d80 <lwip_netconn_do_writemore+0x278>)
 8008c6a:	f00b fcaf 	bl	80145cc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8008c6e:	8bbb      	ldrh	r3, [r7, #28]
 8008c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d103      	bne.n	8008c80 <lwip_netconn_do_writemore+0x178>
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c7e:	d209      	bcs.n	8008c94 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8008c84:	8bba      	ldrh	r2, [r7, #28]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d10b      	bne.n	8008ca2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	899b      	ldrh	r3, [r3, #12]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d906      	bls.n	8008ca2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8008c94:	2301      	movs	r3, #1
 8008c96:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008c98:	7ebb      	ldrb	r3, [r7, #26]
 8008c9a:	f043 0302 	orr.w	r3, r3, #2
 8008c9e:	76bb      	strb	r3, [r7, #26]
 8008ca0:	e001      	b.n	8008ca6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6858      	ldr	r0, [r3, #4]
 8008caa:	7ebb      	ldrb	r3, [r7, #26]
 8008cac:	8bba      	ldrh	r2, [r7, #28]
 8008cae:	6979      	ldr	r1, [r7, #20]
 8008cb0:	f006 fdc8 	bl	800f844 <tcp_write>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8008cb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d12c      	bne.n	8008d1a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	6999      	ldr	r1, [r3, #24]
 8008cc6:	8bba      	ldrh	r2, [r7, #28]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	440a      	add	r2, r1
 8008cce:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	6919      	ldr	r1, [r3, #16]
 8008cd6:	8bba      	ldrh	r2, [r7, #28]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	440a      	add	r2, r1
 8008cde:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	691a      	ldr	r2, [r3, #16]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d113      	bne.n	8008d1a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	899a      	ldrh	r2, [r3, #12]
 8008cf8:	3a01      	subs	r2, #1
 8008cfa:	b292      	uxth	r2, r2
 8008cfc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	899b      	ldrh	r3, [r3, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	689a      	ldr	r2, [r3, #8]
 8008d0e:	3208      	adds	r2, #8
 8008d10:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	2200      	movs	r2, #0
 8008d18:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8008d1a:	7e7b      	ldrb	r3, [r7, #25]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <lwip_netconn_do_writemore+0x222>
 8008d20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f43f af50 	beq.w	8008bca <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008d2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d004      	beq.n	8008d3c <lwip_netconn_do_writemore+0x234>
 8008d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3a:	d146      	bne.n	8008dca <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8008d3c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8008d3e:	7e3b      	ldrb	r3, [r7, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d02b      	beq.n	8008d9c <lwip_netconn_do_writemore+0x294>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a1b      	ldr	r3, [r3, #32]
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d223      	bcs.n	8008d9c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <lwip_netconn_do_writemore+0x260>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	2200      	movs	r2, #0
 8008d62:	2103      	movs	r1, #3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7f1b      	ldrb	r3, [r3, #28]
 8008d6c:	f043 0310 	orr.w	r3, r3, #16
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	771a      	strb	r2, [r3, #28]
 8008d76:	e028      	b.n	8008dca <lwip_netconn_do_writemore+0x2c2>
 8008d78:	08015a3c 	.word	0x08015a3c
 8008d7c:	08015b94 	.word	0x08015b94
 8008d80:	08015a80 	.word	0x08015a80
 8008d84:	08015e9c 	.word	0x08015e9c
 8008d88:	08015ba4 	.word	0x08015ba4
 8008d8c:	08015ebc 	.word	0x08015ebc
 8008d90:	08015ed4 	.word	0x08015ed4
 8008d94:	08015f14 	.word	0x08015f14
 8008d98:	08015f3c 	.word	0x08015f3c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008da4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008da8:	d305      	bcc.n	8008db6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d909      	bls.n	8008dca <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <lwip_netconn_do_writemore+0x2c2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2103      	movs	r1, #3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8008dca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d11d      	bne.n	8008e0e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d002      	beq.n	8008de8 <lwip_netconn_do_writemore+0x2e0>
 8008de2:	7e3b      	ldrb	r3, [r7, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8008de8:	2301      	movs	r3, #1
 8008dea:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f007 fb11 	bl	8010418 <tcp_output>
 8008df6:	4603      	mov	r3, r0
 8008df8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8008dfa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008dfe:	f113 0f04 	cmn.w	r3, #4
 8008e02:	d12c      	bne.n	8008e5e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008e04:	7b3b      	ldrb	r3, [r7, #12]
 8008e06:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	76fb      	strb	r3, [r7, #27]
 8008e0c:	e027      	b.n	8008e5e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8008e0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e16:	d120      	bne.n	8008e5a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f007 fafb 	bl	8010418 <tcp_output>
 8008e22:	4603      	mov	r3, r0
 8008e24:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8008e26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008e2a:	f113 0f04 	cmn.w	r3, #4
 8008e2e:	d104      	bne.n	8008e3a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008e30:	7b7b      	ldrb	r3, [r7, #13]
 8008e32:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008e34:	2301      	movs	r3, #1
 8008e36:	76fb      	strb	r3, [r7, #27]
 8008e38:	e011      	b.n	8008e5e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8008e3a:	7e3b      	ldrb	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00e      	beq.n	8008e5e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <lwip_netconn_do_writemore+0x348>
 8008e4a:	f06f 0306 	mvn.w	r3, #6
 8008e4e:	e000      	b.n	8008e52 <lwip_netconn_do_writemore+0x34a>
 8008e50:	2300      	movs	r3, #0
 8008e52:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008e54:	2301      	movs	r3, #1
 8008e56:	76fb      	strb	r3, [r7, #27]
 8008e58:	e001      	b.n	8008e5e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8008e5e:	7efb      	ldrb	r3, [r7, #27]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d015      	beq.n	8008e90 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	7ffa      	ldrb	r2, [r7, #31]
 8008e74:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d006      	beq.n	8008e96 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8008e88:	68b8      	ldr	r0, [r7, #8]
 8008e8a:	f00b fa95 	bl	80143b8 <sys_sem_signal>
 8008e8e:	e002      	b.n	8008e96 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295
 8008e94:	e000      	b.n	8008e98 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe fd20 	bl	80078f6 <netconn_err>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d166      	bne.n	8008f90 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ecc:	2b10      	cmp	r3, #16
 8008ece:	d15d      	bne.n	8008f8c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8008eda:	23fb      	movs	r3, #251	; 0xfb
 8008edc:	73fb      	strb	r3, [r7, #15]
 8008ede:	e057      	b.n	8008f90 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d04d      	beq.n	8008f86 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <lwip_netconn_do_write+0x6a>
 8008efc:	4b28      	ldr	r3, [pc, #160]	; (8008fa0 <lwip_netconn_do_write+0x100>)
 8008efe:	f240 7223 	movw	r2, #1827	; 0x723
 8008f02:	4928      	ldr	r1, [pc, #160]	; (8008fa4 <lwip_netconn_do_write+0x104>)
 8008f04:	4828      	ldr	r0, [pc, #160]	; (8008fa8 <lwip_netconn_do_write+0x108>)
 8008f06:	f00b fb61 	bl	80145cc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <lwip_netconn_do_write+0x80>
 8008f12:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <lwip_netconn_do_write+0x100>)
 8008f14:	f240 7224 	movw	r2, #1828	; 0x724
 8008f18:	4924      	ldr	r1, [pc, #144]	; (8008fac <lwip_netconn_do_write+0x10c>)
 8008f1a:	4823      	ldr	r0, [pc, #140]	; (8008fa8 <lwip_netconn_do_write+0x108>)
 8008f1c:	f00b fb56 	bl	80145cc <iprintf>
        msg->conn->current_msg = msg;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff fdea 	bl	8008b08 <lwip_netconn_do_writemore>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d02e      	beq.n	8008f98 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	785b      	ldrb	r3, [r3, #1]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d006      	beq.n	8008f52 <lwip_netconn_do_write+0xb2>
 8008f44:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <lwip_netconn_do_write+0x100>)
 8008f46:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8008f4a:	4919      	ldr	r1, [pc, #100]	; (8008fb0 <lwip_netconn_do_write+0x110>)
 8008f4c:	4816      	ldr	r0, [pc, #88]	; (8008fa8 <lwip_netconn_do_write+0x108>)
 8008f4e:	f00b fb3d 	bl	80145cc <iprintf>
          UNLOCK_TCPIP_CORE();
 8008f52:	4818      	ldr	r0, [pc, #96]	; (8008fb4 <lwip_netconn_do_write+0x114>)
 8008f54:	f00b faa1 	bl	801449a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	330c      	adds	r3, #12
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f00b f9f8 	bl	8014356 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008f66:	4813      	ldr	r0, [pc, #76]	; (8008fb4 <lwip_netconn_do_write+0x114>)
 8008f68:	f00b fa88 	bl	801447c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	785b      	ldrb	r3, [r3, #1]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d110      	bne.n	8008f98 <lwip_netconn_do_write+0xf8>
 8008f76:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <lwip_netconn_do_write+0x100>)
 8008f78:	f240 722c 	movw	r2, #1836	; 0x72c
 8008f7c:	490c      	ldr	r1, [pc, #48]	; (8008fb0 <lwip_netconn_do_write+0x110>)
 8008f7e:	480a      	ldr	r0, [pc, #40]	; (8008fa8 <lwip_netconn_do_write+0x108>)
 8008f80:	f00b fb24 	bl	80145cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8008f84:	e008      	b.n	8008f98 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8008f86:	23f5      	movs	r3, #245	; 0xf5
 8008f88:	73fb      	strb	r3, [r7, #15]
 8008f8a:	e001      	b.n	8008f90 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8008f8c:	23fa      	movs	r3, #250	; 0xfa
 8008f8e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	7bfa      	ldrb	r2, [r7, #15]
 8008f94:	711a      	strb	r2, [r3, #4]
 8008f96:	e000      	b.n	8008f9a <lwip_netconn_do_write+0xfa>
        return;
 8008f98:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	08015a3c 	.word	0x08015a3c
 8008fa4:	08015de0 	.word	0x08015de0
 8008fa8:	08015a80 	.word	0x08015a80
 8008fac:	08015f68 	.word	0x08015f68
 8008fb0:	08015dfc 	.word	0x08015dfc
 8008fb4:	200073b0 	.word	0x200073b0

08008fb8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d069      	beq.n	80090aa <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8008fe0:	2b10      	cmp	r3, #16
 8008fe2:	d162      	bne.n	80090aa <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008fe8:	2b03      	cmp	r3, #3
 8008fea:	d002      	beq.n	8008ff2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d05b      	beq.n	80090aa <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d103      	bne.n	8009000 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	22f5      	movs	r2, #245	; 0xf5
 8008ffc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008ffe:	e059      	b.n	80090b4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d103      	bne.n	800900e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	22fb      	movs	r2, #251	; 0xfb
 800900a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800900c:	e052      	b.n	80090b4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	7a1b      	ldrb	r3, [r3, #8]
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff f9a2 	bl	8008368 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <lwip_netconn_do_close+0x84>
 800902e:	4b23      	ldr	r3, [pc, #140]	; (80090bc <lwip_netconn_do_close+0x104>)
 8009030:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009034:	4922      	ldr	r1, [pc, #136]	; (80090c0 <lwip_netconn_do_close+0x108>)
 8009036:	4823      	ldr	r0, [pc, #140]	; (80090c4 <lwip_netconn_do_close+0x10c>)
 8009038:	f00b fac8 	bl	80145cc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2204      	movs	r2, #4
 8009042:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2100      	movs	r1, #0
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff fa06 	bl	8008464 <lwip_netconn_do_close_internal>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d029      	beq.n	80090b2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	2b04      	cmp	r3, #4
 8009066:	d006      	beq.n	8009076 <lwip_netconn_do_close+0xbe>
 8009068:	4b14      	ldr	r3, [pc, #80]	; (80090bc <lwip_netconn_do_close+0x104>)
 800906a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800906e:	4916      	ldr	r1, [pc, #88]	; (80090c8 <lwip_netconn_do_close+0x110>)
 8009070:	4814      	ldr	r0, [pc, #80]	; (80090c4 <lwip_netconn_do_close+0x10c>)
 8009072:	f00b faab 	bl	80145cc <iprintf>
        UNLOCK_TCPIP_CORE();
 8009076:	4815      	ldr	r0, [pc, #84]	; (80090cc <lwip_netconn_do_close+0x114>)
 8009078:	f00b fa0f 	bl	801449a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	330c      	adds	r3, #12
 8009082:	2100      	movs	r1, #0
 8009084:	4618      	mov	r0, r3
 8009086:	f00b f966 	bl	8014356 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800908a:	4810      	ldr	r0, [pc, #64]	; (80090cc <lwip_netconn_do_close+0x114>)
 800908c:	f00b f9f6 	bl	801447c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	785b      	ldrb	r3, [r3, #1]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00b      	beq.n	80090b2 <lwip_netconn_do_close+0xfa>
 800909a:	4b08      	ldr	r3, [pc, #32]	; (80090bc <lwip_netconn_do_close+0x104>)
 800909c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80090a0:	4909      	ldr	r1, [pc, #36]	; (80090c8 <lwip_netconn_do_close+0x110>)
 80090a2:	4808      	ldr	r0, [pc, #32]	; (80090c4 <lwip_netconn_do_close+0x10c>)
 80090a4:	f00b fa92 	bl	80145cc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80090a8:	e003      	b.n	80090b2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	22f5      	movs	r2, #245	; 0xf5
 80090ae:	711a      	strb	r2, [r3, #4]
 80090b0:	e000      	b.n	80090b4 <lwip_netconn_do_close+0xfc>
      return;
 80090b2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08015a3c 	.word	0x08015a3c
 80090c0:	08015de0 	.word	0x08015de0
 80090c4:	08015a80 	.word	0x08015a80
 80090c8:	08015dfc 	.word	0x08015dfc
 80090cc:	200073b0 	.word	0x200073b0

080090d0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d013      	beq.n	8009106 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00b      	beq.n	80090fe <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 fdee 	bl	800accc <pbuf_free>
      buf->p = buf->ptr = NULL;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	605a      	str	r2, [r3, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	2006      	movs	r0, #6
 8009102:	f000 ff3f 	bl	8009f84 <memp_free>
  }
}
 8009106:	bf00      	nop
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d108      	bne.n	8009134 <netbuf_data+0x24>
 8009122:	4b1b      	ldr	r3, [pc, #108]	; (8009190 <netbuf_data+0x80>)
 8009124:	22c6      	movs	r2, #198	; 0xc6
 8009126:	491b      	ldr	r1, [pc, #108]	; (8009194 <netbuf_data+0x84>)
 8009128:	481b      	ldr	r0, [pc, #108]	; (8009198 <netbuf_data+0x88>)
 800912a:	f00b fa4f 	bl	80145cc <iprintf>
 800912e:	f06f 030f 	mvn.w	r3, #15
 8009132:	e029      	b.n	8009188 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d108      	bne.n	800914c <netbuf_data+0x3c>
 800913a:	4b15      	ldr	r3, [pc, #84]	; (8009190 <netbuf_data+0x80>)
 800913c:	22c7      	movs	r2, #199	; 0xc7
 800913e:	4917      	ldr	r1, [pc, #92]	; (800919c <netbuf_data+0x8c>)
 8009140:	4815      	ldr	r0, [pc, #84]	; (8009198 <netbuf_data+0x88>)
 8009142:	f00b fa43 	bl	80145cc <iprintf>
 8009146:	f06f 030f 	mvn.w	r3, #15
 800914a:	e01d      	b.n	8009188 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d108      	bne.n	8009164 <netbuf_data+0x54>
 8009152:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <netbuf_data+0x80>)
 8009154:	22c8      	movs	r2, #200	; 0xc8
 8009156:	4912      	ldr	r1, [pc, #72]	; (80091a0 <netbuf_data+0x90>)
 8009158:	480f      	ldr	r0, [pc, #60]	; (8009198 <netbuf_data+0x88>)
 800915a:	f00b fa37 	bl	80145cc <iprintf>
 800915e:	f06f 030f 	mvn.w	r3, #15
 8009162:	e011      	b.n	8009188 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <netbuf_data+0x62>
    return ERR_BUF;
 800916c:	f06f 0301 	mvn.w	r3, #1
 8009170:	e00a      	b.n	8009188 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	895a      	ldrh	r2, [r3, #10]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	08015f94 	.word	0x08015f94
 8009194:	0801609c 	.word	0x0801609c
 8009198:	08015fe4 	.word	0x08015fe4
 800919c:	080160b8 	.word	0x080160b8
 80091a0:	080160d8 	.word	0x080160d8

080091a4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d108      	bne.n	80091c4 <netbuf_next+0x20>
 80091b2:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <netbuf_next+0x54>)
 80091b4:	22e0      	movs	r2, #224	; 0xe0
 80091b6:	4911      	ldr	r1, [pc, #68]	; (80091fc <netbuf_next+0x58>)
 80091b8:	4811      	ldr	r0, [pc, #68]	; (8009200 <netbuf_next+0x5c>)
 80091ba:	f00b fa07 	bl	80145cc <iprintf>
 80091be:	f04f 33ff 	mov.w	r3, #4294967295
 80091c2:	e014      	b.n	80091ee <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d102      	bne.n	80091d4 <netbuf_next+0x30>
    return -1;
 80091ce:	f04f 33ff 	mov.w	r3, #4294967295
 80091d2:	e00c      	b.n	80091ee <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <netbuf_next+0x48>
    return 1;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e000      	b.n	80091ee <netbuf_next+0x4a>
  }
  return 0;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	08015f94 	.word	0x08015f94
 80091fc:	080160f4 	.word	0x080160f4
 8009200:	08015fe4 	.word	0x08015fe4

08009204 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800920e:	f008 f9bb 	bl	8011588 <sys_timeouts_sleeptime>
 8009212:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921a:	d10b      	bne.n	8009234 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800921c:	4813      	ldr	r0, [pc, #76]	; (800926c <tcpip_timeouts_mbox_fetch+0x68>)
 800921e:	f00b f93c 	bl	801449a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009222:	2200      	movs	r2, #0
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f00a fff4 	bl	8014214 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800922c:	480f      	ldr	r0, [pc, #60]	; (800926c <tcpip_timeouts_mbox_fetch+0x68>)
 800922e:	f00b f925 	bl	801447c <sys_mutex_lock>
    return;
 8009232:	e018      	b.n	8009266 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d102      	bne.n	8009240 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800923a:	f008 f96b 	bl	8011514 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800923e:	e7e6      	b.n	800920e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009240:	480a      	ldr	r0, [pc, #40]	; (800926c <tcpip_timeouts_mbox_fetch+0x68>)
 8009242:	f00b f92a 	bl	801449a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f00a ffe2 	bl	8014214 <sys_arch_mbox_fetch>
 8009250:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009252:	4806      	ldr	r0, [pc, #24]	; (800926c <tcpip_timeouts_mbox_fetch+0x68>)
 8009254:	f00b f912 	bl	801447c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d102      	bne.n	8009266 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009260:	f008 f958 	bl	8011514 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009264:	e7d3      	b.n	800920e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	200073b0 	.word	0x200073b0

08009270 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009278:	4810      	ldr	r0, [pc, #64]	; (80092bc <tcpip_thread+0x4c>)
 800927a:	f00b f8ff 	bl	801447c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800927e:	4b10      	ldr	r3, [pc, #64]	; (80092c0 <tcpip_thread+0x50>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009286:	4b0e      	ldr	r3, [pc, #56]	; (80092c0 <tcpip_thread+0x50>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a0e      	ldr	r2, [pc, #56]	; (80092c4 <tcpip_thread+0x54>)
 800928c:	6812      	ldr	r2, [r2, #0]
 800928e:	4610      	mov	r0, r2
 8009290:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009292:	f107 030c 	add.w	r3, r7, #12
 8009296:	4619      	mov	r1, r3
 8009298:	480b      	ldr	r0, [pc, #44]	; (80092c8 <tcpip_thread+0x58>)
 800929a:	f7ff ffb3 	bl	8009204 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80092a4:	4b09      	ldr	r3, [pc, #36]	; (80092cc <tcpip_thread+0x5c>)
 80092a6:	2291      	movs	r2, #145	; 0x91
 80092a8:	4909      	ldr	r1, [pc, #36]	; (80092d0 <tcpip_thread+0x60>)
 80092aa:	480a      	ldr	r0, [pc, #40]	; (80092d4 <tcpip_thread+0x64>)
 80092ac:	f00b f98e 	bl	80145cc <iprintf>
      continue;
 80092b0:	e003      	b.n	80092ba <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 f80f 	bl	80092d8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80092ba:	e7ea      	b.n	8009292 <tcpip_thread+0x22>
 80092bc:	200073b0 	.word	0x200073b0
 80092c0:	20004048 	.word	0x20004048
 80092c4:	2000404c 	.word	0x2000404c
 80092c8:	20004050 	.word	0x20004050
 80092cc:	0801612c 	.word	0x0801612c
 80092d0:	0801615c 	.word	0x0801615c
 80092d4:	0801617c 	.word	0x0801617c

080092d8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d026      	beq.n	8009336 <tcpip_thread_handle_msg+0x5e>
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	dc2b      	bgt.n	8009344 <tcpip_thread_handle_msg+0x6c>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <tcpip_thread_handle_msg+0x1e>
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d015      	beq.n	8009320 <tcpip_thread_handle_msg+0x48>
 80092f4:	e026      	b.n	8009344 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	6850      	ldr	r0, [r2, #4]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6892      	ldr	r2, [r2, #8]
 8009302:	4611      	mov	r1, r2
 8009304:	4798      	blx	r3
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	4618      	mov	r0, r3
 8009312:	f001 fcdb 	bl	800accc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	2009      	movs	r0, #9
 800931a:	f000 fe33 	bl	8009f84 <memp_free>
      break;
 800931e:	e018      	b.n	8009352 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6892      	ldr	r2, [r2, #8]
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	2008      	movs	r0, #8
 8009330:	f000 fe28 	bl	8009f84 <memp_free>
      break;
 8009334:	e00d      	b.n	8009352 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6892      	ldr	r2, [r2, #8]
 800933e:	4610      	mov	r0, r2
 8009340:	4798      	blx	r3
      break;
 8009342:	e006      	b.n	8009352 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <tcpip_thread_handle_msg+0x84>)
 8009346:	22cf      	movs	r2, #207	; 0xcf
 8009348:	4905      	ldr	r1, [pc, #20]	; (8009360 <tcpip_thread_handle_msg+0x88>)
 800934a:	4806      	ldr	r0, [pc, #24]	; (8009364 <tcpip_thread_handle_msg+0x8c>)
 800934c:	f00b f93e 	bl	80145cc <iprintf>
      break;
 8009350:	bf00      	nop
  }
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	0801612c 	.word	0x0801612c
 8009360:	0801615c 	.word	0x0801615c
 8009364:	0801617c 	.word	0x0801617c

08009368 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009374:	481a      	ldr	r0, [pc, #104]	; (80093e0 <tcpip_inpkt+0x78>)
 8009376:	f00a ffa8 	bl	80142ca <sys_mbox_valid>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d105      	bne.n	800938c <tcpip_inpkt+0x24>
 8009380:	4b18      	ldr	r3, [pc, #96]	; (80093e4 <tcpip_inpkt+0x7c>)
 8009382:	22fc      	movs	r2, #252	; 0xfc
 8009384:	4918      	ldr	r1, [pc, #96]	; (80093e8 <tcpip_inpkt+0x80>)
 8009386:	4819      	ldr	r0, [pc, #100]	; (80093ec <tcpip_inpkt+0x84>)
 8009388:	f00b f920 	bl	80145cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800938c:	2009      	movs	r0, #9
 800938e:	f000 fda7 	bl	8009ee0 <memp_malloc>
 8009392:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d102      	bne.n	80093a0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800939a:	f04f 33ff 	mov.w	r3, #4294967295
 800939e:	e01a      	b.n	80093d6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2200      	movs	r2, #0
 80093a4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80093b8:	6979      	ldr	r1, [r7, #20]
 80093ba:	4809      	ldr	r0, [pc, #36]	; (80093e0 <tcpip_inpkt+0x78>)
 80093bc:	f00a ff10 	bl	80141e0 <sys_mbox_trypost>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d006      	beq.n	80093d4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80093c6:	6979      	ldr	r1, [r7, #20]
 80093c8:	2009      	movs	r0, #9
 80093ca:	f000 fddb 	bl	8009f84 <memp_free>
    return ERR_MEM;
 80093ce:	f04f 33ff 	mov.w	r3, #4294967295
 80093d2:	e000      	b.n	80093d6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80093d4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20004050 	.word	0x20004050
 80093e4:	0801612c 	.word	0x0801612c
 80093e8:	080161a4 	.word	0x080161a4
 80093ec:	0801617c 	.word	0x0801617c

080093f0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009400:	f003 0318 	and.w	r3, r3, #24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d006      	beq.n	8009416 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009408:	4a08      	ldr	r2, [pc, #32]	; (800942c <tcpip_input+0x3c>)
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff ffab 	bl	8009368 <tcpip_inpkt>
 8009412:	4603      	mov	r3, r0
 8009414:	e005      	b.n	8009422 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009416:	4a06      	ldr	r2, [pc, #24]	; (8009430 <tcpip_input+0x40>)
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff ffa4 	bl	8009368 <tcpip_inpkt>
 8009420:	4603      	mov	r3, r0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	08013fcd 	.word	0x08013fcd
 8009430:	08012ee1 	.word	0x08012ee1

08009434 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800943e:	4819      	ldr	r0, [pc, #100]	; (80094a4 <tcpip_try_callback+0x70>)
 8009440:	f00a ff43 	bl	80142ca <sys_mbox_valid>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <tcpip_try_callback+0x24>
 800944a:	4b17      	ldr	r3, [pc, #92]	; (80094a8 <tcpip_try_callback+0x74>)
 800944c:	f240 125d 	movw	r2, #349	; 0x15d
 8009450:	4916      	ldr	r1, [pc, #88]	; (80094ac <tcpip_try_callback+0x78>)
 8009452:	4817      	ldr	r0, [pc, #92]	; (80094b0 <tcpip_try_callback+0x7c>)
 8009454:	f00b f8ba 	bl	80145cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009458:	2008      	movs	r0, #8
 800945a:	f000 fd41 	bl	8009ee0 <memp_malloc>
 800945e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009466:	f04f 33ff 	mov.w	r3, #4294967295
 800946a:	e017      	b.n	800949c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2201      	movs	r2, #1
 8009470:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800947e:	68f9      	ldr	r1, [r7, #12]
 8009480:	4808      	ldr	r0, [pc, #32]	; (80094a4 <tcpip_try_callback+0x70>)
 8009482:	f00a fead 	bl	80141e0 <sys_mbox_trypost>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d006      	beq.n	800949a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800948c:	68f9      	ldr	r1, [r7, #12]
 800948e:	2008      	movs	r0, #8
 8009490:	f000 fd78 	bl	8009f84 <memp_free>
    return ERR_MEM;
 8009494:	f04f 33ff 	mov.w	r3, #4294967295
 8009498:	e000      	b.n	800949c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20004050 	.word	0x20004050
 80094a8:	0801612c 	.word	0x0801612c
 80094ac:	080161a4 	.word	0x080161a4
 80094b0:	0801617c 	.word	0x0801617c

080094b4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80094c0:	4806      	ldr	r0, [pc, #24]	; (80094dc <tcpip_send_msg_wait_sem+0x28>)
 80094c2:	f00a ffdb 	bl	801447c <sys_mutex_lock>
  fn(apimsg);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	68b8      	ldr	r0, [r7, #8]
 80094ca:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80094cc:	4803      	ldr	r0, [pc, #12]	; (80094dc <tcpip_send_msg_wait_sem+0x28>)
 80094ce:	f00a ffe4 	bl	801449a <sys_mutex_unlock>
  return ERR_OK;
 80094d2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	200073b0 	.word	0x200073b0

080094e0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af02      	add	r7, sp, #8
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80094ea:	f000 f871 	bl	80095d0 <lwip_init>

  tcpip_init_done = initfunc;
 80094ee:	4a17      	ldr	r2, [pc, #92]	; (800954c <tcpip_init+0x6c>)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80094f4:	4a16      	ldr	r2, [pc, #88]	; (8009550 <tcpip_init+0x70>)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80094fa:	2106      	movs	r1, #6
 80094fc:	4815      	ldr	r0, [pc, #84]	; (8009554 <tcpip_init+0x74>)
 80094fe:	f00a fe3b 	bl	8014178 <sys_mbox_new>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d006      	beq.n	8009516 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009508:	4b13      	ldr	r3, [pc, #76]	; (8009558 <tcpip_init+0x78>)
 800950a:	f240 2261 	movw	r2, #609	; 0x261
 800950e:	4913      	ldr	r1, [pc, #76]	; (800955c <tcpip_init+0x7c>)
 8009510:	4813      	ldr	r0, [pc, #76]	; (8009560 <tcpip_init+0x80>)
 8009512:	f00b f85b 	bl	80145cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009516:	4813      	ldr	r0, [pc, #76]	; (8009564 <tcpip_init+0x84>)
 8009518:	f00a ff94 	bl	8014444 <sys_mutex_new>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d006      	beq.n	8009530 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009522:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <tcpip_init+0x78>)
 8009524:	f240 2265 	movw	r2, #613	; 0x265
 8009528:	490f      	ldr	r1, [pc, #60]	; (8009568 <tcpip_init+0x88>)
 800952a:	480d      	ldr	r0, [pc, #52]	; (8009560 <tcpip_init+0x80>)
 800952c:	f00b f84e 	bl	80145cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009530:	2300      	movs	r3, #0
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009538:	2200      	movs	r2, #0
 800953a:	490c      	ldr	r1, [pc, #48]	; (800956c <tcpip_init+0x8c>)
 800953c:	480c      	ldr	r0, [pc, #48]	; (8009570 <tcpip_init+0x90>)
 800953e:	f00a ffb9 	bl	80144b4 <sys_thread_new>
}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20004048 	.word	0x20004048
 8009550:	2000404c 	.word	0x2000404c
 8009554:	20004050 	.word	0x20004050
 8009558:	0801612c 	.word	0x0801612c
 800955c:	080161b4 	.word	0x080161b4
 8009560:	0801617c 	.word	0x0801617c
 8009564:	200073b0 	.word	0x200073b0
 8009568:	080161d8 	.word	0x080161d8
 800956c:	08009271 	.word	0x08009271
 8009570:	080161fc 	.word	0x080161fc

08009574 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	b21a      	sxth	r2, r3
 8009584:	88fb      	ldrh	r3, [r7, #6]
 8009586:	0a1b      	lsrs	r3, r3, #8
 8009588:	b29b      	uxth	r3, r3
 800958a:	b21b      	sxth	r3, r3
 800958c:	4313      	orrs	r3, r2
 800958e:	b21b      	sxth	r3, r3
 8009590:	b29b      	uxth	r3, r3
}
 8009592:	4618      	mov	r0, r3
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	061a      	lsls	r2, r3, #24
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095b2:	431a      	orrs	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	0a1b      	lsrs	r3, r3, #8
 80095b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80095bc:	431a      	orrs	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	0e1b      	lsrs	r3, r3, #24
 80095c2:	4313      	orrs	r3, r2
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80095da:	f00a ff25 	bl	8014428 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80095de:	f000 f8d5 	bl	800978c <mem_init>
  memp_init();
 80095e2:	f000 fc31 	bl	8009e48 <memp_init>
  pbuf_init();
  netif_init();
 80095e6:	f000 fcf7 	bl	8009fd8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80095ea:	f008 f805 	bl	80115f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80095ee:	f001 fe07 	bl	800b200 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80095f2:	f007 ff47 	bl	8011484 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <ptr_to_mem+0x20>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	88fb      	ldrh	r3, [r7, #6]
 8009610:	4413      	add	r3, r2
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20004054 	.word	0x20004054

08009624 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800962c:	4b05      	ldr	r3, [pc, #20]	; (8009644 <mem_to_ptr+0x20>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	b29b      	uxth	r3, r3
}
 8009636:	4618      	mov	r0, r3
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20004054 	.word	0x20004054

08009648 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009650:	4b45      	ldr	r3, [pc, #276]	; (8009768 <plug_holes+0x120>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	d206      	bcs.n	8009668 <plug_holes+0x20>
 800965a:	4b44      	ldr	r3, [pc, #272]	; (800976c <plug_holes+0x124>)
 800965c:	f240 12df 	movw	r2, #479	; 0x1df
 8009660:	4943      	ldr	r1, [pc, #268]	; (8009770 <plug_holes+0x128>)
 8009662:	4844      	ldr	r0, [pc, #272]	; (8009774 <plug_holes+0x12c>)
 8009664:	f00a ffb2 	bl	80145cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009668:	4b43      	ldr	r3, [pc, #268]	; (8009778 <plug_holes+0x130>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d306      	bcc.n	8009680 <plug_holes+0x38>
 8009672:	4b3e      	ldr	r3, [pc, #248]	; (800976c <plug_holes+0x124>)
 8009674:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009678:	4940      	ldr	r1, [pc, #256]	; (800977c <plug_holes+0x134>)
 800967a:	483e      	ldr	r0, [pc, #248]	; (8009774 <plug_holes+0x12c>)
 800967c:	f00a ffa6 	bl	80145cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	791b      	ldrb	r3, [r3, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d006      	beq.n	8009696 <plug_holes+0x4e>
 8009688:	4b38      	ldr	r3, [pc, #224]	; (800976c <plug_holes+0x124>)
 800968a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800968e:	493c      	ldr	r1, [pc, #240]	; (8009780 <plug_holes+0x138>)
 8009690:	4838      	ldr	r0, [pc, #224]	; (8009774 <plug_holes+0x12c>)
 8009692:	f00a ff9b 	bl	80145cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800969e:	d906      	bls.n	80096ae <plug_holes+0x66>
 80096a0:	4b32      	ldr	r3, [pc, #200]	; (800976c <plug_holes+0x124>)
 80096a2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80096a6:	4937      	ldr	r1, [pc, #220]	; (8009784 <plug_holes+0x13c>)
 80096a8:	4832      	ldr	r0, [pc, #200]	; (8009774 <plug_holes+0x12c>)
 80096aa:	f00a ff8f 	bl	80145cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff ffa4 	bl	8009600 <ptr_to_mem>
 80096b8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d024      	beq.n	800970c <plug_holes+0xc4>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	791b      	ldrb	r3, [r3, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d120      	bne.n	800970c <plug_holes+0xc4>
 80096ca:	4b2b      	ldr	r3, [pc, #172]	; (8009778 <plug_holes+0x130>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d01b      	beq.n	800970c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80096d4:	4b2c      	ldr	r3, [pc, #176]	; (8009788 <plug_holes+0x140>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d102      	bne.n	80096e4 <plug_holes+0x9c>
      lfree = mem;
 80096de:	4a2a      	ldr	r2, [pc, #168]	; (8009788 <plug_holes+0x140>)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	881a      	ldrh	r2, [r3, #0]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80096f4:	d00a      	beq.n	800970c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff ff80 	bl	8009600 <ptr_to_mem>
 8009700:	4604      	mov	r4, r0
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff ff8e 	bl	8009624 <mem_to_ptr>
 8009708:	4603      	mov	r3, r0
 800970a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	885b      	ldrh	r3, [r3, #2]
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff ff75 	bl	8009600 <ptr_to_mem>
 8009716:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	429a      	cmp	r2, r3
 800971e:	d01f      	beq.n	8009760 <plug_holes+0x118>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	791b      	ldrb	r3, [r3, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d11b      	bne.n	8009760 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009728:	4b17      	ldr	r3, [pc, #92]	; (8009788 <plug_holes+0x140>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	429a      	cmp	r2, r3
 8009730:	d102      	bne.n	8009738 <plug_holes+0xf0>
      lfree = pmem;
 8009732:	4a15      	ldr	r2, [pc, #84]	; (8009788 <plug_holes+0x140>)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	881a      	ldrh	r2, [r3, #0]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009748:	d00a      	beq.n	8009760 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff ff56 	bl	8009600 <ptr_to_mem>
 8009754:	4604      	mov	r4, r0
 8009756:	68b8      	ldr	r0, [r7, #8]
 8009758:	f7ff ff64 	bl	8009624 <mem_to_ptr>
 800975c:	4603      	mov	r3, r0
 800975e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009760:	bf00      	nop
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	bd90      	pop	{r4, r7, pc}
 8009768:	20004054 	.word	0x20004054
 800976c:	0801620c 	.word	0x0801620c
 8009770:	0801623c 	.word	0x0801623c
 8009774:	08016254 	.word	0x08016254
 8009778:	20004058 	.word	0x20004058
 800977c:	0801627c 	.word	0x0801627c
 8009780:	08016298 	.word	0x08016298
 8009784:	080162b4 	.word	0x080162b4
 8009788:	20004060 	.word	0x20004060

0800978c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009792:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <mem_init+0x84>)
 8009794:	3303      	adds	r3, #3
 8009796:	f023 0303 	bic.w	r3, r3, #3
 800979a:	461a      	mov	r2, r3
 800979c:	4b1d      	ldr	r3, [pc, #116]	; (8009814 <mem_init+0x88>)
 800979e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80097a0:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <mem_init+0x88>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80097ac:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80097ba:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80097be:	f7ff ff1f 	bl	8009600 <ptr_to_mem>
 80097c2:	4603      	mov	r3, r0
 80097c4:	4a14      	ldr	r2, [pc, #80]	; (8009818 <mem_init+0x8c>)
 80097c6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80097c8:	4b13      	ldr	r3, [pc, #76]	; (8009818 <mem_init+0x8c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2201      	movs	r2, #1
 80097ce:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80097d0:	4b11      	ldr	r3, [pc, #68]	; (8009818 <mem_init+0x8c>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80097d8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80097da:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <mem_init+0x8c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80097e2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80097e4:	4b0b      	ldr	r3, [pc, #44]	; (8009814 <mem_init+0x88>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a0c      	ldr	r2, [pc, #48]	; (800981c <mem_init+0x90>)
 80097ea:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80097ec:	480c      	ldr	r0, [pc, #48]	; (8009820 <mem_init+0x94>)
 80097ee:	f00a fe29 	bl	8014444 <sys_mutex_new>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d006      	beq.n	8009806 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80097f8:	4b0a      	ldr	r3, [pc, #40]	; (8009824 <mem_init+0x98>)
 80097fa:	f240 221f 	movw	r2, #543	; 0x21f
 80097fe:	490a      	ldr	r1, [pc, #40]	; (8009828 <mem_init+0x9c>)
 8009800:	480a      	ldr	r0, [pc, #40]	; (800982c <mem_init+0xa0>)
 8009802:	f00a fee3 	bl	80145cc <iprintf>
  }
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	200073cc 	.word	0x200073cc
 8009814:	20004054 	.word	0x20004054
 8009818:	20004058 	.word	0x20004058
 800981c:	20004060 	.word	0x20004060
 8009820:	2000405c 	.word	0x2000405c
 8009824:	0801620c 	.word	0x0801620c
 8009828:	080162e0 	.word	0x080162e0
 800982c:	08016254 	.word	0x08016254

08009830 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff fef3 	bl	8009624 <mem_to_ptr>
 800983e:	4603      	mov	r3, r0
 8009840:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff feda 	bl	8009600 <ptr_to_mem>
 800984c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	885b      	ldrh	r3, [r3, #2]
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff fed4 	bl	8009600 <ptr_to_mem>
 8009858:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009862:	d818      	bhi.n	8009896 <mem_link_valid+0x66>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	885b      	ldrh	r3, [r3, #2]
 8009868:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800986c:	d813      	bhi.n	8009896 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009872:	8afa      	ldrh	r2, [r7, #22]
 8009874:	429a      	cmp	r2, r3
 8009876:	d004      	beq.n	8009882 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	8afa      	ldrh	r2, [r7, #22]
 800987e:	429a      	cmp	r2, r3
 8009880:	d109      	bne.n	8009896 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009882:	4b08      	ldr	r3, [pc, #32]	; (80098a4 <mem_link_valid+0x74>)
 8009884:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	429a      	cmp	r2, r3
 800988a:	d006      	beq.n	800989a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	885b      	ldrh	r3, [r3, #2]
 8009890:	8afa      	ldrh	r2, [r7, #22]
 8009892:	429a      	cmp	r2, r3
 8009894:	d001      	beq.n	800989a <mem_link_valid+0x6a>
    return 0;
 8009896:	2300      	movs	r3, #0
 8009898:	e000      	b.n	800989c <mem_link_valid+0x6c>
  }
  return 1;
 800989a:	2301      	movs	r3, #1
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20004058 	.word	0x20004058

080098a8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d070      	beq.n	8009998 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f003 0303 	and.w	r3, r3, #3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00d      	beq.n	80098dc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80098c0:	4b37      	ldr	r3, [pc, #220]	; (80099a0 <mem_free+0xf8>)
 80098c2:	f240 2273 	movw	r2, #627	; 0x273
 80098c6:	4937      	ldr	r1, [pc, #220]	; (80099a4 <mem_free+0xfc>)
 80098c8:	4837      	ldr	r0, [pc, #220]	; (80099a8 <mem_free+0x100>)
 80098ca:	f00a fe7f 	bl	80145cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80098ce:	f00a fe17 	bl	8014500 <sys_arch_protect>
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f00a fe21 	bl	801451c <sys_arch_unprotect>
    return;
 80098da:	e05e      	b.n	800999a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3b08      	subs	r3, #8
 80098e0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80098e2:	4b32      	ldr	r3, [pc, #200]	; (80099ac <mem_free+0x104>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d306      	bcc.n	80098fa <mem_free+0x52>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f103 020c 	add.w	r2, r3, #12
 80098f2:	4b2f      	ldr	r3, [pc, #188]	; (80099b0 <mem_free+0x108>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d90d      	bls.n	8009916 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80098fa:	4b29      	ldr	r3, [pc, #164]	; (80099a0 <mem_free+0xf8>)
 80098fc:	f240 227f 	movw	r2, #639	; 0x27f
 8009900:	492c      	ldr	r1, [pc, #176]	; (80099b4 <mem_free+0x10c>)
 8009902:	4829      	ldr	r0, [pc, #164]	; (80099a8 <mem_free+0x100>)
 8009904:	f00a fe62 	bl	80145cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009908:	f00a fdfa 	bl	8014500 <sys_arch_protect>
 800990c:	6138      	str	r0, [r7, #16]
 800990e:	6938      	ldr	r0, [r7, #16]
 8009910:	f00a fe04 	bl	801451c <sys_arch_unprotect>
    return;
 8009914:	e041      	b.n	800999a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009916:	4828      	ldr	r0, [pc, #160]	; (80099b8 <mem_free+0x110>)
 8009918:	f00a fdb0 	bl	801447c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	791b      	ldrb	r3, [r3, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d110      	bne.n	8009946 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009924:	4b1e      	ldr	r3, [pc, #120]	; (80099a0 <mem_free+0xf8>)
 8009926:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800992a:	4924      	ldr	r1, [pc, #144]	; (80099bc <mem_free+0x114>)
 800992c:	481e      	ldr	r0, [pc, #120]	; (80099a8 <mem_free+0x100>)
 800992e:	f00a fe4d 	bl	80145cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009932:	4821      	ldr	r0, [pc, #132]	; (80099b8 <mem_free+0x110>)
 8009934:	f00a fdb1 	bl	801449a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009938:	f00a fde2 	bl	8014500 <sys_arch_protect>
 800993c:	6178      	str	r0, [r7, #20]
 800993e:	6978      	ldr	r0, [r7, #20]
 8009940:	f00a fdec 	bl	801451c <sys_arch_unprotect>
    return;
 8009944:	e029      	b.n	800999a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009946:	69f8      	ldr	r0, [r7, #28]
 8009948:	f7ff ff72 	bl	8009830 <mem_link_valid>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d110      	bne.n	8009974 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009952:	4b13      	ldr	r3, [pc, #76]	; (80099a0 <mem_free+0xf8>)
 8009954:	f240 2295 	movw	r2, #661	; 0x295
 8009958:	4919      	ldr	r1, [pc, #100]	; (80099c0 <mem_free+0x118>)
 800995a:	4813      	ldr	r0, [pc, #76]	; (80099a8 <mem_free+0x100>)
 800995c:	f00a fe36 	bl	80145cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009960:	4815      	ldr	r0, [pc, #84]	; (80099b8 <mem_free+0x110>)
 8009962:	f00a fd9a 	bl	801449a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009966:	f00a fdcb 	bl	8014500 <sys_arch_protect>
 800996a:	61b8      	str	r0, [r7, #24]
 800996c:	69b8      	ldr	r0, [r7, #24]
 800996e:	f00a fdd5 	bl	801451c <sys_arch_unprotect>
    return;
 8009972:	e012      	b.n	800999a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	2200      	movs	r2, #0
 8009978:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800997a:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <mem_free+0x11c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	429a      	cmp	r2, r3
 8009982:	d202      	bcs.n	800998a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009984:	4a0f      	ldr	r2, [pc, #60]	; (80099c4 <mem_free+0x11c>)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800998a:	69f8      	ldr	r0, [r7, #28]
 800998c:	f7ff fe5c 	bl	8009648 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009990:	4809      	ldr	r0, [pc, #36]	; (80099b8 <mem_free+0x110>)
 8009992:	f00a fd82 	bl	801449a <sys_mutex_unlock>
 8009996:	e000      	b.n	800999a <mem_free+0xf2>
    return;
 8009998:	bf00      	nop
}
 800999a:	3720      	adds	r7, #32
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	0801620c 	.word	0x0801620c
 80099a4:	080162fc 	.word	0x080162fc
 80099a8:	08016254 	.word	0x08016254
 80099ac:	20004054 	.word	0x20004054
 80099b0:	20004058 	.word	0x20004058
 80099b4:	08016320 	.word	0x08016320
 80099b8:	2000405c 	.word	0x2000405c
 80099bc:	0801633c 	.word	0x0801633c
 80099c0:	08016364 	.word	0x08016364
 80099c4:	20004060 	.word	0x20004060

080099c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80099d4:	887b      	ldrh	r3, [r7, #2]
 80099d6:	3303      	adds	r3, #3
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f023 0303 	bic.w	r3, r3, #3
 80099de:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80099e0:	8bfb      	ldrh	r3, [r7, #30]
 80099e2:	2b0b      	cmp	r3, #11
 80099e4:	d801      	bhi.n	80099ea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80099e6:	230c      	movs	r3, #12
 80099e8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80099ea:	8bfb      	ldrh	r3, [r7, #30]
 80099ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099f0:	d803      	bhi.n	80099fa <mem_trim+0x32>
 80099f2:	8bfa      	ldrh	r2, [r7, #30]
 80099f4:	887b      	ldrh	r3, [r7, #2]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d201      	bcs.n	80099fe <mem_trim+0x36>
    return NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	e0d8      	b.n	8009bb0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80099fe:	4b6e      	ldr	r3, [pc, #440]	; (8009bb8 <mem_trim+0x1f0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d304      	bcc.n	8009a12 <mem_trim+0x4a>
 8009a08:	4b6c      	ldr	r3, [pc, #432]	; (8009bbc <mem_trim+0x1f4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d306      	bcc.n	8009a20 <mem_trim+0x58>
 8009a12:	4b6b      	ldr	r3, [pc, #428]	; (8009bc0 <mem_trim+0x1f8>)
 8009a14:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009a18:	496a      	ldr	r1, [pc, #424]	; (8009bc4 <mem_trim+0x1fc>)
 8009a1a:	486b      	ldr	r0, [pc, #428]	; (8009bc8 <mem_trim+0x200>)
 8009a1c:	f00a fdd6 	bl	80145cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009a20:	4b65      	ldr	r3, [pc, #404]	; (8009bb8 <mem_trim+0x1f0>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d304      	bcc.n	8009a34 <mem_trim+0x6c>
 8009a2a:	4b64      	ldr	r3, [pc, #400]	; (8009bbc <mem_trim+0x1f4>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d307      	bcc.n	8009a44 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009a34:	f00a fd64 	bl	8014500 <sys_arch_protect>
 8009a38:	60b8      	str	r0, [r7, #8]
 8009a3a:	68b8      	ldr	r0, [r7, #8]
 8009a3c:	f00a fd6e 	bl	801451c <sys_arch_unprotect>
    return rmem;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	e0b5      	b.n	8009bb0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3b08      	subs	r3, #8
 8009a48:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009a4a:	69b8      	ldr	r0, [r7, #24]
 8009a4c:	f7ff fdea 	bl	8009624 <mem_to_ptr>
 8009a50:	4603      	mov	r3, r0
 8009a52:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	881a      	ldrh	r2, [r3, #0]
 8009a58:	8afb      	ldrh	r3, [r7, #22]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	3b08      	subs	r3, #8
 8009a60:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009a62:	8bfa      	ldrh	r2, [r7, #30]
 8009a64:	8abb      	ldrh	r3, [r7, #20]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d906      	bls.n	8009a78 <mem_trim+0xb0>
 8009a6a:	4b55      	ldr	r3, [pc, #340]	; (8009bc0 <mem_trim+0x1f8>)
 8009a6c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009a70:	4956      	ldr	r1, [pc, #344]	; (8009bcc <mem_trim+0x204>)
 8009a72:	4855      	ldr	r0, [pc, #340]	; (8009bc8 <mem_trim+0x200>)
 8009a74:	f00a fdaa 	bl	80145cc <iprintf>
  if (newsize > size) {
 8009a78:	8bfa      	ldrh	r2, [r7, #30]
 8009a7a:	8abb      	ldrh	r3, [r7, #20]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d901      	bls.n	8009a84 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	e095      	b.n	8009bb0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009a84:	8bfa      	ldrh	r2, [r7, #30]
 8009a86:	8abb      	ldrh	r3, [r7, #20]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d101      	bne.n	8009a90 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	e08f      	b.n	8009bb0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009a90:	484f      	ldr	r0, [pc, #316]	; (8009bd0 <mem_trim+0x208>)
 8009a92:	f00a fcf3 	bl	801447c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff fdb0 	bl	8009600 <ptr_to_mem>
 8009aa0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	791b      	ldrb	r3, [r3, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d13f      	bne.n	8009b2a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ab2:	d106      	bne.n	8009ac2 <mem_trim+0xfa>
 8009ab4:	4b42      	ldr	r3, [pc, #264]	; (8009bc0 <mem_trim+0x1f8>)
 8009ab6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009aba:	4946      	ldr	r1, [pc, #280]	; (8009bd4 <mem_trim+0x20c>)
 8009abc:	4842      	ldr	r0, [pc, #264]	; (8009bc8 <mem_trim+0x200>)
 8009abe:	f00a fd85 	bl	80145cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009ac8:	8afa      	ldrh	r2, [r7, #22]
 8009aca:	8bfb      	ldrh	r3, [r7, #30]
 8009acc:	4413      	add	r3, r2
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009ad4:	4b40      	ldr	r3, [pc, #256]	; (8009bd8 <mem_trim+0x210>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d106      	bne.n	8009aec <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8009ade:	89fb      	ldrh	r3, [r7, #14]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff fd8d 	bl	8009600 <ptr_to_mem>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4a3b      	ldr	r2, [pc, #236]	; (8009bd8 <mem_trim+0x210>)
 8009aea:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009aec:	89fb      	ldrh	r3, [r7, #14]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff fd86 	bl	8009600 <ptr_to_mem>
 8009af4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2200      	movs	r2, #0
 8009afa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	89ba      	ldrh	r2, [r7, #12]
 8009b00:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	8afa      	ldrh	r2, [r7, #22]
 8009b06:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	89fa      	ldrh	r2, [r7, #14]
 8009b0c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b16:	d047      	beq.n	8009ba8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff fd6f 	bl	8009600 <ptr_to_mem>
 8009b22:	4602      	mov	r2, r0
 8009b24:	89fb      	ldrh	r3, [r7, #14]
 8009b26:	8053      	strh	r3, [r2, #2]
 8009b28:	e03e      	b.n	8009ba8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009b2a:	8bfb      	ldrh	r3, [r7, #30]
 8009b2c:	f103 0214 	add.w	r2, r3, #20
 8009b30:	8abb      	ldrh	r3, [r7, #20]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d838      	bhi.n	8009ba8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b36:	8afa      	ldrh	r2, [r7, #22]
 8009b38:	8bfb      	ldrh	r3, [r7, #30]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	3308      	adds	r3, #8
 8009b40:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b4a:	d106      	bne.n	8009b5a <mem_trim+0x192>
 8009b4c:	4b1c      	ldr	r3, [pc, #112]	; (8009bc0 <mem_trim+0x1f8>)
 8009b4e:	f240 3216 	movw	r2, #790	; 0x316
 8009b52:	4920      	ldr	r1, [pc, #128]	; (8009bd4 <mem_trim+0x20c>)
 8009b54:	481c      	ldr	r0, [pc, #112]	; (8009bc8 <mem_trim+0x200>)
 8009b56:	f00a fd39 	bl	80145cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009b5a:	89fb      	ldrh	r3, [r7, #14]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7ff fd4f 	bl	8009600 <ptr_to_mem>
 8009b62:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009b64:	4b1c      	ldr	r3, [pc, #112]	; (8009bd8 <mem_trim+0x210>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d202      	bcs.n	8009b74 <mem_trim+0x1ac>
      lfree = mem2;
 8009b6e:	4a1a      	ldr	r2, [pc, #104]	; (8009bd8 <mem_trim+0x210>)
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2200      	movs	r2, #0
 8009b78:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	881a      	ldrh	r2, [r3, #0]
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	8afa      	ldrh	r2, [r7, #22]
 8009b86:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	89fa      	ldrh	r2, [r7, #14]
 8009b8c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b96:	d007      	beq.n	8009ba8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff fd2f 	bl	8009600 <ptr_to_mem>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	89fb      	ldrh	r3, [r7, #14]
 8009ba6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009ba8:	4809      	ldr	r0, [pc, #36]	; (8009bd0 <mem_trim+0x208>)
 8009baa:	f00a fc76 	bl	801449a <sys_mutex_unlock>
  return rmem;
 8009bae:	687b      	ldr	r3, [r7, #4]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20004054 	.word	0x20004054
 8009bbc:	20004058 	.word	0x20004058
 8009bc0:	0801620c 	.word	0x0801620c
 8009bc4:	08016398 	.word	0x08016398
 8009bc8:	08016254 	.word	0x08016254
 8009bcc:	080163b0 	.word	0x080163b0
 8009bd0:	2000405c 	.word	0x2000405c
 8009bd4:	080163d0 	.word	0x080163d0
 8009bd8:	20004060 	.word	0x20004060

08009bdc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <mem_malloc+0x14>
    return NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e0e2      	b.n	8009db6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009bf0:	88fb      	ldrh	r3, [r7, #6]
 8009bf2:	3303      	adds	r3, #3
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009bfc:	8bbb      	ldrh	r3, [r7, #28]
 8009bfe:	2b0b      	cmp	r3, #11
 8009c00:	d801      	bhi.n	8009c06 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009c02:	230c      	movs	r3, #12
 8009c04:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009c06:	8bbb      	ldrh	r3, [r7, #28]
 8009c08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009c0c:	d803      	bhi.n	8009c16 <mem_malloc+0x3a>
 8009c0e:	8bba      	ldrh	r2, [r7, #28]
 8009c10:	88fb      	ldrh	r3, [r7, #6]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d201      	bcs.n	8009c1a <mem_malloc+0x3e>
    return NULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	e0cd      	b.n	8009db6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009c1a:	4869      	ldr	r0, [pc, #420]	; (8009dc0 <mem_malloc+0x1e4>)
 8009c1c:	f00a fc2e 	bl	801447c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c20:	4b68      	ldr	r3, [pc, #416]	; (8009dc4 <mem_malloc+0x1e8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff fcfd 	bl	8009624 <mem_to_ptr>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	83fb      	strh	r3, [r7, #30]
 8009c2e:	e0b7      	b.n	8009da0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009c30:	8bfb      	ldrh	r3, [r7, #30]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7ff fce4 	bl	8009600 <ptr_to_mem>
 8009c38:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	791b      	ldrb	r3, [r3, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f040 80a7 	bne.w	8009d92 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	8bfb      	ldrh	r3, [r7, #30]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	f1a3 0208 	sub.w	r2, r3, #8
 8009c52:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009c54:	429a      	cmp	r2, r3
 8009c56:	f0c0 809c 	bcc.w	8009d92 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	8bfb      	ldrh	r3, [r7, #30]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	f1a3 0208 	sub.w	r2, r3, #8
 8009c68:	8bbb      	ldrh	r3, [r7, #28]
 8009c6a:	3314      	adds	r3, #20
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d333      	bcc.n	8009cd8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009c70:	8bfa      	ldrh	r2, [r7, #30]
 8009c72:	8bbb      	ldrh	r3, [r7, #28]
 8009c74:	4413      	add	r3, r2
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	3308      	adds	r3, #8
 8009c7a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009c7c:	8a7b      	ldrh	r3, [r7, #18]
 8009c7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009c82:	d106      	bne.n	8009c92 <mem_malloc+0xb6>
 8009c84:	4b50      	ldr	r3, [pc, #320]	; (8009dc8 <mem_malloc+0x1ec>)
 8009c86:	f240 3287 	movw	r2, #903	; 0x387
 8009c8a:	4950      	ldr	r1, [pc, #320]	; (8009dcc <mem_malloc+0x1f0>)
 8009c8c:	4850      	ldr	r0, [pc, #320]	; (8009dd0 <mem_malloc+0x1f4>)
 8009c8e:	f00a fc9d 	bl	80145cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009c92:	8a7b      	ldrh	r3, [r7, #18]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fcb3 	bl	8009600 <ptr_to_mem>
 8009c9a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	881a      	ldrh	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8bfa      	ldrh	r2, [r7, #30]
 8009cae:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	8a7a      	ldrh	r2, [r7, #18]
 8009cb4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	881b      	ldrh	r3, [r3, #0]
 8009cc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009cc4:	d00b      	beq.n	8009cde <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7ff fc98 	bl	8009600 <ptr_to_mem>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	8a7b      	ldrh	r3, [r7, #18]
 8009cd4:	8053      	strh	r3, [r2, #2]
 8009cd6:	e002      	b.n	8009cde <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009cde:	4b39      	ldr	r3, [pc, #228]	; (8009dc4 <mem_malloc+0x1e8>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d127      	bne.n	8009d38 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009ce8:	4b36      	ldr	r3, [pc, #216]	; (8009dc4 <mem_malloc+0x1e8>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009cee:	e005      	b.n	8009cfc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff fc83 	bl	8009600 <ptr_to_mem>
 8009cfa:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	791b      	ldrb	r3, [r3, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <mem_malloc+0x132>
 8009d04:	4b33      	ldr	r3, [pc, #204]	; (8009dd4 <mem_malloc+0x1f8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69ba      	ldr	r2, [r7, #24]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d1f0      	bne.n	8009cf0 <mem_malloc+0x114>
          }
          lfree = cur;
 8009d0e:	4a2d      	ldr	r2, [pc, #180]	; (8009dc4 <mem_malloc+0x1e8>)
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009d14:	4b2b      	ldr	r3, [pc, #172]	; (8009dc4 <mem_malloc+0x1e8>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	4b2e      	ldr	r3, [pc, #184]	; (8009dd4 <mem_malloc+0x1f8>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d00b      	beq.n	8009d38 <mem_malloc+0x15c>
 8009d20:	4b28      	ldr	r3, [pc, #160]	; (8009dc4 <mem_malloc+0x1e8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	791b      	ldrb	r3, [r3, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d006      	beq.n	8009d38 <mem_malloc+0x15c>
 8009d2a:	4b27      	ldr	r3, [pc, #156]	; (8009dc8 <mem_malloc+0x1ec>)
 8009d2c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009d30:	4929      	ldr	r1, [pc, #164]	; (8009dd8 <mem_malloc+0x1fc>)
 8009d32:	4827      	ldr	r0, [pc, #156]	; (8009dd0 <mem_malloc+0x1f4>)
 8009d34:	f00a fc4a 	bl	80145cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009d38:	4821      	ldr	r0, [pc, #132]	; (8009dc0 <mem_malloc+0x1e4>)
 8009d3a:	f00a fbae 	bl	801449a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009d3e:	8bba      	ldrh	r2, [r7, #28]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	4413      	add	r3, r2
 8009d44:	3308      	adds	r3, #8
 8009d46:	4a23      	ldr	r2, [pc, #140]	; (8009dd4 <mem_malloc+0x1f8>)
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d906      	bls.n	8009d5c <mem_malloc+0x180>
 8009d4e:	4b1e      	ldr	r3, [pc, #120]	; (8009dc8 <mem_malloc+0x1ec>)
 8009d50:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009d54:	4921      	ldr	r1, [pc, #132]	; (8009ddc <mem_malloc+0x200>)
 8009d56:	481e      	ldr	r0, [pc, #120]	; (8009dd0 <mem_malloc+0x1f4>)
 8009d58:	f00a fc38 	bl	80145cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	f003 0303 	and.w	r3, r3, #3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d006      	beq.n	8009d74 <mem_malloc+0x198>
 8009d66:	4b18      	ldr	r3, [pc, #96]	; (8009dc8 <mem_malloc+0x1ec>)
 8009d68:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009d6c:	491c      	ldr	r1, [pc, #112]	; (8009de0 <mem_malloc+0x204>)
 8009d6e:	4818      	ldr	r0, [pc, #96]	; (8009dd0 <mem_malloc+0x1f4>)
 8009d70:	f00a fc2c 	bl	80145cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d006      	beq.n	8009d8c <mem_malloc+0x1b0>
 8009d7e:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <mem_malloc+0x1ec>)
 8009d80:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009d84:	4917      	ldr	r1, [pc, #92]	; (8009de4 <mem_malloc+0x208>)
 8009d86:	4812      	ldr	r0, [pc, #72]	; (8009dd0 <mem_malloc+0x1f4>)
 8009d88:	f00a fc20 	bl	80145cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	3308      	adds	r3, #8
 8009d90:	e011      	b.n	8009db6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009d92:	8bfb      	ldrh	r3, [r7, #30]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff fc33 	bl	8009600 <ptr_to_mem>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009da0:	8bfa      	ldrh	r2, [r7, #30]
 8009da2:	8bbb      	ldrh	r3, [r7, #28]
 8009da4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009da8:	429a      	cmp	r2, r3
 8009daa:	f4ff af41 	bcc.w	8009c30 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009dae:	4804      	ldr	r0, [pc, #16]	; (8009dc0 <mem_malloc+0x1e4>)
 8009db0:	f00a fb73 	bl	801449a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	2000405c 	.word	0x2000405c
 8009dc4:	20004060 	.word	0x20004060
 8009dc8:	0801620c 	.word	0x0801620c
 8009dcc:	080163d0 	.word	0x080163d0
 8009dd0:	08016254 	.word	0x08016254
 8009dd4:	20004058 	.word	0x20004058
 8009dd8:	080163e4 	.word	0x080163e4
 8009ddc:	08016400 	.word	0x08016400
 8009de0:	08016430 	.word	0x08016430
 8009de4:	08016460 	.word	0x08016460

08009de8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	3303      	adds	r3, #3
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009e04:	2300      	movs	r3, #0
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	e011      	b.n	8009e2e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4413      	add	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	885b      	ldrh	r3, [r3, #2]
 8009e32:	461a      	mov	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4293      	cmp	r3, r2
 8009e38:	dbe7      	blt.n	8009e0a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009e3a:	bf00      	nop
 8009e3c:	bf00      	nop
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e4e:	2300      	movs	r3, #0
 8009e50:	80fb      	strh	r3, [r7, #6]
 8009e52:	e009      	b.n	8009e68 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009e54:	88fb      	ldrh	r3, [r7, #6]
 8009e56:	4a08      	ldr	r2, [pc, #32]	; (8009e78 <memp_init+0x30>)
 8009e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7ff ffc3 	bl	8009de8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	3301      	adds	r3, #1
 8009e66:	80fb      	strh	r3, [r7, #6]
 8009e68:	88fb      	ldrh	r3, [r7, #6]
 8009e6a:	2b0c      	cmp	r3, #12
 8009e6c:	d9f2      	bls.n	8009e54 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	08018c6c 	.word	0x08018c6c

08009e7c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009e84:	f00a fb3c 	bl	8014500 <sys_arch_protect>
 8009e88:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d015      	beq.n	8009ec4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	6812      	ldr	r2, [r2, #0]
 8009ea0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d006      	beq.n	8009eba <do_memp_malloc_pool+0x3e>
 8009eac:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <do_memp_malloc_pool+0x58>)
 8009eae:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009eb2:	4909      	ldr	r1, [pc, #36]	; (8009ed8 <do_memp_malloc_pool+0x5c>)
 8009eb4:	4809      	ldr	r0, [pc, #36]	; (8009edc <do_memp_malloc_pool+0x60>)
 8009eb6:	f00a fb89 	bl	80145cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f00a fb2e 	bl	801451c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	e003      	b.n	8009ecc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f00a fb29 	bl	801451c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	08016484 	.word	0x08016484
 8009ed8:	080164b4 	.word	0x080164b4
 8009edc:	080164d8 	.word	0x080164d8

08009ee0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	2b0c      	cmp	r3, #12
 8009eee:	d908      	bls.n	8009f02 <memp_malloc+0x22>
 8009ef0:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <memp_malloc+0x3c>)
 8009ef2:	f240 1257 	movw	r2, #343	; 0x157
 8009ef6:	490a      	ldr	r1, [pc, #40]	; (8009f20 <memp_malloc+0x40>)
 8009ef8:	480a      	ldr	r0, [pc, #40]	; (8009f24 <memp_malloc+0x44>)
 8009efa:	f00a fb67 	bl	80145cc <iprintf>
 8009efe:	2300      	movs	r3, #0
 8009f00:	e008      	b.n	8009f14 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <memp_malloc+0x48>)
 8009f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7ff ffb6 	bl	8009e7c <do_memp_malloc_pool>
 8009f10:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009f12:	68fb      	ldr	r3, [r7, #12]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	08016484 	.word	0x08016484
 8009f20:	08016514 	.word	0x08016514
 8009f24:	080164d8 	.word	0x080164d8
 8009f28:	08018c6c 	.word	0x08018c6c

08009f2c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	f003 0303 	and.w	r3, r3, #3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d006      	beq.n	8009f4e <do_memp_free_pool+0x22>
 8009f40:	4b0d      	ldr	r3, [pc, #52]	; (8009f78 <do_memp_free_pool+0x4c>)
 8009f42:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009f46:	490d      	ldr	r1, [pc, #52]	; (8009f7c <do_memp_free_pool+0x50>)
 8009f48:	480d      	ldr	r0, [pc, #52]	; (8009f80 <do_memp_free_pool+0x54>)
 8009f4a:	f00a fb3f 	bl	80145cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009f52:	f00a fad5 	bl	8014500 <sys_arch_protect>
 8009f56:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009f6a:	68b8      	ldr	r0, [r7, #8]
 8009f6c:	f00a fad6 	bl	801451c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009f70:	bf00      	nop
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	08016484 	.word	0x08016484
 8009f7c:	08016534 	.word	0x08016534
 8009f80:	080164d8 	.word	0x080164d8

08009f84 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	6039      	str	r1, [r7, #0]
 8009f8e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	2b0c      	cmp	r3, #12
 8009f94:	d907      	bls.n	8009fa6 <memp_free+0x22>
 8009f96:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <memp_free+0x44>)
 8009f98:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009f9c:	490b      	ldr	r1, [pc, #44]	; (8009fcc <memp_free+0x48>)
 8009f9e:	480c      	ldr	r0, [pc, #48]	; (8009fd0 <memp_free+0x4c>)
 8009fa0:	f00a fb14 	bl	80145cc <iprintf>
 8009fa4:	e00c      	b.n	8009fc0 <memp_free+0x3c>

  if (mem == NULL) {
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d008      	beq.n	8009fbe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	4a09      	ldr	r2, [pc, #36]	; (8009fd4 <memp_free+0x50>)
 8009fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7ff ffb8 	bl	8009f2c <do_memp_free_pool>
 8009fbc:	e000      	b.n	8009fc0 <memp_free+0x3c>
    return;
 8009fbe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	08016484 	.word	0x08016484
 8009fcc:	08016554 	.word	0x08016554
 8009fd0:	080164d8 	.word	0x080164d8
 8009fd4:	08018c6c 	.word	0x08018c6c

08009fd8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009fdc:	bf00      	nop
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
	...

08009fe8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d108      	bne.n	800a00e <netif_add+0x26>
 8009ffc:	4b57      	ldr	r3, [pc, #348]	; (800a15c <netif_add+0x174>)
 8009ffe:	f240 1227 	movw	r2, #295	; 0x127
 800a002:	4957      	ldr	r1, [pc, #348]	; (800a160 <netif_add+0x178>)
 800a004:	4857      	ldr	r0, [pc, #348]	; (800a164 <netif_add+0x17c>)
 800a006:	f00a fae1 	bl	80145cc <iprintf>
 800a00a:	2300      	movs	r3, #0
 800a00c:	e0a2      	b.n	800a154 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	d108      	bne.n	800a026 <netif_add+0x3e>
 800a014:	4b51      	ldr	r3, [pc, #324]	; (800a15c <netif_add+0x174>)
 800a016:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a01a:	4953      	ldr	r1, [pc, #332]	; (800a168 <netif_add+0x180>)
 800a01c:	4851      	ldr	r0, [pc, #324]	; (800a164 <netif_add+0x17c>)
 800a01e:	f00a fad5 	bl	80145cc <iprintf>
 800a022:	2300      	movs	r3, #0
 800a024:	e096      	b.n	800a154 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a02c:	4b4f      	ldr	r3, [pc, #316]	; (800a16c <netif_add+0x184>)
 800a02e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a036:	4b4d      	ldr	r3, [pc, #308]	; (800a16c <netif_add+0x184>)
 800a038:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a040:	4b4a      	ldr	r3, [pc, #296]	; (800a16c <netif_add+0x184>)
 800a042:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4a45      	ldr	r2, [pc, #276]	; (800a170 <netif_add+0x188>)
 800a05a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a3a      	ldr	r2, [r7, #32]
 800a074:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a076:	4b3f      	ldr	r3, [pc, #252]	; (800a174 <netif_add+0x18c>)
 800a078:	781a      	ldrb	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a084:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	68b9      	ldr	r1, [r7, #8]
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 f913 	bl	800a2b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	4798      	blx	r3
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <netif_add+0xba>
    return NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e058      	b.n	800a154 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0a8:	2bff      	cmp	r3, #255	; 0xff
 800a0aa:	d103      	bne.n	800a0b4 <netif_add+0xcc>
        netif->num = 0;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a0b8:	4b2f      	ldr	r3, [pc, #188]	; (800a178 <netif_add+0x190>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	617b      	str	r3, [r7, #20]
 800a0be:	e02b      	b.n	800a118 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d106      	bne.n	800a0d6 <netif_add+0xee>
 800a0c8:	4b24      	ldr	r3, [pc, #144]	; (800a15c <netif_add+0x174>)
 800a0ca:	f240 128b 	movw	r2, #395	; 0x18b
 800a0ce:	492b      	ldr	r1, [pc, #172]	; (800a17c <netif_add+0x194>)
 800a0d0:	4824      	ldr	r0, [pc, #144]	; (800a164 <netif_add+0x17c>)
 800a0d2:	f00a fa7b 	bl	80145cc <iprintf>
        num_netifs++;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2bff      	cmp	r3, #255	; 0xff
 800a0e0:	dd06      	ble.n	800a0f0 <netif_add+0x108>
 800a0e2:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <netif_add+0x174>)
 800a0e4:	f240 128d 	movw	r2, #397	; 0x18d
 800a0e8:	4925      	ldr	r1, [pc, #148]	; (800a180 <netif_add+0x198>)
 800a0ea:	481e      	ldr	r0, [pc, #120]	; (800a164 <netif_add+0x17c>)
 800a0ec:	f00a fa6e 	bl	80145cc <iprintf>
        if (netif2->num == netif->num) {
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d108      	bne.n	800a112 <netif_add+0x12a>
          netif->num++;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a106:	3301      	adds	r3, #1
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a110:	e005      	b.n	800a11e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1d0      	bne.n	800a0c0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1be      	bne.n	800a0a2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a12a:	2bfe      	cmp	r3, #254	; 0xfe
 800a12c:	d103      	bne.n	800a136 <netif_add+0x14e>
    netif_num = 0;
 800a12e:	4b11      	ldr	r3, [pc, #68]	; (800a174 <netif_add+0x18c>)
 800a130:	2200      	movs	r2, #0
 800a132:	701a      	strb	r2, [r3, #0]
 800a134:	e006      	b.n	800a144 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a13c:	3301      	adds	r3, #1
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <netif_add+0x18c>)
 800a142:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a144:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <netif_add+0x190>)
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a14c:	4a0a      	ldr	r2, [pc, #40]	; (800a178 <netif_add+0x190>)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a152:	68fb      	ldr	r3, [r7, #12]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	08016570 	.word	0x08016570
 800a160:	08016604 	.word	0x08016604
 800a164:	080165c0 	.word	0x080165c0
 800a168:	08016620 	.word	0x08016620
 800a16c:	08018ce0 	.word	0x08018ce0
 800a170:	0800a593 	.word	0x0800a593
 800a174:	20004098 	.word	0x20004098
 800a178:	2000aab8 	.word	0x2000aab8
 800a17c:	08016644 	.word	0x08016644
 800a180:	08016658 	.word	0x08016658

0800a184 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f002 fe4f 	bl	800ce34 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f007 fcfd 	bl	8011b98 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a19e:	bf00      	nop
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d106      	bne.n	800a1c8 <netif_do_set_ipaddr+0x20>
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <netif_do_set_ipaddr+0x88>)
 800a1bc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a1c0:	491c      	ldr	r1, [pc, #112]	; (800a234 <netif_do_set_ipaddr+0x8c>)
 800a1c2:	481d      	ldr	r0, [pc, #116]	; (800a238 <netif_do_set_ipaddr+0x90>)
 800a1c4:	f00a fa02 	bl	80145cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d106      	bne.n	800a1dc <netif_do_set_ipaddr+0x34>
 800a1ce:	4b18      	ldr	r3, [pc, #96]	; (800a230 <netif_do_set_ipaddr+0x88>)
 800a1d0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a1d4:	4917      	ldr	r1, [pc, #92]	; (800a234 <netif_do_set_ipaddr+0x8c>)
 800a1d6:	4818      	ldr	r0, [pc, #96]	; (800a238 <netif_do_set_ipaddr+0x90>)
 800a1d8:	f00a f9f8 	bl	80145cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d01c      	beq.n	800a224 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a1fa:	f107 0314 	add.w	r3, r7, #20
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff ffbf 	bl	800a184 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <netif_do_set_ipaddr+0x6a>
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	e000      	b.n	800a214 <netif_do_set_ipaddr+0x6c>
 800a212:	2300      	movs	r3, #0
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a218:	2101      	movs	r1, #1
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f8d2 	bl	800a3c4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a220:	2301      	movs	r3, #1
 800a222:	e000      	b.n	800a226 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	08016570 	.word	0x08016570
 800a234:	08016688 	.word	0x08016688
 800a238:	080165c0 	.word	0x080165c0

0800a23c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3308      	adds	r3, #8
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	429a      	cmp	r2, r3
 800a254:	d00a      	beq.n	800a26c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <netif_do_set_netmask+0x26>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	e000      	b.n	800a264 <netif_do_set_netmask+0x28>
 800a262:	2300      	movs	r3, #0
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a268:	2301      	movs	r3, #1
 800a26a:	e000      	b.n	800a26e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b085      	sub	sp, #20
 800a27e:	af00      	add	r7, sp, #0
 800a280:	60f8      	str	r0, [r7, #12]
 800a282:	60b9      	str	r1, [r7, #8]
 800a284:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	330c      	adds	r3, #12
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	429a      	cmp	r2, r3
 800a292:	d00a      	beq.n	800a2aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d002      	beq.n	800a2a0 <netif_do_set_gw+0x26>
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	e000      	b.n	800a2a2 <netif_do_set_gw+0x28>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a2d4:	4b1c      	ldr	r3, [pc, #112]	; (800a348 <netif_set_addr+0x90>)
 800a2d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a2de:	4b1a      	ldr	r3, [pc, #104]	; (800a348 <netif_set_addr+0x90>)
 800a2e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <netif_set_addr+0x90>)
 800a2ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <netif_set_addr+0x42>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <netif_set_addr+0x46>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e000      	b.n	800a300 <netif_set_addr+0x48>
 800a2fe:	2300      	movs	r3, #0
 800a300:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d006      	beq.n	800a316 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a308:	f107 0310 	add.w	r3, r7, #16
 800a30c:	461a      	mov	r2, r3
 800a30e:	68b9      	ldr	r1, [r7, #8]
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f7ff ff49 	bl	800a1a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a316:	69fa      	ldr	r2, [r7, #28]
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7ff ff8e 	bl	800a23c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff ffa8 	bl	800a27a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d106      	bne.n	800a33e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a330:	f107 0310 	add.w	r3, r7, #16
 800a334:	461a      	mov	r2, r3
 800a336:	68b9      	ldr	r1, [r7, #8]
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f7ff ff35 	bl	800a1a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a33e:	bf00      	nop
 800a340:	3720      	adds	r7, #32
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	08018ce0 	.word	0x08018ce0

0800a34c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a354:	4a04      	ldr	r2, [pc, #16]	; (800a368 <netif_set_default+0x1c>)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a35a:	bf00      	nop
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	2000aabc 	.word	0x2000aabc

0800a36c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d107      	bne.n	800a38a <netif_set_up+0x1e>
 800a37a:	4b0f      	ldr	r3, [pc, #60]	; (800a3b8 <netif_set_up+0x4c>)
 800a37c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a380:	490e      	ldr	r1, [pc, #56]	; (800a3bc <netif_set_up+0x50>)
 800a382:	480f      	ldr	r0, [pc, #60]	; (800a3c0 <netif_set_up+0x54>)
 800a384:	f00a f922 	bl	80145cc <iprintf>
 800a388:	e013      	b.n	800a3b2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10c      	bne.n	800a3b2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a39e:	f043 0301 	orr.w	r3, r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a3aa:	2103      	movs	r1, #3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f809 	bl	800a3c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	08016570 	.word	0x08016570
 800a3bc:	080166f8 	.word	0x080166f8
 800a3c0:	080165c0 	.word	0x080165c0

0800a3c4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d106      	bne.n	800a3e4 <netif_issue_reports+0x20>
 800a3d6:	4b18      	ldr	r3, [pc, #96]	; (800a438 <netif_issue_reports+0x74>)
 800a3d8:	f240 326d 	movw	r2, #877	; 0x36d
 800a3dc:	4917      	ldr	r1, [pc, #92]	; (800a43c <netif_issue_reports+0x78>)
 800a3de:	4818      	ldr	r0, [pc, #96]	; (800a440 <netif_issue_reports+0x7c>)
 800a3e0:	f00a f8f4 	bl	80145cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d01e      	beq.n	800a430 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3f8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d017      	beq.n	800a430 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	d013      	beq.n	800a432 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3304      	adds	r3, #4
 800a40e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00e      	beq.n	800a432 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a41a:	f003 0308 	and.w	r3, r3, #8
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d007      	beq.n	800a432 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3304      	adds	r3, #4
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f008 fb1f 	bl	8012a6c <etharp_request>
 800a42e:	e000      	b.n	800a432 <netif_issue_reports+0x6e>
    return;
 800a430:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	08016570 	.word	0x08016570
 800a43c:	08016714 	.word	0x08016714
 800a440:	080165c0 	.word	0x080165c0

0800a444 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d107      	bne.n	800a462 <netif_set_down+0x1e>
 800a452:	4b12      	ldr	r3, [pc, #72]	; (800a49c <netif_set_down+0x58>)
 800a454:	f240 329b 	movw	r2, #923	; 0x39b
 800a458:	4911      	ldr	r1, [pc, #68]	; (800a4a0 <netif_set_down+0x5c>)
 800a45a:	4812      	ldr	r0, [pc, #72]	; (800a4a4 <netif_set_down+0x60>)
 800a45c:	f00a f8b6 	bl	80145cc <iprintf>
 800a460:	e019      	b.n	800a496 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d012      	beq.n	800a496 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a476:	f023 0301 	bic.w	r3, r3, #1
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a488:	f003 0308 	and.w	r3, r3, #8
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f007 fea9 	bl	80121e8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	08016570 	.word	0x08016570
 800a4a0:	08016738 	.word	0x08016738
 800a4a4:	080165c0 	.word	0x080165c0

0800a4a8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d107      	bne.n	800a4c6 <netif_set_link_up+0x1e>
 800a4b6:	4b13      	ldr	r3, [pc, #76]	; (800a504 <netif_set_link_up+0x5c>)
 800a4b8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a4bc:	4912      	ldr	r1, [pc, #72]	; (800a508 <netif_set_link_up+0x60>)
 800a4be:	4813      	ldr	r0, [pc, #76]	; (800a50c <netif_set_link_up+0x64>)
 800a4c0:	f00a f884 	bl	80145cc <iprintf>
 800a4c4:	e01b      	b.n	800a4fe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d114      	bne.n	800a4fe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4da:	f043 0304 	orr.w	r3, r3, #4
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a4e6:	2103      	movs	r1, #3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff ff6b 	bl	800a3c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <netif_set_link_up+0x56>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	08016570 	.word	0x08016570
 800a508:	08016758 	.word	0x08016758
 800a50c:	080165c0 	.word	0x080165c0

0800a510 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d107      	bne.n	800a52e <netif_set_link_down+0x1e>
 800a51e:	4b11      	ldr	r3, [pc, #68]	; (800a564 <netif_set_link_down+0x54>)
 800a520:	f240 4206 	movw	r2, #1030	; 0x406
 800a524:	4910      	ldr	r1, [pc, #64]	; (800a568 <netif_set_link_down+0x58>)
 800a526:	4811      	ldr	r0, [pc, #68]	; (800a56c <netif_set_link_down+0x5c>)
 800a528:	f00a f850 	bl	80145cc <iprintf>
 800a52c:	e017      	b.n	800a55e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d010      	beq.n	800a55e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a542:	f023 0304 	bic.w	r3, r3, #4
 800a546:	b2da      	uxtb	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <netif_set_link_down+0x4e>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	08016570 	.word	0x08016570
 800a568:	0801677c 	.word	0x0801677c
 800a56c:	080165c0 	.word	0x080165c0

0800a570 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	61da      	str	r2, [r3, #28]
  }
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a592:	b480      	push	{r7}
 800a594:	b085      	sub	sp, #20
 800a596:	af00      	add	r7, sp, #0
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a59e:	f06f 030b 	mvn.w	r3, #11
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a5ba:	79fb      	ldrb	r3, [r7, #7]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d013      	beq.n	800a5e8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a5c0:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <netif_get_by_index+0x48>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	e00c      	b.n	800a5e2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	79fa      	ldrb	r2, [r7, #7]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d101      	bne.n	800a5dc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	e006      	b.n	800a5ea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	60fb      	str	r3, [r7, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1ef      	bne.n	800a5c8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	2000aab8 	.word	0x2000aab8

0800a5fc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a602:	f009 ff7d 	bl	8014500 <sys_arch_protect>
 800a606:	6038      	str	r0, [r7, #0]
 800a608:	4b0d      	ldr	r3, [pc, #52]	; (800a640 <pbuf_free_ooseq+0x44>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	6838      	ldr	r0, [r7, #0]
 800a610:	f009 ff84 	bl	801451c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a614:	4b0b      	ldr	r3, [pc, #44]	; (800a644 <pbuf_free_ooseq+0x48>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	607b      	str	r3, [r7, #4]
 800a61a:	e00a      	b.n	800a632 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f002 fc43 	bl	800ceb0 <tcp_free_ooseq>
      return;
 800a62a:	e005      	b.n	800a638 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	607b      	str	r3, [r7, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1f1      	bne.n	800a61c <pbuf_free_ooseq+0x20>
    }
  }
}
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	2000aac0 	.word	0x2000aac0
 800a644:	2000aac8 	.word	0x2000aac8

0800a648 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a650:	f7ff ffd4 	bl	800a5fc <pbuf_free_ooseq>
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a662:	f009 ff4d 	bl	8014500 <sys_arch_protect>
 800a666:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a668:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <pbuf_pool_is_empty+0x4c>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a66e:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <pbuf_pool_is_empty+0x4c>)
 800a670:	2201      	movs	r2, #1
 800a672:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f009 ff51 	bl	801451c <sys_arch_unprotect>

  if (!queued) {
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10f      	bne.n	800a6a0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a680:	2100      	movs	r1, #0
 800a682:	480a      	ldr	r0, [pc, #40]	; (800a6ac <pbuf_pool_is_empty+0x50>)
 800a684:	f7fe fed6 	bl	8009434 <tcpip_try_callback>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d008      	beq.n	800a6a0 <pbuf_pool_is_empty+0x44>
 800a68e:	f009 ff37 	bl	8014500 <sys_arch_protect>
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <pbuf_pool_is_empty+0x4c>)
 800a696:	2200      	movs	r2, #0
 800a698:	701a      	strb	r2, [r3, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f009 ff3e 	bl	801451c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a6a0:	bf00      	nop
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	2000aac0 	.word	0x2000aac0
 800a6ac:	0800a649 	.word	0x0800a649

0800a6b0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	461a      	mov	r2, r3
 800a6be:	460b      	mov	r3, r1
 800a6c0:	80fb      	strh	r3, [r7, #6]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	88fa      	ldrh	r2, [r7, #6]
 800a6d6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	88ba      	ldrh	r2, [r7, #4]
 800a6dc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a6de:	8b3b      	ldrh	r3, [r7, #24]
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	7f3a      	ldrb	r2, [r7, #28]
 800a6ea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	73da      	strb	r2, [r3, #15]
}
 800a6f8:	bf00      	nop
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08c      	sub	sp, #48	; 0x30
 800a708:	af02      	add	r7, sp, #8
 800a70a:	4603      	mov	r3, r0
 800a70c:	71fb      	strb	r3, [r7, #7]
 800a70e:	460b      	mov	r3, r1
 800a710:	80bb      	strh	r3, [r7, #4]
 800a712:	4613      	mov	r3, r2
 800a714:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a716:	79fb      	ldrb	r3, [r7, #7]
 800a718:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a71a:	887b      	ldrh	r3, [r7, #2]
 800a71c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a720:	d07f      	beq.n	800a822 <pbuf_alloc+0x11e>
 800a722:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a726:	f300 80c8 	bgt.w	800a8ba <pbuf_alloc+0x1b6>
 800a72a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a72e:	d010      	beq.n	800a752 <pbuf_alloc+0x4e>
 800a730:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a734:	f300 80c1 	bgt.w	800a8ba <pbuf_alloc+0x1b6>
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d002      	beq.n	800a742 <pbuf_alloc+0x3e>
 800a73c:	2b41      	cmp	r3, #65	; 0x41
 800a73e:	f040 80bc 	bne.w	800a8ba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a742:	887a      	ldrh	r2, [r7, #2]
 800a744:	88bb      	ldrh	r3, [r7, #4]
 800a746:	4619      	mov	r1, r3
 800a748:	2000      	movs	r0, #0
 800a74a:	f000 f8d1 	bl	800a8f0 <pbuf_alloc_reference>
 800a74e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a750:	e0bd      	b.n	800a8ce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a752:	2300      	movs	r3, #0
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a756:	2300      	movs	r3, #0
 800a758:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a75a:	88bb      	ldrh	r3, [r7, #4]
 800a75c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a75e:	200c      	movs	r0, #12
 800a760:	f7ff fbbe 	bl	8009ee0 <memp_malloc>
 800a764:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d109      	bne.n	800a780 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a76c:	f7ff ff76 	bl	800a65c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	2b00      	cmp	r3, #0
 800a774:	d002      	beq.n	800a77c <pbuf_alloc+0x78>
            pbuf_free(p);
 800a776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a778:	f000 faa8 	bl	800accc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	e0a7      	b.n	800a8d0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a782:	3303      	adds	r3, #3
 800a784:	b29b      	uxth	r3, r3
 800a786:	f023 0303 	bic.w	r3, r3, #3
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a790:	b29b      	uxth	r3, r3
 800a792:	8b7a      	ldrh	r2, [r7, #26]
 800a794:	4293      	cmp	r3, r2
 800a796:	bf28      	it	cs
 800a798:	4613      	movcs	r3, r2
 800a79a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a79c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a79e:	3310      	adds	r3, #16
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	3303      	adds	r3, #3
 800a7a6:	f023 0303 	bic.w	r3, r3, #3
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	89f9      	ldrh	r1, [r7, #14]
 800a7ae:	8b7a      	ldrh	r2, [r7, #26]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	887b      	ldrh	r3, [r7, #2]
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	6938      	ldr	r0, [r7, #16]
 800a7be:	f7ff ff77 	bl	800a6b0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f003 0303 	and.w	r3, r3, #3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d006      	beq.n	800a7dc <pbuf_alloc+0xd8>
 800a7ce:	4b42      	ldr	r3, [pc, #264]	; (800a8d8 <pbuf_alloc+0x1d4>)
 800a7d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7d4:	4941      	ldr	r1, [pc, #260]	; (800a8dc <pbuf_alloc+0x1d8>)
 800a7d6:	4842      	ldr	r0, [pc, #264]	; (800a8e0 <pbuf_alloc+0x1dc>)
 800a7d8:	f009 fef8 	bl	80145cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a7dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7de:	3303      	adds	r3, #3
 800a7e0:	f023 0303 	bic.w	r3, r3, #3
 800a7e4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a7e8:	d106      	bne.n	800a7f8 <pbuf_alloc+0xf4>
 800a7ea:	4b3b      	ldr	r3, [pc, #236]	; (800a8d8 <pbuf_alloc+0x1d4>)
 800a7ec:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a7f0:	493c      	ldr	r1, [pc, #240]	; (800a8e4 <pbuf_alloc+0x1e0>)
 800a7f2:	483b      	ldr	r0, [pc, #236]	; (800a8e0 <pbuf_alloc+0x1dc>)
 800a7f4:	f009 feea 	bl	80145cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d102      	bne.n	800a804 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	627b      	str	r3, [r7, #36]	; 0x24
 800a802:	e002      	b.n	800a80a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a80e:	8b7a      	ldrh	r2, [r7, #26]
 800a810:	89fb      	ldrh	r3, [r7, #14]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a816:	2300      	movs	r3, #0
 800a818:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a81a:	8b7b      	ldrh	r3, [r7, #26]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d19e      	bne.n	800a75e <pbuf_alloc+0x5a>
      break;
 800a820:	e055      	b.n	800a8ce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a824:	3303      	adds	r3, #3
 800a826:	b29b      	uxth	r3, r3
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	88bb      	ldrh	r3, [r7, #4]
 800a830:	3303      	adds	r3, #3
 800a832:	b29b      	uxth	r3, r3
 800a834:	f023 0303 	bic.w	r3, r3, #3
 800a838:	b29b      	uxth	r3, r3
 800a83a:	4413      	add	r3, r2
 800a83c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a83e:	8b3b      	ldrh	r3, [r7, #24]
 800a840:	3310      	adds	r3, #16
 800a842:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a844:	8b3a      	ldrh	r2, [r7, #24]
 800a846:	88bb      	ldrh	r3, [r7, #4]
 800a848:	3303      	adds	r3, #3
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	429a      	cmp	r2, r3
 800a850:	d306      	bcc.n	800a860 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a852:	8afa      	ldrh	r2, [r7, #22]
 800a854:	88bb      	ldrh	r3, [r7, #4]
 800a856:	3303      	adds	r3, #3
 800a858:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d201      	bcs.n	800a864 <pbuf_alloc+0x160>
        return NULL;
 800a860:	2300      	movs	r3, #0
 800a862:	e035      	b.n	800a8d0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a864:	8afb      	ldrh	r3, [r7, #22]
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff f9b8 	bl	8009bdc <mem_malloc>
 800a86c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <pbuf_alloc+0x174>
        return NULL;
 800a874:	2300      	movs	r3, #0
 800a876:	e02b      	b.n	800a8d0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a87a:	3310      	adds	r3, #16
 800a87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87e:	4413      	add	r3, r2
 800a880:	3303      	adds	r3, #3
 800a882:	f023 0303 	bic.w	r3, r3, #3
 800a886:	4618      	mov	r0, r3
 800a888:	88b9      	ldrh	r1, [r7, #4]
 800a88a:	88ba      	ldrh	r2, [r7, #4]
 800a88c:	2300      	movs	r3, #0
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	887b      	ldrh	r3, [r7, #2]
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	460b      	mov	r3, r1
 800a896:	4601      	mov	r1, r0
 800a898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a89a:	f7ff ff09 	bl	800a6b0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d010      	beq.n	800a8cc <pbuf_alloc+0x1c8>
 800a8aa:	4b0b      	ldr	r3, [pc, #44]	; (800a8d8 <pbuf_alloc+0x1d4>)
 800a8ac:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a8b0:	490d      	ldr	r1, [pc, #52]	; (800a8e8 <pbuf_alloc+0x1e4>)
 800a8b2:	480b      	ldr	r0, [pc, #44]	; (800a8e0 <pbuf_alloc+0x1dc>)
 800a8b4:	f009 fe8a 	bl	80145cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a8b8:	e008      	b.n	800a8cc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <pbuf_alloc+0x1d4>)
 800a8bc:	f240 1227 	movw	r2, #295	; 0x127
 800a8c0:	490a      	ldr	r1, [pc, #40]	; (800a8ec <pbuf_alloc+0x1e8>)
 800a8c2:	4807      	ldr	r0, [pc, #28]	; (800a8e0 <pbuf_alloc+0x1dc>)
 800a8c4:	f009 fe82 	bl	80145cc <iprintf>
      return NULL;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e001      	b.n	800a8d0 <pbuf_alloc+0x1cc>
      break;
 800a8cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3728      	adds	r7, #40	; 0x28
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	080167a0 	.word	0x080167a0
 800a8dc:	080167d0 	.word	0x080167d0
 800a8e0:	08016800 	.word	0x08016800
 800a8e4:	08016828 	.word	0x08016828
 800a8e8:	0801685c 	.word	0x0801685c
 800a8ec:	08016888 	.word	0x08016888

0800a8f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	807b      	strh	r3, [r7, #2]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a900:	883b      	ldrh	r3, [r7, #0]
 800a902:	2b41      	cmp	r3, #65	; 0x41
 800a904:	d009      	beq.n	800a91a <pbuf_alloc_reference+0x2a>
 800a906:	883b      	ldrh	r3, [r7, #0]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d006      	beq.n	800a91a <pbuf_alloc_reference+0x2a>
 800a90c:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <pbuf_alloc_reference+0x5c>)
 800a90e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a912:	490f      	ldr	r1, [pc, #60]	; (800a950 <pbuf_alloc_reference+0x60>)
 800a914:	480f      	ldr	r0, [pc, #60]	; (800a954 <pbuf_alloc_reference+0x64>)
 800a916:	f009 fe59 	bl	80145cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a91a:	200b      	movs	r0, #11
 800a91c:	f7ff fae0 	bl	8009ee0 <memp_malloc>
 800a920:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a928:	2300      	movs	r3, #0
 800a92a:	e00b      	b.n	800a944 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a92c:	8879      	ldrh	r1, [r7, #2]
 800a92e:	887a      	ldrh	r2, [r7, #2]
 800a930:	2300      	movs	r3, #0
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	883b      	ldrh	r3, [r7, #0]
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	460b      	mov	r3, r1
 800a93a:	6879      	ldr	r1, [r7, #4]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff feb7 	bl	800a6b0 <pbuf_init_alloced_pbuf>
  return p;
 800a942:	68fb      	ldr	r3, [r7, #12]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	080167a0 	.word	0x080167a0
 800a950:	080168a4 	.word	0x080168a4
 800a954:	08016800 	.word	0x08016800

0800a958 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af02      	add	r7, sp, #8
 800a95e:	607b      	str	r3, [r7, #4]
 800a960:	4603      	mov	r3, r0
 800a962:	73fb      	strb	r3, [r7, #15]
 800a964:	460b      	mov	r3, r1
 800a966:	81bb      	strh	r3, [r7, #12]
 800a968:	4613      	mov	r3, r2
 800a96a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a970:	8a7b      	ldrh	r3, [r7, #18]
 800a972:	3303      	adds	r3, #3
 800a974:	f023 0203 	bic.w	r2, r3, #3
 800a978:	89bb      	ldrh	r3, [r7, #12]
 800a97a:	441a      	add	r2, r3
 800a97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a97e:	429a      	cmp	r2, r3
 800a980:	d901      	bls.n	800a986 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a982:	2300      	movs	r3, #0
 800a984:	e018      	b.n	800a9b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d007      	beq.n	800a99c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a98c:	8a7b      	ldrh	r3, [r7, #18]
 800a98e:	3303      	adds	r3, #3
 800a990:	f023 0303 	bic.w	r3, r3, #3
 800a994:	6a3a      	ldr	r2, [r7, #32]
 800a996:	4413      	add	r3, r2
 800a998:	617b      	str	r3, [r7, #20]
 800a99a:	e001      	b.n	800a9a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a99c:	2300      	movs	r3, #0
 800a99e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	89b9      	ldrh	r1, [r7, #12]
 800a9a4:	89ba      	ldrh	r2, [r7, #12]
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	897b      	ldrh	r3, [r7, #10]
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	6979      	ldr	r1, [r7, #20]
 800a9b2:	f7ff fe7d 	bl	800a6b0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a9b6:	687b      	ldr	r3, [r7, #4]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3718      	adds	r7, #24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <pbuf_realloc+0x20>
 800a9d2:	4b3a      	ldr	r3, [pc, #232]	; (800aabc <pbuf_realloc+0xfc>)
 800a9d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a9d8:	4939      	ldr	r1, [pc, #228]	; (800aac0 <pbuf_realloc+0x100>)
 800a9da:	483a      	ldr	r0, [pc, #232]	; (800aac4 <pbuf_realloc+0x104>)
 800a9dc:	f009 fdf6 	bl	80145cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	891b      	ldrh	r3, [r3, #8]
 800a9e4:	887a      	ldrh	r2, [r7, #2]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d263      	bcs.n	800aab2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	891a      	ldrh	r2, [r3, #8]
 800a9ee:	887b      	ldrh	r3, [r7, #2]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a9f4:	887b      	ldrh	r3, [r7, #2]
 800a9f6:	817b      	strh	r3, [r7, #10]
  q = p;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a9fc:	e018      	b.n	800aa30 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	895b      	ldrh	r3, [r3, #10]
 800aa02:	897a      	ldrh	r2, [r7, #10]
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	891a      	ldrh	r2, [r3, #8]
 800aa0c:	893b      	ldrh	r3, [r7, #8]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <pbuf_realloc+0x70>
 800aa22:	4b26      	ldr	r3, [pc, #152]	; (800aabc <pbuf_realloc+0xfc>)
 800aa24:	f240 12af 	movw	r2, #431	; 0x1af
 800aa28:	4927      	ldr	r1, [pc, #156]	; (800aac8 <pbuf_realloc+0x108>)
 800aa2a:	4826      	ldr	r0, [pc, #152]	; (800aac4 <pbuf_realloc+0x104>)
 800aa2c:	f009 fdce 	bl	80145cc <iprintf>
  while (rem_len > q->len) {
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	895b      	ldrh	r3, [r3, #10]
 800aa34:	897a      	ldrh	r2, [r7, #10]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d8e1      	bhi.n	800a9fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	7b1b      	ldrb	r3, [r3, #12]
 800aa3e:	f003 030f 	and.w	r3, r3, #15
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d121      	bne.n	800aa8a <pbuf_realloc+0xca>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	895b      	ldrh	r3, [r3, #10]
 800aa4a:	897a      	ldrh	r2, [r7, #10]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d01c      	beq.n	800aa8a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	7b5b      	ldrb	r3, [r3, #13]
 800aa54:	f003 0302 	and.w	r3, r3, #2
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d116      	bne.n	800aa8a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	897b      	ldrh	r3, [r7, #10]
 800aa68:	4413      	add	r3, r2
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7fe ffaa 	bl	80099c8 <mem_trim>
 800aa74:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d106      	bne.n	800aa8a <pbuf_realloc+0xca>
 800aa7c:	4b0f      	ldr	r3, [pc, #60]	; (800aabc <pbuf_realloc+0xfc>)
 800aa7e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800aa82:	4912      	ldr	r1, [pc, #72]	; (800aacc <pbuf_realloc+0x10c>)
 800aa84:	480f      	ldr	r0, [pc, #60]	; (800aac4 <pbuf_realloc+0x104>)
 800aa86:	f009 fda1 	bl	80145cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	897a      	ldrh	r2, [r7, #10]
 800aa8e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	895a      	ldrh	r2, [r3, #10]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d004      	beq.n	800aaaa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 f911 	bl	800accc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	e000      	b.n	800aab4 <pbuf_realloc+0xf4>
    return;
 800aab2:	bf00      	nop

}
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	080167a0 	.word	0x080167a0
 800aac0:	080168b8 	.word	0x080168b8
 800aac4:	08016800 	.word	0x08016800
 800aac8:	080168d0 	.word	0x080168d0
 800aacc:	080168e8 	.word	0x080168e8

0800aad0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	4613      	mov	r3, r2
 800aadc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d106      	bne.n	800aaf2 <pbuf_add_header_impl+0x22>
 800aae4:	4b2b      	ldr	r3, [pc, #172]	; (800ab94 <pbuf_add_header_impl+0xc4>)
 800aae6:	f240 12df 	movw	r2, #479	; 0x1df
 800aaea:	492b      	ldr	r1, [pc, #172]	; (800ab98 <pbuf_add_header_impl+0xc8>)
 800aaec:	482b      	ldr	r0, [pc, #172]	; (800ab9c <pbuf_add_header_impl+0xcc>)
 800aaee:	f009 fd6d 	bl	80145cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <pbuf_add_header_impl+0x30>
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aafe:	d301      	bcc.n	800ab04 <pbuf_add_header_impl+0x34>
    return 1;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e043      	b.n	800ab8c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <pbuf_add_header_impl+0x3e>
    return 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e03e      	b.n	800ab8c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	891a      	ldrh	r2, [r3, #8]
 800ab16:	8a7b      	ldrh	r3, [r7, #18]
 800ab18:	4413      	add	r3, r2
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	8a7a      	ldrh	r2, [r7, #18]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d901      	bls.n	800ab26 <pbuf_add_header_impl+0x56>
    return 1;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e032      	b.n	800ab8c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	7b1b      	ldrb	r3, [r3, #12]
 800ab2a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ab2c:	8a3b      	ldrh	r3, [r7, #16]
 800ab2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00c      	beq.n	800ab50 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	425b      	negs	r3, r3
 800ab3e:	4413      	add	r3, r2
 800ab40:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3310      	adds	r3, #16
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d20d      	bcs.n	800ab68 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e01d      	b.n	800ab8c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d006      	beq.n	800ab64 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	425b      	negs	r3, r3
 800ab5e:	4413      	add	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	e001      	b.n	800ab68 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e011      	b.n	800ab8c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	895a      	ldrh	r2, [r3, #10]
 800ab72:	8a7b      	ldrh	r3, [r7, #18]
 800ab74:	4413      	add	r3, r2
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	891a      	ldrh	r2, [r3, #8]
 800ab80:	8a7b      	ldrh	r3, [r7, #18]
 800ab82:	4413      	add	r3, r2
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	811a      	strh	r2, [r3, #8]


  return 0;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	080167a0 	.word	0x080167a0
 800ab98:	08016904 	.word	0x08016904
 800ab9c:	08016800 	.word	0x08016800

0800aba0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800abaa:	2200      	movs	r2, #0
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff ff8e 	bl	800aad0 <pbuf_add_header_impl>
 800abb4:	4603      	mov	r3, r0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
	...

0800abc0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <pbuf_remove_header+0x1e>
 800abd0:	4b20      	ldr	r3, [pc, #128]	; (800ac54 <pbuf_remove_header+0x94>)
 800abd2:	f240 224b 	movw	r2, #587	; 0x24b
 800abd6:	4920      	ldr	r1, [pc, #128]	; (800ac58 <pbuf_remove_header+0x98>)
 800abd8:	4820      	ldr	r0, [pc, #128]	; (800ac5c <pbuf_remove_header+0x9c>)
 800abda:	f009 fcf7 	bl	80145cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d003      	beq.n	800abec <pbuf_remove_header+0x2c>
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abea:	d301      	bcc.n	800abf0 <pbuf_remove_header+0x30>
    return 1;
 800abec:	2301      	movs	r3, #1
 800abee:	e02c      	b.n	800ac4a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <pbuf_remove_header+0x3a>
    return 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	e027      	b.n	800ac4a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	895b      	ldrh	r3, [r3, #10]
 800ac02:	89fa      	ldrh	r2, [r7, #14]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d908      	bls.n	800ac1a <pbuf_remove_header+0x5a>
 800ac08:	4b12      	ldr	r3, [pc, #72]	; (800ac54 <pbuf_remove_header+0x94>)
 800ac0a:	f240 2255 	movw	r2, #597	; 0x255
 800ac0e:	4914      	ldr	r1, [pc, #80]	; (800ac60 <pbuf_remove_header+0xa0>)
 800ac10:	4812      	ldr	r0, [pc, #72]	; (800ac5c <pbuf_remove_header+0x9c>)
 800ac12:	f009 fcdb 	bl	80145cc <iprintf>
 800ac16:	2301      	movs	r3, #1
 800ac18:	e017      	b.n	800ac4a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	441a      	add	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	895a      	ldrh	r2, [r3, #10]
 800ac30:	89fb      	ldrh	r3, [r7, #14]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	891a      	ldrh	r2, [r3, #8]
 800ac3e:	89fb      	ldrh	r3, [r7, #14]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	080167a0 	.word	0x080167a0
 800ac58:	08016904 	.word	0x08016904
 800ac5c:	08016800 	.word	0x08016800
 800ac60:	08016910 	.word	0x08016910

0800ac64 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	807b      	strh	r3, [r7, #2]
 800ac70:	4613      	mov	r3, r2
 800ac72:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ac74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	da08      	bge.n	800ac8e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ac7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac80:	425b      	negs	r3, r3
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff ff9b 	bl	800abc0 <pbuf_remove_header>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	e007      	b.n	800ac9e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ac8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac92:	787a      	ldrb	r2, [r7, #1]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff ff1a 	bl	800aad0 <pbuf_add_header_impl>
 800ac9c:	4603      	mov	r3, r0
  }
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
 800acae:	460b      	mov	r3, r1
 800acb0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800acb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acb6:	2201      	movs	r2, #1
 800acb8:	4619      	mov	r1, r3
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff ffd2 	bl	800ac64 <pbuf_header_impl>
 800acc0:	4603      	mov	r3, r0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d106      	bne.n	800acee <pbuf_free+0x22>
 800ace0:	4b3b      	ldr	r3, [pc, #236]	; (800add0 <pbuf_free+0x104>)
 800ace2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ace6:	493b      	ldr	r1, [pc, #236]	; (800add4 <pbuf_free+0x108>)
 800ace8:	483b      	ldr	r0, [pc, #236]	; (800add8 <pbuf_free+0x10c>)
 800acea:	f009 fc6f 	bl	80145cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	e069      	b.n	800adc6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800acf6:	e062      	b.n	800adbe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800acf8:	f009 fc02 	bl	8014500 <sys_arch_protect>
 800acfc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	7b9b      	ldrb	r3, [r3, #14]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <pbuf_free+0x48>
 800ad06:	4b32      	ldr	r3, [pc, #200]	; (800add0 <pbuf_free+0x104>)
 800ad08:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ad0c:	4933      	ldr	r1, [pc, #204]	; (800addc <pbuf_free+0x110>)
 800ad0e:	4832      	ldr	r0, [pc, #200]	; (800add8 <pbuf_free+0x10c>)
 800ad10:	f009 fc5c 	bl	80145cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	7b9b      	ldrb	r3, [r3, #14]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	739a      	strb	r2, [r3, #14]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7b9b      	ldrb	r3, [r3, #14]
 800ad24:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ad26:	69b8      	ldr	r0, [r7, #24]
 800ad28:	f009 fbf8 	bl	801451c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ad2c:	7dfb      	ldrb	r3, [r7, #23]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d143      	bne.n	800adba <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	7b1b      	ldrb	r3, [r3, #12]
 800ad3c:	f003 030f 	and.w	r3, r3, #15
 800ad40:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7b5b      	ldrb	r3, [r3, #13]
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d011      	beq.n	800ad72 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <pbuf_free+0x9c>
 800ad5a:	4b1d      	ldr	r3, [pc, #116]	; (800add0 <pbuf_free+0x104>)
 800ad5c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ad60:	491f      	ldr	r1, [pc, #124]	; (800ade0 <pbuf_free+0x114>)
 800ad62:	481d      	ldr	r0, [pc, #116]	; (800add8 <pbuf_free+0x10c>)
 800ad64:	f009 fc32 	bl	80145cc <iprintf>
        pc->custom_free_function(p);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	4798      	blx	r3
 800ad70:	e01d      	b.n	800adae <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d104      	bne.n	800ad82 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ad78:	6879      	ldr	r1, [r7, #4]
 800ad7a:	200c      	movs	r0, #12
 800ad7c:	f7ff f902 	bl	8009f84 <memp_free>
 800ad80:	e015      	b.n	800adae <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d104      	bne.n	800ad92 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	200b      	movs	r0, #11
 800ad8c:	f7ff f8fa 	bl	8009f84 <memp_free>
 800ad90:	e00d      	b.n	800adae <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ad92:	7bfb      	ldrb	r3, [r7, #15]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d103      	bne.n	800ada0 <pbuf_free+0xd4>
          mem_free(p);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7fe fd85 	bl	80098a8 <mem_free>
 800ad9e:	e006      	b.n	800adae <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ada0:	4b0b      	ldr	r3, [pc, #44]	; (800add0 <pbuf_free+0x104>)
 800ada2:	f240 320f 	movw	r2, #783	; 0x30f
 800ada6:	490f      	ldr	r1, [pc, #60]	; (800ade4 <pbuf_free+0x118>)
 800ada8:	480b      	ldr	r0, [pc, #44]	; (800add8 <pbuf_free+0x10c>)
 800adaa:	f009 fc0f 	bl	80145cc <iprintf>
        }
      }
      count++;
 800adae:	7ffb      	ldrb	r3, [r7, #31]
 800adb0:	3301      	adds	r3, #1
 800adb2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	607b      	str	r3, [r7, #4]
 800adb8:	e001      	b.n	800adbe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d199      	bne.n	800acf8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800adc4:	7ffb      	ldrb	r3, [r7, #31]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3720      	adds	r7, #32
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	080167a0 	.word	0x080167a0
 800add4:	08016904 	.word	0x08016904
 800add8:	08016800 	.word	0x08016800
 800addc:	08016930 	.word	0x08016930
 800ade0:	08016948 	.word	0x08016948
 800ade4:	0801696c 	.word	0x0801696c

0800ade8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800adf4:	e005      	b.n	800ae02 <pbuf_clen+0x1a>
    ++len;
 800adf6:	89fb      	ldrh	r3, [r7, #14]
 800adf8:	3301      	adds	r3, #1
 800adfa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1f6      	bne.n	800adf6 <pbuf_clen+0xe>
  }
  return len;
 800ae08:	89fb      	ldrh	r3, [r7, #14]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3714      	adds	r7, #20
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
	...

0800ae18 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d016      	beq.n	800ae54 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ae26:	f009 fb6b 	bl	8014500 <sys_arch_protect>
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	7b9b      	ldrb	r3, [r3, #14]
 800ae30:	3301      	adds	r3, #1
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	739a      	strb	r2, [r3, #14]
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f009 fb6f 	bl	801451c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	7b9b      	ldrb	r3, [r3, #14]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d106      	bne.n	800ae54 <pbuf_ref+0x3c>
 800ae46:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <pbuf_ref+0x44>)
 800ae48:	f240 3242 	movw	r2, #834	; 0x342
 800ae4c:	4904      	ldr	r1, [pc, #16]	; (800ae60 <pbuf_ref+0x48>)
 800ae4e:	4805      	ldr	r0, [pc, #20]	; (800ae64 <pbuf_ref+0x4c>)
 800ae50:	f009 fbbc 	bl	80145cc <iprintf>
  }
}
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	080167a0 	.word	0x080167a0
 800ae60:	08016980 	.word	0x08016980
 800ae64:	08016800 	.word	0x08016800

0800ae68 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <pbuf_cat+0x16>
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d107      	bne.n	800ae8e <pbuf_cat+0x26>
 800ae7e:	4b20      	ldr	r3, [pc, #128]	; (800af00 <pbuf_cat+0x98>)
 800ae80:	f240 3259 	movw	r2, #857	; 0x359
 800ae84:	491f      	ldr	r1, [pc, #124]	; (800af04 <pbuf_cat+0x9c>)
 800ae86:	4820      	ldr	r0, [pc, #128]	; (800af08 <pbuf_cat+0xa0>)
 800ae88:	f009 fba0 	bl	80145cc <iprintf>
 800ae8c:	e034      	b.n	800aef8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	e00a      	b.n	800aeaa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	891a      	ldrh	r2, [r3, #8]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	891b      	ldrh	r3, [r3, #8]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f0      	bne.n	800ae94 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	891a      	ldrh	r2, [r3, #8]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	895b      	ldrh	r3, [r3, #10]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d006      	beq.n	800aecc <pbuf_cat+0x64>
 800aebe:	4b10      	ldr	r3, [pc, #64]	; (800af00 <pbuf_cat+0x98>)
 800aec0:	f240 3262 	movw	r2, #866	; 0x362
 800aec4:	4911      	ldr	r1, [pc, #68]	; (800af0c <pbuf_cat+0xa4>)
 800aec6:	4810      	ldr	r0, [pc, #64]	; (800af08 <pbuf_cat+0xa0>)
 800aec8:	f009 fb80 	bl	80145cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d006      	beq.n	800aee2 <pbuf_cat+0x7a>
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <pbuf_cat+0x98>)
 800aed6:	f240 3263 	movw	r2, #867	; 0x363
 800aeda:	490d      	ldr	r1, [pc, #52]	; (800af10 <pbuf_cat+0xa8>)
 800aedc:	480a      	ldr	r0, [pc, #40]	; (800af08 <pbuf_cat+0xa0>)
 800aede:	f009 fb75 	bl	80145cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	891a      	ldrh	r2, [r3, #8]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	891b      	ldrh	r3, [r3, #8]
 800aeea:	4413      	add	r3, r2
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	080167a0 	.word	0x080167a0
 800af04:	08016994 	.word	0x08016994
 800af08:	08016800 	.word	0x08016800
 800af0c:	080169cc 	.word	0x080169cc
 800af10:	080169fc 	.word	0x080169fc

0800af14 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]
 800af22:	2300      	movs	r3, #0
 800af24:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d008      	beq.n	800af3e <pbuf_copy+0x2a>
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d005      	beq.n	800af3e <pbuf_copy+0x2a>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	891a      	ldrh	r2, [r3, #8]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	891b      	ldrh	r3, [r3, #8]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d209      	bcs.n	800af52 <pbuf_copy+0x3e>
 800af3e:	4b57      	ldr	r3, [pc, #348]	; (800b09c <pbuf_copy+0x188>)
 800af40:	f240 32c9 	movw	r2, #969	; 0x3c9
 800af44:	4956      	ldr	r1, [pc, #344]	; (800b0a0 <pbuf_copy+0x18c>)
 800af46:	4857      	ldr	r0, [pc, #348]	; (800b0a4 <pbuf_copy+0x190>)
 800af48:	f009 fb40 	bl	80145cc <iprintf>
 800af4c:	f06f 030f 	mvn.w	r3, #15
 800af50:	e09f      	b.n	800b092 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	895b      	ldrh	r3, [r3, #10]
 800af56:	461a      	mov	r2, r3
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	1ad2      	subs	r2, r2, r3
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	895b      	ldrh	r3, [r3, #10]
 800af60:	4619      	mov	r1, r3
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1acb      	subs	r3, r1, r3
 800af66:	429a      	cmp	r2, r3
 800af68:	d306      	bcc.n	800af78 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	895b      	ldrh	r3, [r3, #10]
 800af6e:	461a      	mov	r2, r3
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	e005      	b.n	800af84 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	895b      	ldrh	r3, [r3, #10]
 800af7c:	461a      	mov	r2, r3
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685a      	ldr	r2, [r3, #4]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	18d0      	adds	r0, r2, r3
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	4413      	add	r3, r2
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4619      	mov	r1, r3
 800af98:	f009 fb02 	bl	80145a0 <memcpy>
    offset_to += len;
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4413      	add	r3, r2
 800afa2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	4413      	add	r3, r2
 800afaa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	895b      	ldrh	r3, [r3, #10]
 800afb0:	461a      	mov	r2, r3
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d906      	bls.n	800afc6 <pbuf_copy+0xb2>
 800afb8:	4b38      	ldr	r3, [pc, #224]	; (800b09c <pbuf_copy+0x188>)
 800afba:	f240 32d9 	movw	r2, #985	; 0x3d9
 800afbe:	493a      	ldr	r1, [pc, #232]	; (800b0a8 <pbuf_copy+0x194>)
 800afc0:	4838      	ldr	r0, [pc, #224]	; (800b0a4 <pbuf_copy+0x190>)
 800afc2:	f009 fb03 	bl	80145cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	895b      	ldrh	r3, [r3, #10]
 800afca:	461a      	mov	r2, r3
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	4293      	cmp	r3, r2
 800afd0:	d906      	bls.n	800afe0 <pbuf_copy+0xcc>
 800afd2:	4b32      	ldr	r3, [pc, #200]	; (800b09c <pbuf_copy+0x188>)
 800afd4:	f240 32da 	movw	r2, #986	; 0x3da
 800afd8:	4934      	ldr	r1, [pc, #208]	; (800b0ac <pbuf_copy+0x198>)
 800afda:	4832      	ldr	r0, [pc, #200]	; (800b0a4 <pbuf_copy+0x190>)
 800afdc:	f009 faf6 	bl	80145cc <iprintf>
    if (offset_from >= p_from->len) {
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	895b      	ldrh	r3, [r3, #10]
 800afe4:	461a      	mov	r2, r3
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	4293      	cmp	r3, r2
 800afea:	d304      	bcc.n	800aff6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	895b      	ldrh	r3, [r3, #10]
 800affa:	461a      	mov	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	4293      	cmp	r3, r2
 800b000:	d114      	bne.n	800b02c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10c      	bne.n	800b02c <pbuf_copy+0x118>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d009      	beq.n	800b02c <pbuf_copy+0x118>
 800b018:	4b20      	ldr	r3, [pc, #128]	; (800b09c <pbuf_copy+0x188>)
 800b01a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b01e:	4924      	ldr	r1, [pc, #144]	; (800b0b0 <pbuf_copy+0x19c>)
 800b020:	4820      	ldr	r0, [pc, #128]	; (800b0a4 <pbuf_copy+0x190>)
 800b022:	f009 fad3 	bl	80145cc <iprintf>
 800b026:	f06f 030f 	mvn.w	r3, #15
 800b02a:	e032      	b.n	800b092 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d013      	beq.n	800b05a <pbuf_copy+0x146>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	895a      	ldrh	r2, [r3, #10]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	891b      	ldrh	r3, [r3, #8]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d10d      	bne.n	800b05a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d009      	beq.n	800b05a <pbuf_copy+0x146>
 800b046:	4b15      	ldr	r3, [pc, #84]	; (800b09c <pbuf_copy+0x188>)
 800b048:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b04c:	4919      	ldr	r1, [pc, #100]	; (800b0b4 <pbuf_copy+0x1a0>)
 800b04e:	4815      	ldr	r0, [pc, #84]	; (800b0a4 <pbuf_copy+0x190>)
 800b050:	f009 fabc 	bl	80145cc <iprintf>
 800b054:	f06f 0305 	mvn.w	r3, #5
 800b058:	e01b      	b.n	800b092 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d013      	beq.n	800b088 <pbuf_copy+0x174>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	895a      	ldrh	r2, [r3, #10]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	891b      	ldrh	r3, [r3, #8]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d10d      	bne.n	800b088 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <pbuf_copy+0x174>
 800b074:	4b09      	ldr	r3, [pc, #36]	; (800b09c <pbuf_copy+0x188>)
 800b076:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b07a:	490e      	ldr	r1, [pc, #56]	; (800b0b4 <pbuf_copy+0x1a0>)
 800b07c:	4809      	ldr	r0, [pc, #36]	; (800b0a4 <pbuf_copy+0x190>)
 800b07e:	f009 faa5 	bl	80145cc <iprintf>
 800b082:	f06f 0305 	mvn.w	r3, #5
 800b086:	e004      	b.n	800b092 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f47f af61 	bne.w	800af52 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	080167a0 	.word	0x080167a0
 800b0a0:	08016a48 	.word	0x08016a48
 800b0a4:	08016800 	.word	0x08016800
 800b0a8:	08016a78 	.word	0x08016a78
 800b0ac:	08016a90 	.word	0x08016a90
 800b0b0:	08016aac 	.word	0x08016aac
 800b0b4:	08016abc 	.word	0x08016abc

0800b0b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b088      	sub	sp, #32
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	80fb      	strh	r3, [r7, #6]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d108      	bne.n	800b0ee <pbuf_copy_partial+0x36>
 800b0dc:	4b2b      	ldr	r3, [pc, #172]	; (800b18c <pbuf_copy_partial+0xd4>)
 800b0de:	f240 420a 	movw	r2, #1034	; 0x40a
 800b0e2:	492b      	ldr	r1, [pc, #172]	; (800b190 <pbuf_copy_partial+0xd8>)
 800b0e4:	482b      	ldr	r0, [pc, #172]	; (800b194 <pbuf_copy_partial+0xdc>)
 800b0e6:	f009 fa71 	bl	80145cc <iprintf>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e04a      	b.n	800b184 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d108      	bne.n	800b106 <pbuf_copy_partial+0x4e>
 800b0f4:	4b25      	ldr	r3, [pc, #148]	; (800b18c <pbuf_copy_partial+0xd4>)
 800b0f6:	f240 420b 	movw	r2, #1035	; 0x40b
 800b0fa:	4927      	ldr	r1, [pc, #156]	; (800b198 <pbuf_copy_partial+0xe0>)
 800b0fc:	4825      	ldr	r0, [pc, #148]	; (800b194 <pbuf_copy_partial+0xdc>)
 800b0fe:	f009 fa65 	bl	80145cc <iprintf>
 800b102:	2300      	movs	r3, #0
 800b104:	e03e      	b.n	800b184 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	61fb      	str	r3, [r7, #28]
 800b10a:	e034      	b.n	800b176 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b10c:	88bb      	ldrh	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00a      	beq.n	800b128 <pbuf_copy_partial+0x70>
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	895b      	ldrh	r3, [r3, #10]
 800b116:	88ba      	ldrh	r2, [r7, #4]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d305      	bcc.n	800b128 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	895b      	ldrh	r3, [r3, #10]
 800b120:	88ba      	ldrh	r2, [r7, #4]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	80bb      	strh	r3, [r7, #4]
 800b126:	e023      	b.n	800b170 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	895a      	ldrh	r2, [r3, #10]
 800b12c:	88bb      	ldrh	r3, [r7, #4]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b132:	8b3a      	ldrh	r2, [r7, #24]
 800b134:	88fb      	ldrh	r3, [r7, #6]
 800b136:	429a      	cmp	r2, r3
 800b138:	d901      	bls.n	800b13e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b13a:	88fb      	ldrh	r3, [r7, #6]
 800b13c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b13e:	8b7b      	ldrh	r3, [r7, #26]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	18d0      	adds	r0, r2, r3
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	88bb      	ldrh	r3, [r7, #4]
 800b14a:	4413      	add	r3, r2
 800b14c:	8b3a      	ldrh	r2, [r7, #24]
 800b14e:	4619      	mov	r1, r3
 800b150:	f009 fa26 	bl	80145a0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b154:	8afa      	ldrh	r2, [r7, #22]
 800b156:	8b3b      	ldrh	r3, [r7, #24]
 800b158:	4413      	add	r3, r2
 800b15a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b15c:	8b7a      	ldrh	r2, [r7, #26]
 800b15e:	8b3b      	ldrh	r3, [r7, #24]
 800b160:	4413      	add	r3, r2
 800b162:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b164:	88fa      	ldrh	r2, [r7, #6]
 800b166:	8b3b      	ldrh	r3, [r7, #24]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	61fb      	str	r3, [r7, #28]
 800b176:	88fb      	ldrh	r3, [r7, #6]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <pbuf_copy_partial+0xca>
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1c4      	bne.n	800b10c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b182:	8afb      	ldrh	r3, [r7, #22]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3720      	adds	r7, #32
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	080167a0 	.word	0x080167a0
 800b190:	08016ae8 	.word	0x08016ae8
 800b194:	08016800 	.word	0x08016800
 800b198:	08016b08 	.word	0x08016b08

0800b19c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	603a      	str	r2, [r7, #0]
 800b1a6:	71fb      	strb	r3, [r7, #7]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	8919      	ldrh	r1, [r3, #8]
 800b1b0:	88ba      	ldrh	r2, [r7, #4]
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff faa5 	bl	800a704 <pbuf_alloc>
 800b1ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <pbuf_clone+0x2a>
    return NULL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e011      	b.n	800b1ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f7ff fea3 	bl	800af14 <pbuf_copy>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b1d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d006      	beq.n	800b1e8 <pbuf_clone+0x4c>
 800b1da:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <pbuf_clone+0x58>)
 800b1dc:	f240 5224 	movw	r2, #1316	; 0x524
 800b1e0:	4905      	ldr	r1, [pc, #20]	; (800b1f8 <pbuf_clone+0x5c>)
 800b1e2:	4806      	ldr	r0, [pc, #24]	; (800b1fc <pbuf_clone+0x60>)
 800b1e4:	f009 f9f2 	bl	80145cc <iprintf>
  return q;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	080167a0 	.word	0x080167a0
 800b1f8:	08016c14 	.word	0x08016c14
 800b1fc:	08016800 	.word	0x08016800

0800b200 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b204:	f009 f9fa 	bl	80145fc <rand>
 800b208:	4603      	mov	r3, r0
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b210:	b29b      	uxth	r3, r3
 800b212:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b216:	b29a      	uxth	r2, r3
 800b218:	4b01      	ldr	r3, [pc, #4]	; (800b220 <tcp_init+0x20>)
 800b21a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b21c:	bf00      	nop
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	20000010 	.word	0x20000010

0800b224 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	7d1b      	ldrb	r3, [r3, #20]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d105      	bne.n	800b240 <tcp_free+0x1c>
 800b234:	4b06      	ldr	r3, [pc, #24]	; (800b250 <tcp_free+0x2c>)
 800b236:	22d4      	movs	r2, #212	; 0xd4
 800b238:	4906      	ldr	r1, [pc, #24]	; (800b254 <tcp_free+0x30>)
 800b23a:	4807      	ldr	r0, [pc, #28]	; (800b258 <tcp_free+0x34>)
 800b23c:	f009 f9c6 	bl	80145cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b240:	6879      	ldr	r1, [r7, #4]
 800b242:	2001      	movs	r0, #1
 800b244:	f7fe fe9e 	bl	8009f84 <memp_free>
}
 800b248:	bf00      	nop
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	08016ca0 	.word	0x08016ca0
 800b254:	08016cd0 	.word	0x08016cd0
 800b258:	08016ce4 	.word	0x08016ce4

0800b25c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7d1b      	ldrb	r3, [r3, #20]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d105      	bne.n	800b278 <tcp_free_listen+0x1c>
 800b26c:	4b06      	ldr	r3, [pc, #24]	; (800b288 <tcp_free_listen+0x2c>)
 800b26e:	22df      	movs	r2, #223	; 0xdf
 800b270:	4906      	ldr	r1, [pc, #24]	; (800b28c <tcp_free_listen+0x30>)
 800b272:	4807      	ldr	r0, [pc, #28]	; (800b290 <tcp_free_listen+0x34>)
 800b274:	f009 f9aa 	bl	80145cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b278:	6879      	ldr	r1, [r7, #4]
 800b27a:	2002      	movs	r0, #2
 800b27c:	f7fe fe82 	bl	8009f84 <memp_free>
}
 800b280:	bf00      	nop
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	08016ca0 	.word	0x08016ca0
 800b28c:	08016d0c 	.word	0x08016d0c
 800b290:	08016ce4 	.word	0x08016ce4

0800b294 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b298:	f001 f8a6 	bl	800c3e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b29c:	4b07      	ldr	r3, [pc, #28]	; (800b2bc <tcp_tmr+0x28>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	4b05      	ldr	r3, [pc, #20]	; (800b2bc <tcp_tmr+0x28>)
 800b2a6:	701a      	strb	r2, [r3, #0]
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <tcp_tmr+0x28>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b2b4:	f000 fd58 	bl	800bd68 <tcp_slowtmr>
  }
}
 800b2b8:	bf00      	nop
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	20004099 	.word	0x20004099

0800b2c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d105      	bne.n	800b2dc <tcp_remove_listener+0x1c>
 800b2d0:	4b0d      	ldr	r3, [pc, #52]	; (800b308 <tcp_remove_listener+0x48>)
 800b2d2:	22ff      	movs	r2, #255	; 0xff
 800b2d4:	490d      	ldr	r1, [pc, #52]	; (800b30c <tcp_remove_listener+0x4c>)
 800b2d6:	480e      	ldr	r0, [pc, #56]	; (800b310 <tcp_remove_listener+0x50>)
 800b2d8:	f009 f978 	bl	80145cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	e00a      	b.n	800b2f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d102      	bne.n	800b2f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f1      	bne.n	800b2e2 <tcp_remove_listener+0x22>
    }
  }
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	08016ca0 	.word	0x08016ca0
 800b30c:	08016d28 	.word	0x08016d28
 800b310:	08016ce4 	.word	0x08016ce4

0800b314 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <tcp_listen_closed+0x1c>
 800b322:	4b14      	ldr	r3, [pc, #80]	; (800b374 <tcp_listen_closed+0x60>)
 800b324:	f240 1211 	movw	r2, #273	; 0x111
 800b328:	4913      	ldr	r1, [pc, #76]	; (800b378 <tcp_listen_closed+0x64>)
 800b32a:	4814      	ldr	r0, [pc, #80]	; (800b37c <tcp_listen_closed+0x68>)
 800b32c:	f009 f94e 	bl	80145cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	7d1b      	ldrb	r3, [r3, #20]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d006      	beq.n	800b346 <tcp_listen_closed+0x32>
 800b338:	4b0e      	ldr	r3, [pc, #56]	; (800b374 <tcp_listen_closed+0x60>)
 800b33a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b33e:	4910      	ldr	r1, [pc, #64]	; (800b380 <tcp_listen_closed+0x6c>)
 800b340:	480e      	ldr	r0, [pc, #56]	; (800b37c <tcp_listen_closed+0x68>)
 800b342:	f009 f943 	bl	80145cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b346:	2301      	movs	r3, #1
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	e00b      	b.n	800b364 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b34c:	4a0d      	ldr	r2, [pc, #52]	; (800b384 <tcp_listen_closed+0x70>)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7ff ffb1 	bl	800b2c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b03      	cmp	r3, #3
 800b368:	d9f0      	bls.n	800b34c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b36a:	bf00      	nop
 800b36c:	bf00      	nop
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	08016ca0 	.word	0x08016ca0
 800b378:	08016d50 	.word	0x08016d50
 800b37c:	08016ce4 	.word	0x08016ce4
 800b380:	08016d5c 	.word	0x08016d5c
 800b384:	08018cb8 	.word	0x08018cb8

0800b388 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b388:	b5b0      	push	{r4, r5, r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af04      	add	r7, sp, #16
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <tcp_close_shutdown+0x20>
 800b39a:	4b63      	ldr	r3, [pc, #396]	; (800b528 <tcp_close_shutdown+0x1a0>)
 800b39c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b3a0:	4962      	ldr	r1, [pc, #392]	; (800b52c <tcp_close_shutdown+0x1a4>)
 800b3a2:	4863      	ldr	r0, [pc, #396]	; (800b530 <tcp_close_shutdown+0x1a8>)
 800b3a4:	f009 f912 	bl	80145cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b3a8:	78fb      	ldrb	r3, [r7, #3]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d066      	beq.n	800b47c <tcp_close_shutdown+0xf4>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	7d1b      	ldrb	r3, [r3, #20]
 800b3b2:	2b04      	cmp	r3, #4
 800b3b4:	d003      	beq.n	800b3be <tcp_close_shutdown+0x36>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	7d1b      	ldrb	r3, [r3, #20]
 800b3ba:	2b07      	cmp	r3, #7
 800b3bc:	d15e      	bne.n	800b47c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d104      	bne.n	800b3d0 <tcp_close_shutdown+0x48>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b3ce:	d055      	beq.n	800b47c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	8b5b      	ldrh	r3, [r3, #26]
 800b3d4:	f003 0310 	and.w	r3, r3, #16
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d106      	bne.n	800b3ea <tcp_close_shutdown+0x62>
 800b3dc:	4b52      	ldr	r3, [pc, #328]	; (800b528 <tcp_close_shutdown+0x1a0>)
 800b3de:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b3e2:	4954      	ldr	r1, [pc, #336]	; (800b534 <tcp_close_shutdown+0x1ac>)
 800b3e4:	4852      	ldr	r0, [pc, #328]	; (800b530 <tcp_close_shutdown+0x1a8>)
 800b3e6:	f009 f8f1 	bl	80145cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b3f2:	687d      	ldr	r5, [r7, #4]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	3304      	adds	r3, #4
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	8ad2      	ldrh	r2, [r2, #22]
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	8b09      	ldrh	r1, [r1, #24]
 800b400:	9102      	str	r1, [sp, #8]
 800b402:	9201      	str	r2, [sp, #4]
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	462b      	mov	r3, r5
 800b408:	4622      	mov	r2, r4
 800b40a:	4601      	mov	r1, r0
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f005 fdb7 	bl	8010f80 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fb98 	bl	800cb48 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b418:	4b47      	ldr	r3, [pc, #284]	; (800b538 <tcp_close_shutdown+0x1b0>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d105      	bne.n	800b42e <tcp_close_shutdown+0xa6>
 800b422:	4b45      	ldr	r3, [pc, #276]	; (800b538 <tcp_close_shutdown+0x1b0>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	4a43      	ldr	r2, [pc, #268]	; (800b538 <tcp_close_shutdown+0x1b0>)
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	e013      	b.n	800b456 <tcp_close_shutdown+0xce>
 800b42e:	4b42      	ldr	r3, [pc, #264]	; (800b538 <tcp_close_shutdown+0x1b0>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	e00c      	b.n	800b450 <tcp_close_shutdown+0xc8>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d104      	bne.n	800b44a <tcp_close_shutdown+0xc2>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68da      	ldr	r2, [r3, #12]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	60da      	str	r2, [r3, #12]
 800b448:	e005      	b.n	800b456 <tcp_close_shutdown+0xce>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1ef      	bne.n	800b436 <tcp_close_shutdown+0xae>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	60da      	str	r2, [r3, #12]
 800b45c:	4b37      	ldr	r3, [pc, #220]	; (800b53c <tcp_close_shutdown+0x1b4>)
 800b45e:	2201      	movs	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b462:	4b37      	ldr	r3, [pc, #220]	; (800b540 <tcp_close_shutdown+0x1b8>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d102      	bne.n	800b472 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b46c:	f004 f82c 	bl	800f4c8 <tcp_trigger_input_pcb_close>
 800b470:	e002      	b.n	800b478 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fed6 	bl	800b224 <tcp_free>
      }
      return ERR_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	e050      	b.n	800b51e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7d1b      	ldrb	r3, [r3, #20]
 800b480:	2b02      	cmp	r3, #2
 800b482:	d03b      	beq.n	800b4fc <tcp_close_shutdown+0x174>
 800b484:	2b02      	cmp	r3, #2
 800b486:	dc44      	bgt.n	800b512 <tcp_close_shutdown+0x18a>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <tcp_close_shutdown+0x10a>
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d02a      	beq.n	800b4e6 <tcp_close_shutdown+0x15e>
 800b490:	e03f      	b.n	800b512 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	8adb      	ldrh	r3, [r3, #22]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d021      	beq.n	800b4de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b49a:	4b2a      	ldr	r3, [pc, #168]	; (800b544 <tcp_close_shutdown+0x1bc>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d105      	bne.n	800b4b0 <tcp_close_shutdown+0x128>
 800b4a4:	4b27      	ldr	r3, [pc, #156]	; (800b544 <tcp_close_shutdown+0x1bc>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	4a26      	ldr	r2, [pc, #152]	; (800b544 <tcp_close_shutdown+0x1bc>)
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	e013      	b.n	800b4d8 <tcp_close_shutdown+0x150>
 800b4b0:	4b24      	ldr	r3, [pc, #144]	; (800b544 <tcp_close_shutdown+0x1bc>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	60bb      	str	r3, [r7, #8]
 800b4b6:	e00c      	b.n	800b4d2 <tcp_close_shutdown+0x14a>
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d104      	bne.n	800b4cc <tcp_close_shutdown+0x144>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	60da      	str	r2, [r3, #12]
 800b4ca:	e005      	b.n	800b4d8 <tcp_close_shutdown+0x150>
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	60bb      	str	r3, [r7, #8]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1ef      	bne.n	800b4b8 <tcp_close_shutdown+0x130>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff fea0 	bl	800b224 <tcp_free>
      break;
 800b4e4:	e01a      	b.n	800b51c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff ff14 	bl	800b314 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b4ec:	6879      	ldr	r1, [r7, #4]
 800b4ee:	4816      	ldr	r0, [pc, #88]	; (800b548 <tcp_close_shutdown+0x1c0>)
 800b4f0:	f001 fb7a 	bl	800cbe8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff feb1 	bl	800b25c <tcp_free_listen>
      break;
 800b4fa:	e00f      	b.n	800b51c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	480e      	ldr	r0, [pc, #56]	; (800b538 <tcp_close_shutdown+0x1b0>)
 800b500:	f001 fb72 	bl	800cbe8 <tcp_pcb_remove>
 800b504:	4b0d      	ldr	r3, [pc, #52]	; (800b53c <tcp_close_shutdown+0x1b4>)
 800b506:	2201      	movs	r2, #1
 800b508:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff fe8a 	bl	800b224 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b510:	e004      	b.n	800b51c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f81a 	bl	800b54c <tcp_close_shutdown_fin>
 800b518:	4603      	mov	r3, r0
 800b51a:	e000      	b.n	800b51e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bdb0      	pop	{r4, r5, r7, pc}
 800b526:	bf00      	nop
 800b528:	08016ca0 	.word	0x08016ca0
 800b52c:	08016d74 	.word	0x08016d74
 800b530:	08016ce4 	.word	0x08016ce4
 800b534:	08016d94 	.word	0x08016d94
 800b538:	2000aac8 	.word	0x2000aac8
 800b53c:	2000aac4 	.word	0x2000aac4
 800b540:	2000aadc 	.word	0x2000aadc
 800b544:	2000aad4 	.word	0x2000aad4
 800b548:	2000aad0 	.word	0x2000aad0

0800b54c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b084      	sub	sp, #16
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <tcp_close_shutdown_fin+0x1c>
 800b55a:	4b2e      	ldr	r3, [pc, #184]	; (800b614 <tcp_close_shutdown_fin+0xc8>)
 800b55c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b560:	492d      	ldr	r1, [pc, #180]	; (800b618 <tcp_close_shutdown_fin+0xcc>)
 800b562:	482e      	ldr	r0, [pc, #184]	; (800b61c <tcp_close_shutdown_fin+0xd0>)
 800b564:	f009 f832 	bl	80145cc <iprintf>

  switch (pcb->state) {
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	7d1b      	ldrb	r3, [r3, #20]
 800b56c:	2b07      	cmp	r3, #7
 800b56e:	d020      	beq.n	800b5b2 <tcp_close_shutdown_fin+0x66>
 800b570:	2b07      	cmp	r3, #7
 800b572:	dc2b      	bgt.n	800b5cc <tcp_close_shutdown_fin+0x80>
 800b574:	2b03      	cmp	r3, #3
 800b576:	d002      	beq.n	800b57e <tcp_close_shutdown_fin+0x32>
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d00d      	beq.n	800b598 <tcp_close_shutdown_fin+0x4c>
 800b57c:	e026      	b.n	800b5cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f004 fe0c 	bl	801019c <tcp_send_fin>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d11f      	bne.n	800b5d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2205      	movs	r2, #5
 800b594:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b596:	e01b      	b.n	800b5d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f004 fdff 	bl	801019c <tcp_send_fin>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b5a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d114      	bne.n	800b5d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5b0:	e010      	b.n	800b5d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f004 fdf2 	bl	801019c <tcp_send_fin>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b5bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d109      	bne.n	800b5d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2209      	movs	r2, #9
 800b5c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5ca:	e005      	b.n	800b5d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e01c      	b.n	800b60a <tcp_close_shutdown_fin+0xbe>
      break;
 800b5d0:	bf00      	nop
 800b5d2:	e002      	b.n	800b5da <tcp_close_shutdown_fin+0x8e>
      break;
 800b5d4:	bf00      	nop
 800b5d6:	e000      	b.n	800b5da <tcp_close_shutdown_fin+0x8e>
      break;
 800b5d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d103      	bne.n	800b5ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f004 ff18 	bl	8010418 <tcp_output>
 800b5e8:	e00d      	b.n	800b606 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f2:	d108      	bne.n	800b606 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	8b5b      	ldrh	r3, [r3, #26]
 800b5f8:	f043 0308 	orr.w	r3, r3, #8
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	e001      	b.n	800b60a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	08016ca0 	.word	0x08016ca0
 800b618:	08016d50 	.word	0x08016d50
 800b61c:	08016ce4 	.word	0x08016ce4

0800b620 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d109      	bne.n	800b642 <tcp_close+0x22>
 800b62e:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <tcp_close+0x4c>)
 800b630:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b634:	490e      	ldr	r1, [pc, #56]	; (800b670 <tcp_close+0x50>)
 800b636:	480f      	ldr	r0, [pc, #60]	; (800b674 <tcp_close+0x54>)
 800b638:	f008 ffc8 	bl	80145cc <iprintf>
 800b63c:	f06f 030f 	mvn.w	r3, #15
 800b640:	e00f      	b.n	800b662 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7d1b      	ldrb	r3, [r3, #20]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d006      	beq.n	800b658 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8b5b      	ldrh	r3, [r3, #26]
 800b64e:	f043 0310 	orr.w	r3, r3, #16
 800b652:	b29a      	uxth	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b658:	2101      	movs	r1, #1
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff fe94 	bl	800b388 <tcp_close_shutdown>
 800b660:	4603      	mov	r3, r0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	08016ca0 	.word	0x08016ca0
 800b670:	08016db0 	.word	0x08016db0
 800b674:	08016ce4 	.word	0x08016ce4

0800b678 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d109      	bne.n	800b69e <tcp_shutdown+0x26>
 800b68a:	4b26      	ldr	r3, [pc, #152]	; (800b724 <tcp_shutdown+0xac>)
 800b68c:	f240 2207 	movw	r2, #519	; 0x207
 800b690:	4925      	ldr	r1, [pc, #148]	; (800b728 <tcp_shutdown+0xb0>)
 800b692:	4826      	ldr	r0, [pc, #152]	; (800b72c <tcp_shutdown+0xb4>)
 800b694:	f008 ff9a 	bl	80145cc <iprintf>
 800b698:	f06f 030f 	mvn.w	r3, #15
 800b69c:	e03d      	b.n	800b71a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	7d1b      	ldrb	r3, [r3, #20]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d102      	bne.n	800b6ac <tcp_shutdown+0x34>
    return ERR_CONN;
 800b6a6:	f06f 030a 	mvn.w	r3, #10
 800b6aa:	e036      	b.n	800b71a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d01b      	beq.n	800b6ea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	8b5b      	ldrh	r3, [r3, #26]
 800b6b6:	f043 0310 	orr.w	r3, r3, #16
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d005      	beq.n	800b6d2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f7ff fe5d 	bl	800b388 <tcp_close_shutdown>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	e023      	b.n	800b71a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d007      	beq.n	800b6ea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff faf4 	bl	800accc <pbuf_free>
      pcb->refused_data = NULL;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d013      	beq.n	800b718 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	7d1b      	ldrb	r3, [r3, #20]
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	dc02      	bgt.n	800b6fe <tcp_shutdown+0x86>
 800b6f8:	2b03      	cmp	r3, #3
 800b6fa:	da02      	bge.n	800b702 <tcp_shutdown+0x8a>
 800b6fc:	e009      	b.n	800b712 <tcp_shutdown+0x9a>
 800b6fe:	2b07      	cmp	r3, #7
 800b700:	d107      	bne.n	800b712 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	b2db      	uxtb	r3, r3
 800b706:	4619      	mov	r1, r3
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f7ff fe3d 	bl	800b388 <tcp_close_shutdown>
 800b70e:	4603      	mov	r3, r0
 800b710:	e003      	b.n	800b71a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800b712:	f06f 030a 	mvn.w	r3, #10
 800b716:	e000      	b.n	800b71a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	08016ca0 	.word	0x08016ca0
 800b728:	08016dc8 	.word	0x08016dc8
 800b72c:	08016ce4 	.word	0x08016ce4

0800b730 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08e      	sub	sp, #56	; 0x38
 800b734:	af04      	add	r7, sp, #16
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d107      	bne.n	800b750 <tcp_abandon+0x20>
 800b740:	4b52      	ldr	r3, [pc, #328]	; (800b88c <tcp_abandon+0x15c>)
 800b742:	f240 223d 	movw	r2, #573	; 0x23d
 800b746:	4952      	ldr	r1, [pc, #328]	; (800b890 <tcp_abandon+0x160>)
 800b748:	4852      	ldr	r0, [pc, #328]	; (800b894 <tcp_abandon+0x164>)
 800b74a:	f008 ff3f 	bl	80145cc <iprintf>
 800b74e:	e099      	b.n	800b884 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	7d1b      	ldrb	r3, [r3, #20]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d106      	bne.n	800b766 <tcp_abandon+0x36>
 800b758:	4b4c      	ldr	r3, [pc, #304]	; (800b88c <tcp_abandon+0x15c>)
 800b75a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b75e:	494e      	ldr	r1, [pc, #312]	; (800b898 <tcp_abandon+0x168>)
 800b760:	484c      	ldr	r0, [pc, #304]	; (800b894 <tcp_abandon+0x164>)
 800b762:	f008 ff33 	bl	80145cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7d1b      	ldrb	r3, [r3, #20]
 800b76a:	2b0a      	cmp	r3, #10
 800b76c:	d107      	bne.n	800b77e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b76e:	6879      	ldr	r1, [r7, #4]
 800b770:	484a      	ldr	r0, [pc, #296]	; (800b89c <tcp_abandon+0x16c>)
 800b772:	f001 fa39 	bl	800cbe8 <tcp_pcb_remove>
    tcp_free(pcb);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7ff fd54 	bl	800b224 <tcp_free>
 800b77c:	e082      	b.n	800b884 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b78a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b790:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b798:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	7d1b      	ldrb	r3, [r3, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d126      	bne.n	800b7f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	8adb      	ldrh	r3, [r3, #22]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d02e      	beq.n	800b80e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b7b0:	4b3b      	ldr	r3, [pc, #236]	; (800b8a0 <tcp_abandon+0x170>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d105      	bne.n	800b7c6 <tcp_abandon+0x96>
 800b7ba:	4b39      	ldr	r3, [pc, #228]	; (800b8a0 <tcp_abandon+0x170>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	4a37      	ldr	r2, [pc, #220]	; (800b8a0 <tcp_abandon+0x170>)
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	e013      	b.n	800b7ee <tcp_abandon+0xbe>
 800b7c6:	4b36      	ldr	r3, [pc, #216]	; (800b8a0 <tcp_abandon+0x170>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	61fb      	str	r3, [r7, #28]
 800b7cc:	e00c      	b.n	800b7e8 <tcp_abandon+0xb8>
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d104      	bne.n	800b7e2 <tcp_abandon+0xb2>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68da      	ldr	r2, [r3, #12]
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	60da      	str	r2, [r3, #12]
 800b7e0:	e005      	b.n	800b7ee <tcp_abandon+0xbe>
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1ef      	bne.n	800b7ce <tcp_abandon+0x9e>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	60da      	str	r2, [r3, #12]
 800b7f4:	e00b      	b.n	800b80e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	8adb      	ldrh	r3, [r3, #22]
 800b7fe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b800:	6879      	ldr	r1, [r7, #4]
 800b802:	4828      	ldr	r0, [pc, #160]	; (800b8a4 <tcp_abandon+0x174>)
 800b804:	f001 f9f0 	bl	800cbe8 <tcp_pcb_remove>
 800b808:	4b27      	ldr	r3, [pc, #156]	; (800b8a8 <tcp_abandon+0x178>)
 800b80a:	2201      	movs	r2, #1
 800b80c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b812:	2b00      	cmp	r3, #0
 800b814:	d004      	beq.n	800b820 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fec4 	bl	800c5a8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b824:	2b00      	cmp	r3, #0
 800b826:	d004      	beq.n	800b832 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 febb 	bl	800c5a8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b836:	2b00      	cmp	r3, #0
 800b838:	d004      	beq.n	800b844 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 feb2 	bl	800c5a8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00e      	beq.n	800b868 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b84a:	6879      	ldr	r1, [r7, #4]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	3304      	adds	r3, #4
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	8b12      	ldrh	r2, [r2, #24]
 800b854:	9202      	str	r2, [sp, #8]
 800b856:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b858:	9201      	str	r2, [sp, #4]
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	460b      	mov	r3, r1
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	69b9      	ldr	r1, [r7, #24]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f005 fb8c 	bl	8010f80 <tcp_rst>
    }
    last_state = pcb->state;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	7d1b      	ldrb	r3, [r3, #20]
 800b86c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fcd8 	bl	800b224 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <tcp_abandon+0x154>
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f06f 010c 	mvn.w	r1, #12
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	4798      	blx	r3
  }
}
 800b884:	3728      	adds	r7, #40	; 0x28
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	08016ca0 	.word	0x08016ca0
 800b890:	08016de4 	.word	0x08016de4
 800b894:	08016ce4 	.word	0x08016ce4
 800b898:	08016e00 	.word	0x08016e00
 800b89c:	2000aad8 	.word	0x2000aad8
 800b8a0:	2000aad4 	.word	0x2000aad4
 800b8a4:	2000aac8 	.word	0x2000aac8
 800b8a8:	2000aac4 	.word	0x2000aac4

0800b8ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff ff3a 	bl	800b730 <tcp_abandon>
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b088      	sub	sp, #32
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800b8d2:	2304      	movs	r3, #4
 800b8d4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800b8dc:	4b3e      	ldr	r3, [pc, #248]	; (800b9d8 <tcp_bind+0x114>)
 800b8de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d109      	bne.n	800b8fa <tcp_bind+0x36>
 800b8e6:	4b3d      	ldr	r3, [pc, #244]	; (800b9dc <tcp_bind+0x118>)
 800b8e8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800b8ec:	493c      	ldr	r1, [pc, #240]	; (800b9e0 <tcp_bind+0x11c>)
 800b8ee:	483d      	ldr	r0, [pc, #244]	; (800b9e4 <tcp_bind+0x120>)
 800b8f0:	f008 fe6c 	bl	80145cc <iprintf>
 800b8f4:	f06f 030f 	mvn.w	r3, #15
 800b8f8:	e06a      	b.n	800b9d0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	7d1b      	ldrb	r3, [r3, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d009      	beq.n	800b916 <tcp_bind+0x52>
 800b902:	4b36      	ldr	r3, [pc, #216]	; (800b9dc <tcp_bind+0x118>)
 800b904:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b908:	4937      	ldr	r1, [pc, #220]	; (800b9e8 <tcp_bind+0x124>)
 800b90a:	4836      	ldr	r0, [pc, #216]	; (800b9e4 <tcp_bind+0x120>)
 800b90c:	f008 fe5e 	bl	80145cc <iprintf>
 800b910:	f06f 0305 	mvn.w	r3, #5
 800b914:	e05c      	b.n	800b9d0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800b916:	88fb      	ldrh	r3, [r7, #6]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d109      	bne.n	800b930 <tcp_bind+0x6c>
    port = tcp_new_port();
 800b91c:	f000 f9de 	bl	800bcdc <tcp_new_port>
 800b920:	4603      	mov	r3, r0
 800b922:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b924:	88fb      	ldrh	r3, [r7, #6]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d135      	bne.n	800b996 <tcp_bind+0xd2>
      return ERR_BUF;
 800b92a:	f06f 0301 	mvn.w	r3, #1
 800b92e:	e04f      	b.n	800b9d0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b930:	2300      	movs	r3, #0
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	e02b      	b.n	800b98e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b936:	4a2d      	ldr	r2, [pc, #180]	; (800b9ec <tcp_bind+0x128>)
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	61bb      	str	r3, [r7, #24]
 800b942:	e01e      	b.n	800b982 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	8adb      	ldrh	r3, [r3, #22]
 800b948:	88fa      	ldrh	r2, [r7, #6]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d116      	bne.n	800b97c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b94e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b950:	2b00      	cmp	r3, #0
 800b952:	d010      	beq.n	800b976 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00c      	beq.n	800b976 <tcp_bind+0xb2>
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d009      	beq.n	800b976 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d005      	beq.n	800b976 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b972:	429a      	cmp	r2, r3
 800b974:	d102      	bne.n	800b97c <tcp_bind+0xb8>
              return ERR_USE;
 800b976:	f06f 0307 	mvn.w	r3, #7
 800b97a:	e029      	b.n	800b9d0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1dd      	bne.n	800b944 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	3301      	adds	r3, #1
 800b98c:	61fb      	str	r3, [r7, #28]
 800b98e:	69fa      	ldr	r2, [r7, #28]
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	429a      	cmp	r2, r3
 800b994:	dbcf      	blt.n	800b936 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00c      	beq.n	800b9b6 <tcp_bind+0xf2>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d008      	beq.n	800b9b6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <tcp_bind+0xec>
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	e000      	b.n	800b9b2 <tcp_bind+0xee>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	88fa      	ldrh	r2, [r7, #6]
 800b9ba:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b9bc:	4b0c      	ldr	r3, [pc, #48]	; (800b9f0 <tcp_bind+0x12c>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	60da      	str	r2, [r3, #12]
 800b9c4:	4a0a      	ldr	r2, [pc, #40]	; (800b9f0 <tcp_bind+0x12c>)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6013      	str	r3, [r2, #0]
 800b9ca:	f005 fc9b 	bl	8011304 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3720      	adds	r7, #32
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	08018ce0 	.word	0x08018ce0
 800b9dc:	08016ca0 	.word	0x08016ca0
 800b9e0:	08016e34 	.word	0x08016e34
 800b9e4:	08016ce4 	.word	0x08016ce4
 800b9e8:	08016e4c 	.word	0x08016e4c
 800b9ec:	08018cb8 	.word	0x08018cb8
 800b9f0:	2000aad4 	.word	0x2000aad4

0800b9f4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <tcp_accept_null+0x22>
 800ba08:	4b07      	ldr	r3, [pc, #28]	; (800ba28 <tcp_accept_null+0x34>)
 800ba0a:	f240 320f 	movw	r2, #783	; 0x30f
 800ba0e:	4907      	ldr	r1, [pc, #28]	; (800ba2c <tcp_accept_null+0x38>)
 800ba10:	4807      	ldr	r0, [pc, #28]	; (800ba30 <tcp_accept_null+0x3c>)
 800ba12:	f008 fddb 	bl	80145cc <iprintf>

  tcp_abort(pcb);
 800ba16:	68b8      	ldr	r0, [r7, #8]
 800ba18:	f7ff ff48 	bl	800b8ac <tcp_abort>

  return ERR_ABRT;
 800ba1c:	f06f 030c 	mvn.w	r3, #12
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	08016ca0 	.word	0x08016ca0
 800ba2c:	08016e74 	.word	0x08016e74
 800ba30:	08016ce4 	.word	0x08016ce4

0800ba34 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b088      	sub	sp, #32
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d109      	bne.n	800ba60 <tcp_listen_with_backlog_and_err+0x2c>
 800ba4c:	4b47      	ldr	r3, [pc, #284]	; (800bb6c <tcp_listen_with_backlog_and_err+0x138>)
 800ba4e:	f240 3259 	movw	r2, #857	; 0x359
 800ba52:	4947      	ldr	r1, [pc, #284]	; (800bb70 <tcp_listen_with_backlog_and_err+0x13c>)
 800ba54:	4847      	ldr	r0, [pc, #284]	; (800bb74 <tcp_listen_with_backlog_and_err+0x140>)
 800ba56:	f008 fdb9 	bl	80145cc <iprintf>
 800ba5a:	23f0      	movs	r3, #240	; 0xf0
 800ba5c:	76fb      	strb	r3, [r7, #27]
 800ba5e:	e079      	b.n	800bb54 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	7d1b      	ldrb	r3, [r3, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <tcp_listen_with_backlog_and_err+0x48>
 800ba68:	4b40      	ldr	r3, [pc, #256]	; (800bb6c <tcp_listen_with_backlog_and_err+0x138>)
 800ba6a:	f240 325a 	movw	r2, #858	; 0x35a
 800ba6e:	4942      	ldr	r1, [pc, #264]	; (800bb78 <tcp_listen_with_backlog_and_err+0x144>)
 800ba70:	4840      	ldr	r0, [pc, #256]	; (800bb74 <tcp_listen_with_backlog_and_err+0x140>)
 800ba72:	f008 fdab 	bl	80145cc <iprintf>
 800ba76:	23f1      	movs	r3, #241	; 0xf1
 800ba78:	76fb      	strb	r3, [r7, #27]
 800ba7a:	e06b      	b.n	800bb54 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	7d1b      	ldrb	r3, [r3, #20]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d104      	bne.n	800ba8e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ba88:	23f7      	movs	r3, #247	; 0xf7
 800ba8a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ba8c:	e062      	b.n	800bb54 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ba8e:	2002      	movs	r0, #2
 800ba90:	f7fe fa26 	bl	8009ee0 <memp_malloc>
 800ba94:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ba9c:	23ff      	movs	r3, #255	; 0xff
 800ba9e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800baa0:	e058      	b.n	800bb54 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	691a      	ldr	r2, [r3, #16]
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	8ada      	ldrh	r2, [r3, #22]
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	2201      	movs	r2, #1
 800bab6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	7d5a      	ldrb	r2, [r3, #21]
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	7a5a      	ldrb	r2, [r3, #9]
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	2200      	movs	r2, #0
 800bacc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	7ada      	ldrb	r2, [r3, #11]
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	7a9a      	ldrb	r2, [r3, #10]
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	8adb      	ldrh	r3, [r3, #22]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d021      	beq.n	800bb32 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800baee:	4b23      	ldr	r3, [pc, #140]	; (800bb7c <tcp_listen_with_backlog_and_err+0x148>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d105      	bne.n	800bb04 <tcp_listen_with_backlog_and_err+0xd0>
 800baf8:	4b20      	ldr	r3, [pc, #128]	; (800bb7c <tcp_listen_with_backlog_and_err+0x148>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	4a1f      	ldr	r2, [pc, #124]	; (800bb7c <tcp_listen_with_backlog_and_err+0x148>)
 800bb00:	6013      	str	r3, [r2, #0]
 800bb02:	e013      	b.n	800bb2c <tcp_listen_with_backlog_and_err+0xf8>
 800bb04:	4b1d      	ldr	r3, [pc, #116]	; (800bb7c <tcp_listen_with_backlog_and_err+0x148>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	617b      	str	r3, [r7, #20]
 800bb0a:	e00c      	b.n	800bb26 <tcp_listen_with_backlog_and_err+0xf2>
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d104      	bne.n	800bb20 <tcp_listen_with_backlog_and_err+0xec>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	68da      	ldr	r2, [r3, #12]
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	60da      	str	r2, [r3, #12]
 800bb1e:	e005      	b.n	800bb2c <tcp_listen_with_backlog_and_err+0xf8>
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	617b      	str	r3, [r7, #20]
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1ef      	bne.n	800bb0c <tcp_listen_with_backlog_and_err+0xd8>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7ff fb76 	bl	800b224 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	4a11      	ldr	r2, [pc, #68]	; (800bb80 <tcp_listen_with_backlog_and_err+0x14c>)
 800bb3c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800bb3e:	4b11      	ldr	r3, [pc, #68]	; (800bb84 <tcp_listen_with_backlog_and_err+0x150>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	60da      	str	r2, [r3, #12]
 800bb46:	4a0f      	ldr	r2, [pc, #60]	; (800bb84 <tcp_listen_with_backlog_and_err+0x150>)
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	f005 fbda 	bl	8011304 <tcp_timer_needed>
  res = ERR_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	7efa      	ldrb	r2, [r7, #27]
 800bb5e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800bb60:	69fb      	ldr	r3, [r7, #28]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3720      	adds	r7, #32
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	08016ca0 	.word	0x08016ca0
 800bb70:	08016e94 	.word	0x08016e94
 800bb74:	08016ce4 	.word	0x08016ce4
 800bb78:	08016ec4 	.word	0x08016ec4
 800bb7c:	2000aad4 	.word	0x2000aad4
 800bb80:	0800b9f5 	.word	0x0800b9f5
 800bb84:	2000aad0 	.word	0x2000aad0

0800bb88 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d106      	bne.n	800bba4 <tcp_update_rcv_ann_wnd+0x1c>
 800bb96:	4b25      	ldr	r3, [pc, #148]	; (800bc2c <tcp_update_rcv_ann_wnd+0xa4>)
 800bb98:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bb9c:	4924      	ldr	r1, [pc, #144]	; (800bc30 <tcp_update_rcv_ann_wnd+0xa8>)
 800bb9e:	4825      	ldr	r0, [pc, #148]	; (800bc34 <tcp_update_rcv_ann_wnd+0xac>)
 800bba0:	f008 fd14 	bl	80145cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bbac:	4413      	add	r3, r2
 800bbae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bbb8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bbbc:	bf28      	it	cs
 800bbbe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bbc2:	b292      	uxth	r2, r2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	db08      	blt.n	800bbe0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	e020      	b.n	800bc22 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	dd03      	ble.n	800bbf6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bbf4:	e014      	b.n	800bc20 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc08:	d306      	bcc.n	800bc18 <tcp_update_rcv_ann_wnd+0x90>
 800bc0a:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <tcp_update_rcv_ann_wnd+0xa4>)
 800bc0c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bc10:	4909      	ldr	r1, [pc, #36]	; (800bc38 <tcp_update_rcv_ann_wnd+0xb0>)
 800bc12:	4808      	ldr	r0, [pc, #32]	; (800bc34 <tcp_update_rcv_ann_wnd+0xac>)
 800bc14:	f008 fcda 	bl	80145cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bc20:	2300      	movs	r3, #0
  }
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	08016ca0 	.word	0x08016ca0
 800bc30:	08016efc 	.word	0x08016efc
 800bc34:	08016ce4 	.word	0x08016ce4
 800bc38:	08016f20 	.word	0x08016f20

0800bc3c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d107      	bne.n	800bc5e <tcp_recved+0x22>
 800bc4e:	4b1f      	ldr	r3, [pc, #124]	; (800bccc <tcp_recved+0x90>)
 800bc50:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bc54:	491e      	ldr	r1, [pc, #120]	; (800bcd0 <tcp_recved+0x94>)
 800bc56:	481f      	ldr	r0, [pc, #124]	; (800bcd4 <tcp_recved+0x98>)
 800bc58:	f008 fcb8 	bl	80145cc <iprintf>
 800bc5c:	e032      	b.n	800bcc4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	7d1b      	ldrb	r3, [r3, #20]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d106      	bne.n	800bc74 <tcp_recved+0x38>
 800bc66:	4b19      	ldr	r3, [pc, #100]	; (800bccc <tcp_recved+0x90>)
 800bc68:	f240 32d2 	movw	r2, #978	; 0x3d2
 800bc6c:	491a      	ldr	r1, [pc, #104]	; (800bcd8 <tcp_recved+0x9c>)
 800bc6e:	4819      	ldr	r0, [pc, #100]	; (800bcd4 <tcp_recved+0x98>)
 800bc70:	f008 fcac 	bl	80145cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bc78:	887b      	ldrh	r3, [r7, #2]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bc7e:	89fb      	ldrh	r3, [r7, #14]
 800bc80:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bc84:	d804      	bhi.n	800bc90 <tcp_recved+0x54>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc8a:	89fa      	ldrh	r2, [r7, #14]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d204      	bcs.n	800bc9a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bc96:	851a      	strh	r2, [r3, #40]	; 0x28
 800bc98:	e002      	b.n	800bca0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	89fa      	ldrh	r2, [r7, #14]
 800bc9e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff ff71 	bl	800bb88 <tcp_update_rcv_ann_wnd>
 800bca6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bcae:	d309      	bcc.n	800bcc4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8b5b      	ldrh	r3, [r3, #26]
 800bcb4:	f043 0302 	orr.w	r3, r3, #2
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f004 fbaa 	bl	8010418 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	08016ca0 	.word	0x08016ca0
 800bcd0:	08016f3c 	.word	0x08016f3c
 800bcd4:	08016ce4 	.word	0x08016ce4
 800bcd8:	08016f54 	.word	0x08016f54

0800bcdc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800bce6:	4b1e      	ldr	r3, [pc, #120]	; (800bd60 <tcp_new_port+0x84>)
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	3301      	adds	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	4b1c      	ldr	r3, [pc, #112]	; (800bd60 <tcp_new_port+0x84>)
 800bcf0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800bcf2:	4b1b      	ldr	r3, [pc, #108]	; (800bd60 <tcp_new_port+0x84>)
 800bcf4:	881b      	ldrh	r3, [r3, #0]
 800bcf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d103      	bne.n	800bd06 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800bcfe:	4b18      	ldr	r3, [pc, #96]	; (800bd60 <tcp_new_port+0x84>)
 800bd00:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bd04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800bd06:	2300      	movs	r3, #0
 800bd08:	71fb      	strb	r3, [r7, #7]
 800bd0a:	e01e      	b.n	800bd4a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800bd0c:	79fb      	ldrb	r3, [r7, #7]
 800bd0e:	4a15      	ldr	r2, [pc, #84]	; (800bd64 <tcp_new_port+0x88>)
 800bd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	e011      	b.n	800bd3e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	8ada      	ldrh	r2, [r3, #22]
 800bd1e:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <tcp_new_port+0x84>)
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d108      	bne.n	800bd38 <tcp_new_port+0x5c>
        n++;
 800bd26:	88bb      	ldrh	r3, [r7, #4]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800bd2c:	88bb      	ldrh	r3, [r7, #4]
 800bd2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd32:	d3d8      	bcc.n	800bce6 <tcp_new_port+0xa>
          return 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	e00d      	b.n	800bd54 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	603b      	str	r3, [r7, #0]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1ea      	bne.n	800bd1a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800bd44:	79fb      	ldrb	r3, [r7, #7]
 800bd46:	3301      	adds	r3, #1
 800bd48:	71fb      	strb	r3, [r7, #7]
 800bd4a:	79fb      	ldrb	r3, [r7, #7]
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d9dd      	bls.n	800bd0c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800bd50:	4b03      	ldr	r3, [pc, #12]	; (800bd60 <tcp_new_port+0x84>)
 800bd52:	881b      	ldrh	r3, [r3, #0]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	20000010 	.word	0x20000010
 800bd64:	08018cb8 	.word	0x08018cb8

0800bd68 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bd68:	b5b0      	push	{r4, r5, r7, lr}
 800bd6a:	b090      	sub	sp, #64	; 0x40
 800bd6c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bd74:	4b94      	ldr	r3, [pc, #592]	; (800bfc8 <tcp_slowtmr+0x260>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	4a93      	ldr	r2, [pc, #588]	; (800bfc8 <tcp_slowtmr+0x260>)
 800bd7c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bd7e:	4b93      	ldr	r3, [pc, #588]	; (800bfcc <tcp_slowtmr+0x264>)
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	3301      	adds	r3, #1
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	4b91      	ldr	r3, [pc, #580]	; (800bfcc <tcp_slowtmr+0x264>)
 800bd88:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bd8e:	4b90      	ldr	r3, [pc, #576]	; (800bfd0 <tcp_slowtmr+0x268>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bd94:	e29d      	b.n	800c2d2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd98:	7d1b      	ldrb	r3, [r3, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d106      	bne.n	800bdac <tcp_slowtmr+0x44>
 800bd9e:	4b8d      	ldr	r3, [pc, #564]	; (800bfd4 <tcp_slowtmr+0x26c>)
 800bda0:	f240 42be 	movw	r2, #1214	; 0x4be
 800bda4:	498c      	ldr	r1, [pc, #560]	; (800bfd8 <tcp_slowtmr+0x270>)
 800bda6:	488d      	ldr	r0, [pc, #564]	; (800bfdc <tcp_slowtmr+0x274>)
 800bda8:	f008 fc10 	bl	80145cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdae:	7d1b      	ldrb	r3, [r3, #20]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d106      	bne.n	800bdc2 <tcp_slowtmr+0x5a>
 800bdb4:	4b87      	ldr	r3, [pc, #540]	; (800bfd4 <tcp_slowtmr+0x26c>)
 800bdb6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bdba:	4989      	ldr	r1, [pc, #548]	; (800bfe0 <tcp_slowtmr+0x278>)
 800bdbc:	4887      	ldr	r0, [pc, #540]	; (800bfdc <tcp_slowtmr+0x274>)
 800bdbe:	f008 fc05 	bl	80145cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc4:	7d1b      	ldrb	r3, [r3, #20]
 800bdc6:	2b0a      	cmp	r3, #10
 800bdc8:	d106      	bne.n	800bdd8 <tcp_slowtmr+0x70>
 800bdca:	4b82      	ldr	r3, [pc, #520]	; (800bfd4 <tcp_slowtmr+0x26c>)
 800bdcc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bdd0:	4984      	ldr	r1, [pc, #528]	; (800bfe4 <tcp_slowtmr+0x27c>)
 800bdd2:	4882      	ldr	r0, [pc, #520]	; (800bfdc <tcp_slowtmr+0x274>)
 800bdd4:	f008 fbfa 	bl	80145cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdda:	7f9a      	ldrb	r2, [r3, #30]
 800bddc:	4b7b      	ldr	r3, [pc, #492]	; (800bfcc <tcp_slowtmr+0x264>)
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d105      	bne.n	800bdf0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bdee:	e270      	b.n	800c2d2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bdf0:	4b76      	ldr	r3, [pc, #472]	; (800bfcc <tcp_slowtmr+0x264>)
 800bdf2:	781a      	ldrb	r2, [r3, #0]
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bdfe:	2300      	movs	r3, #0
 800be00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	7d1b      	ldrb	r3, [r3, #20]
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d10a      	bne.n	800be22 <tcp_slowtmr+0xba>
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be12:	2b05      	cmp	r3, #5
 800be14:	d905      	bls.n	800be22 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800be16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be1a:	3301      	adds	r3, #1
 800be1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be20:	e11e      	b.n	800c060 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be28:	2b0b      	cmp	r3, #11
 800be2a:	d905      	bls.n	800be38 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800be2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be30:	3301      	adds	r3, #1
 800be32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be36:	e113      	b.n	800c060 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800be38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d075      	beq.n	800bf2e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	2b00      	cmp	r3, #0
 800be48:	d006      	beq.n	800be58 <tcp_slowtmr+0xf0>
 800be4a:	4b62      	ldr	r3, [pc, #392]	; (800bfd4 <tcp_slowtmr+0x26c>)
 800be4c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800be50:	4965      	ldr	r1, [pc, #404]	; (800bfe8 <tcp_slowtmr+0x280>)
 800be52:	4862      	ldr	r0, [pc, #392]	; (800bfdc <tcp_slowtmr+0x274>)
 800be54:	f008 fbba 	bl	80145cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d106      	bne.n	800be6e <tcp_slowtmr+0x106>
 800be60:	4b5c      	ldr	r3, [pc, #368]	; (800bfd4 <tcp_slowtmr+0x26c>)
 800be62:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800be66:	4961      	ldr	r1, [pc, #388]	; (800bfec <tcp_slowtmr+0x284>)
 800be68:	485c      	ldr	r0, [pc, #368]	; (800bfdc <tcp_slowtmr+0x274>)
 800be6a:	f008 fbaf 	bl	80145cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800be6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800be74:	2b0b      	cmp	r3, #11
 800be76:	d905      	bls.n	800be84 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800be78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be7c:	3301      	adds	r3, #1
 800be7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be82:	e0ed      	b.n	800c060 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800be84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800be8a:	3b01      	subs	r3, #1
 800be8c:	4a58      	ldr	r2, [pc, #352]	; (800bff0 <tcp_slowtmr+0x288>)
 800be8e:	5cd3      	ldrb	r3, [r2, r3]
 800be90:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800be92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800be98:	7c7a      	ldrb	r2, [r7, #17]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d907      	bls.n	800beae <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800be9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bea4:	3301      	adds	r3, #1
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beaa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800beae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800beb4:	7c7a      	ldrb	r2, [r7, #17]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	f200 80d2 	bhi.w	800c060 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bebc:	2301      	movs	r3, #1
 800bebe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d108      	bne.n	800bedc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800beca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800becc:	f005 f94c 	bl	8011168 <tcp_zero_window_probe>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d014      	beq.n	800bf00 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800bed6:	2300      	movs	r3, #0
 800bed8:	623b      	str	r3, [r7, #32]
 800beda:	e011      	b.n	800bf00 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bee2:	4619      	mov	r1, r3
 800bee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bee6:	f004 f811 	bl	800ff0c <tcp_split_unsent_seg>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d107      	bne.n	800bf00 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800bef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bef2:	f004 fa91 	bl	8010418 <tcp_output>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bf00:	6a3b      	ldr	r3, [r7, #32]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 80ac 	beq.w	800c060 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bf16:	2b06      	cmp	r3, #6
 800bf18:	f200 80a2 	bhi.w	800c060 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bf22:	3301      	adds	r3, #1
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bf2c:	e098      	b.n	800c060 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	db0f      	blt.n	800bf58 <tcp_slowtmr+0x1f0>
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d008      	beq.n	800bf58 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	3301      	adds	r3, #1
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	b21a      	sxth	r2, r3
 800bf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf56:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf60:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bf64:	429a      	cmp	r2, r3
 800bf66:	db7b      	blt.n	800c060 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bf68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf6a:	f004 fd47 	bl	80109fc <tcp_rexmit_rto_prepare>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d007      	beq.n	800bf84 <tcp_slowtmr+0x21c>
 800bf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d171      	bne.n	800c060 <tcp_slowtmr+0x2f8>
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d06d      	beq.n	800c060 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	7d1b      	ldrb	r3, [r3, #20]
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d03a      	beq.n	800c002 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf92:	2b0c      	cmp	r3, #12
 800bf94:	bf28      	it	cs
 800bf96:	230c      	movcs	r3, #12
 800bf98:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bfa0:	10db      	asrs	r3, r3, #3
 800bfa2:	b21b      	sxth	r3, r3
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bfac:	4413      	add	r3, r2
 800bfae:	7efa      	ldrb	r2, [r7, #27]
 800bfb0:	4910      	ldr	r1, [pc, #64]	; (800bff4 <tcp_slowtmr+0x28c>)
 800bfb2:	5c8a      	ldrb	r2, [r1, r2]
 800bfb4:	4093      	lsls	r3, r2
 800bfb6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	dc1a      	bgt.n	800bff8 <tcp_slowtmr+0x290>
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	b21a      	sxth	r2, r3
 800bfc6:	e019      	b.n	800bffc <tcp_slowtmr+0x294>
 800bfc8:	2000aacc 	.word	0x2000aacc
 800bfcc:	2000409a 	.word	0x2000409a
 800bfd0:	2000aac8 	.word	0x2000aac8
 800bfd4:	08016ca0 	.word	0x08016ca0
 800bfd8:	08016fe4 	.word	0x08016fe4
 800bfdc:	08016ce4 	.word	0x08016ce4
 800bfe0:	08017010 	.word	0x08017010
 800bfe4:	0801703c 	.word	0x0801703c
 800bfe8:	0801706c 	.word	0x0801706c
 800bfec:	080170a0 	.word	0x080170a0
 800bff0:	08018cb0 	.word	0x08018cb0
 800bff4:	08018ca0 	.word	0x08018ca0
 800bff8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c004:	2200      	movs	r2, #0
 800c006:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c014:	4293      	cmp	r3, r2
 800c016:	bf28      	it	cs
 800c018:	4613      	movcs	r3, r2
 800c01a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c01c:	8a7b      	ldrh	r3, [r7, #18]
 800c01e:	085b      	lsrs	r3, r3, #1
 800c020:	b29a      	uxth	r2, r3
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	b29b      	uxth	r3, r3
 800c036:	429a      	cmp	r2, r3
 800c038:	d206      	bcs.n	800c048 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	b29a      	uxth	r2, r3
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c054:	2200      	movs	r2, #0
 800c056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c05a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c05c:	f004 fd3e 	bl	8010adc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c062:	7d1b      	ldrb	r3, [r3, #20]
 800c064:	2b06      	cmp	r3, #6
 800c066:	d111      	bne.n	800c08c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06a:	8b5b      	ldrh	r3, [r3, #26]
 800c06c:	f003 0310 	and.w	r3, r3, #16
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00b      	beq.n	800c08c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c074:	4b9c      	ldr	r3, [pc, #624]	; (800c2e8 <tcp_slowtmr+0x580>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	6a1b      	ldr	r3, [r3, #32]
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	2b28      	cmp	r3, #40	; 0x28
 800c080:	d904      	bls.n	800c08c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c086:	3301      	adds	r3, #1
 800c088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	7a5b      	ldrb	r3, [r3, #9]
 800c090:	f003 0308 	and.w	r3, r3, #8
 800c094:	2b00      	cmp	r3, #0
 800c096:	d04a      	beq.n	800c12e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d003      	beq.n	800c0a8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c0a4:	2b07      	cmp	r3, #7
 800c0a6:	d142      	bne.n	800c12e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c0a8:	4b8f      	ldr	r3, [pc, #572]	; (800c2e8 <tcp_slowtmr+0x580>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ae:	6a1b      	ldr	r3, [r3, #32]
 800c0b0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c0b8:	4b8c      	ldr	r3, [pc, #560]	; (800c2ec <tcp_slowtmr+0x584>)
 800c0ba:	440b      	add	r3, r1
 800c0bc:	498c      	ldr	r1, [pc, #560]	; (800c2f0 <tcp_slowtmr+0x588>)
 800c0be:	fba1 1303 	umull	r1, r3, r1, r3
 800c0c2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d90a      	bls.n	800c0de <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c0d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c0dc:	e027      	b.n	800c12e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c0de:	4b82      	ldr	r3, [pc, #520]	; (800c2e8 <tcp_slowtmr+0x580>)
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	4b7f      	ldr	r3, [pc, #508]	; (800c2f4 <tcp_slowtmr+0x58c>)
 800c0f8:	fb03 f300 	mul.w	r3, r3, r0
 800c0fc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c0fe:	497c      	ldr	r1, [pc, #496]	; (800c2f0 <tcp_slowtmr+0x588>)
 800c100:	fba1 1303 	umull	r1, r3, r1, r3
 800c104:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c106:	429a      	cmp	r2, r3
 800c108:	d911      	bls.n	800c12e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c10c:	f004 ffec 	bl	80110e8 <tcp_keepalive>
 800c110:	4603      	mov	r3, r0
 800c112:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c116:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d107      	bne.n	800c12e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c120:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c124:	3301      	adds	r3, #1
 800c126:	b2da      	uxtb	r2, r3
 800c128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c132:	2b00      	cmp	r3, #0
 800c134:	d011      	beq.n	800c15a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c136:	4b6c      	ldr	r3, [pc, #432]	; (800c2e8 <tcp_slowtmr+0x580>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	1ad2      	subs	r2, r2, r3
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c142:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c146:	4619      	mov	r1, r3
 800c148:	460b      	mov	r3, r1
 800c14a:	005b      	lsls	r3, r3, #1
 800c14c:	440b      	add	r3, r1
 800c14e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c150:	429a      	cmp	r2, r3
 800c152:	d302      	bcc.n	800c15a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c156:	f000 feab 	bl	800ceb0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15c:	7d1b      	ldrb	r3, [r3, #20]
 800c15e:	2b03      	cmp	r3, #3
 800c160:	d10b      	bne.n	800c17a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c162:	4b61      	ldr	r3, [pc, #388]	; (800c2e8 <tcp_slowtmr+0x580>)
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	2b28      	cmp	r3, #40	; 0x28
 800c16e:	d904      	bls.n	800c17a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c174:	3301      	adds	r3, #1
 800c176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	7d1b      	ldrb	r3, [r3, #20]
 800c17e:	2b09      	cmp	r3, #9
 800c180:	d10b      	bne.n	800c19a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c182:	4b59      	ldr	r3, [pc, #356]	; (800c2e8 <tcp_slowtmr+0x580>)
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	2bf0      	cmp	r3, #240	; 0xf0
 800c18e:	d904      	bls.n	800c19a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c194:	3301      	adds	r3, #1
 800c196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c19a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d060      	beq.n	800c264 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c1aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1ac:	f000 fccc 	bl	800cb48 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d010      	beq.n	800c1d8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c1b6:	4b50      	ldr	r3, [pc, #320]	; (800c2f8 <tcp_slowtmr+0x590>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d106      	bne.n	800c1ce <tcp_slowtmr+0x466>
 800c1c0:	4b4e      	ldr	r3, [pc, #312]	; (800c2fc <tcp_slowtmr+0x594>)
 800c1c2:	f240 526d 	movw	r2, #1389	; 0x56d
 800c1c6:	494e      	ldr	r1, [pc, #312]	; (800c300 <tcp_slowtmr+0x598>)
 800c1c8:	484e      	ldr	r0, [pc, #312]	; (800c304 <tcp_slowtmr+0x59c>)
 800c1ca:	f008 f9ff 	bl	80145cc <iprintf>
        prev->next = pcb->next;
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	68da      	ldr	r2, [r3, #12]
 800c1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d4:	60da      	str	r2, [r3, #12]
 800c1d6:	e00f      	b.n	800c1f8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c1d8:	4b47      	ldr	r3, [pc, #284]	; (800c2f8 <tcp_slowtmr+0x590>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d006      	beq.n	800c1f0 <tcp_slowtmr+0x488>
 800c1e2:	4b46      	ldr	r3, [pc, #280]	; (800c2fc <tcp_slowtmr+0x594>)
 800c1e4:	f240 5271 	movw	r2, #1393	; 0x571
 800c1e8:	4947      	ldr	r1, [pc, #284]	; (800c308 <tcp_slowtmr+0x5a0>)
 800c1ea:	4846      	ldr	r0, [pc, #280]	; (800c304 <tcp_slowtmr+0x59c>)
 800c1ec:	f008 f9ee 	bl	80145cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	4a40      	ldr	r2, [pc, #256]	; (800c2f8 <tcp_slowtmr+0x590>)
 800c1f6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c1f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d013      	beq.n	800c228 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c206:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c208:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20c:	3304      	adds	r3, #4
 800c20e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c210:	8ad2      	ldrh	r2, [r2, #22]
 800c212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c214:	8b09      	ldrh	r1, [r1, #24]
 800c216:	9102      	str	r1, [sp, #8]
 800c218:	9201      	str	r2, [sp, #4]
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	462b      	mov	r3, r5
 800c21e:	4622      	mov	r2, r4
 800c220:	4601      	mov	r1, r0
 800c222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c224:	f004 feac 	bl	8010f80 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c230:	7d1b      	ldrb	r3, [r3, #20]
 800c232:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c236:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c23e:	6838      	ldr	r0, [r7, #0]
 800c240:	f7fe fff0 	bl	800b224 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c244:	4b31      	ldr	r3, [pc, #196]	; (800c30c <tcp_slowtmr+0x5a4>)
 800c246:	2200      	movs	r2, #0
 800c248:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <tcp_slowtmr+0x4f2>
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f06f 010c 	mvn.w	r1, #12
 800c256:	68b8      	ldr	r0, [r7, #8]
 800c258:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c25a:	4b2c      	ldr	r3, [pc, #176]	; (800c30c <tcp_slowtmr+0x5a4>)
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d037      	beq.n	800c2d2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c262:	e592      	b.n	800bd8a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c266:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	7f1b      	ldrb	r3, [r3, #28]
 800c272:	3301      	adds	r3, #1
 800c274:	b2da      	uxtb	r2, r3
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	7f1a      	ldrb	r2, [r3, #28]
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	7f5b      	ldrb	r3, [r3, #29]
 800c282:	429a      	cmp	r2, r3
 800c284:	d325      	bcc.n	800c2d2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	2200      	movs	r2, #0
 800c28a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c28c:	4b1f      	ldr	r3, [pc, #124]	; (800c30c <tcp_slowtmr+0x5a4>)
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <tcp_slowtmr+0x54c>
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2a4:	6912      	ldr	r2, [r2, #16]
 800c2a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4798      	blx	r3
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c2b2:	e002      	b.n	800c2ba <tcp_slowtmr+0x552>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c2ba:	4b14      	ldr	r3, [pc, #80]	; (800c30c <tcp_slowtmr+0x5a4>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d000      	beq.n	800c2c4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c2c2:	e562      	b.n	800bd8a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c2c4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d102      	bne.n	800c2d2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c2cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ce:	f004 f8a3 	bl	8010418 <tcp_output>
  while (pcb != NULL) {
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f47f ad5e 	bne.w	800bd96 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c2de:	4b0c      	ldr	r3, [pc, #48]	; (800c310 <tcp_slowtmr+0x5a8>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c2e4:	e069      	b.n	800c3ba <tcp_slowtmr+0x652>
 800c2e6:	bf00      	nop
 800c2e8:	2000aacc 	.word	0x2000aacc
 800c2ec:	000a4cb8 	.word	0x000a4cb8
 800c2f0:	10624dd3 	.word	0x10624dd3
 800c2f4:	000124f8 	.word	0x000124f8
 800c2f8:	2000aac8 	.word	0x2000aac8
 800c2fc:	08016ca0 	.word	0x08016ca0
 800c300:	080170d8 	.word	0x080170d8
 800c304:	08016ce4 	.word	0x08016ce4
 800c308:	08017104 	.word	0x08017104
 800c30c:	2000aac4 	.word	0x2000aac4
 800c310:	2000aad8 	.word	0x2000aad8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c316:	7d1b      	ldrb	r3, [r3, #20]
 800c318:	2b0a      	cmp	r3, #10
 800c31a:	d006      	beq.n	800c32a <tcp_slowtmr+0x5c2>
 800c31c:	4b2b      	ldr	r3, [pc, #172]	; (800c3cc <tcp_slowtmr+0x664>)
 800c31e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c322:	492b      	ldr	r1, [pc, #172]	; (800c3d0 <tcp_slowtmr+0x668>)
 800c324:	482b      	ldr	r0, [pc, #172]	; (800c3d4 <tcp_slowtmr+0x66c>)
 800c326:	f008 f951 	bl	80145cc <iprintf>
    pcb_remove = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c330:	4b29      	ldr	r3, [pc, #164]	; (800c3d8 <tcp_slowtmr+0x670>)
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	6a1b      	ldr	r3, [r3, #32]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	2bf0      	cmp	r3, #240	; 0xf0
 800c33c:	d904      	bls.n	800c348 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c33e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c342:	3301      	adds	r3, #1
 800c344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d02f      	beq.n	800c3b0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c352:	f000 fbf9 	bl	800cb48 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d010      	beq.n	800c37e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c35c:	4b1f      	ldr	r3, [pc, #124]	; (800c3dc <tcp_slowtmr+0x674>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c362:	429a      	cmp	r2, r3
 800c364:	d106      	bne.n	800c374 <tcp_slowtmr+0x60c>
 800c366:	4b19      	ldr	r3, [pc, #100]	; (800c3cc <tcp_slowtmr+0x664>)
 800c368:	f240 52af 	movw	r2, #1455	; 0x5af
 800c36c:	491c      	ldr	r1, [pc, #112]	; (800c3e0 <tcp_slowtmr+0x678>)
 800c36e:	4819      	ldr	r0, [pc, #100]	; (800c3d4 <tcp_slowtmr+0x66c>)
 800c370:	f008 f92c 	bl	80145cc <iprintf>
        prev->next = pcb->next;
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	68da      	ldr	r2, [r3, #12]
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	60da      	str	r2, [r3, #12]
 800c37c:	e00f      	b.n	800c39e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c37e:	4b17      	ldr	r3, [pc, #92]	; (800c3dc <tcp_slowtmr+0x674>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c384:	429a      	cmp	r2, r3
 800c386:	d006      	beq.n	800c396 <tcp_slowtmr+0x62e>
 800c388:	4b10      	ldr	r3, [pc, #64]	; (800c3cc <tcp_slowtmr+0x664>)
 800c38a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c38e:	4915      	ldr	r1, [pc, #84]	; (800c3e4 <tcp_slowtmr+0x67c>)
 800c390:	4810      	ldr	r0, [pc, #64]	; (800c3d4 <tcp_slowtmr+0x66c>)
 800c392:	f008 f91b 	bl	80145cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	4a10      	ldr	r2, [pc, #64]	; (800c3dc <tcp_slowtmr+0x674>)
 800c39c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c3a8:	69f8      	ldr	r0, [r7, #28]
 800c3aa:	f7fe ff3b 	bl	800b224 <tcp_free>
 800c3ae:	e004      	b.n	800c3ba <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1a9      	bne.n	800c314 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	3730      	adds	r7, #48	; 0x30
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bdb0      	pop	{r4, r5, r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	08016ca0 	.word	0x08016ca0
 800c3d0:	08017130 	.word	0x08017130
 800c3d4:	08016ce4 	.word	0x08016ce4
 800c3d8:	2000aacc 	.word	0x2000aacc
 800c3dc:	2000aad8 	.word	0x2000aad8
 800c3e0:	08017160 	.word	0x08017160
 800c3e4:	08017188 	.word	0x08017188

0800c3e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c3ee:	4b2d      	ldr	r3, [pc, #180]	; (800c4a4 <tcp_fasttmr+0xbc>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	4b2b      	ldr	r3, [pc, #172]	; (800c4a4 <tcp_fasttmr+0xbc>)
 800c3f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c3fa:	4b2b      	ldr	r3, [pc, #172]	; (800c4a8 <tcp_fasttmr+0xc0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c400:	e048      	b.n	800c494 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	7f9a      	ldrb	r2, [r3, #30]
 800c406:	4b27      	ldr	r3, [pc, #156]	; (800c4a4 <tcp_fasttmr+0xbc>)
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d03f      	beq.n	800c48e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c40e:	4b25      	ldr	r3, [pc, #148]	; (800c4a4 <tcp_fasttmr+0xbc>)
 800c410:	781a      	ldrb	r2, [r3, #0]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	8b5b      	ldrh	r3, [r3, #26]
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d010      	beq.n	800c444 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	8b5b      	ldrh	r3, [r3, #26]
 800c426:	f043 0302 	orr.w	r3, r3, #2
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f003 fff1 	bl	8010418 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	8b5b      	ldrh	r3, [r3, #26]
 800c43a:	f023 0303 	bic.w	r3, r3, #3
 800c43e:	b29a      	uxth	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	8b5b      	ldrh	r3, [r3, #26]
 800c448:	f003 0308 	and.w	r3, r3, #8
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d009      	beq.n	800c464 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	8b5b      	ldrh	r3, [r3, #26]
 800c454:	f023 0308 	bic.w	r3, r3, #8
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7ff f874 	bl	800b54c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c472:	4b0e      	ldr	r3, [pc, #56]	; (800c4ac <tcp_fasttmr+0xc4>)
 800c474:	2200      	movs	r2, #0
 800c476:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f819 	bl	800c4b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c47e:	4b0b      	ldr	r3, [pc, #44]	; (800c4ac <tcp_fasttmr+0xc4>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d000      	beq.n	800c488 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c486:	e7b8      	b.n	800c3fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	607b      	str	r3, [r7, #4]
 800c48c:	e002      	b.n	800c494 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1b3      	bne.n	800c402 <tcp_fasttmr+0x1a>
    }
  }
}
 800c49a:	bf00      	nop
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	2000409a 	.word	0x2000409a
 800c4a8:	2000aac8 	.word	0x2000aac8
 800c4ac:	2000aac4 	.word	0x2000aac4

0800c4b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c4b0:	b590      	push	{r4, r7, lr}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <tcp_process_refused_data+0x22>
 800c4be:	4b37      	ldr	r3, [pc, #220]	; (800c59c <tcp_process_refused_data+0xec>)
 800c4c0:	f240 6209 	movw	r2, #1545	; 0x609
 800c4c4:	4936      	ldr	r1, [pc, #216]	; (800c5a0 <tcp_process_refused_data+0xf0>)
 800c4c6:	4837      	ldr	r0, [pc, #220]	; (800c5a4 <tcp_process_refused_data+0xf4>)
 800c4c8:	f008 f880 	bl	80145cc <iprintf>
 800c4cc:	f06f 030f 	mvn.w	r3, #15
 800c4d0:	e060      	b.n	800c594 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4d6:	7b5b      	ldrb	r3, [r3, #13]
 800c4d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <tcp_process_refused_data+0x58>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6918      	ldr	r0, [r3, #16]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	6879      	ldr	r1, [r7, #4]
 800c500:	47a0      	blx	r4
 800c502:	4603      	mov	r3, r0
 800c504:	73fb      	strb	r3, [r7, #15]
 800c506:	e007      	b.n	800c518 <tcp_process_refused_data+0x68>
 800c508:	2300      	movs	r3, #0
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	6879      	ldr	r1, [r7, #4]
 800c50e:	2000      	movs	r0, #0
 800c510:	f000 f8a4 	bl	800c65c <tcp_recv_null>
 800c514:	4603      	mov	r3, r0
 800c516:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d12a      	bne.n	800c576 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	f003 0320 	and.w	r3, r3, #32
 800c526:	2b00      	cmp	r3, #0
 800c528:	d033      	beq.n	800c592 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c52e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c532:	d005      	beq.n	800c540 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c538:	3301      	adds	r3, #1
 800c53a:	b29a      	uxth	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00b      	beq.n	800c562 <tcp_process_refused_data+0xb2>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6918      	ldr	r0, [r3, #16]
 800c554:	2300      	movs	r3, #0
 800c556:	2200      	movs	r2, #0
 800c558:	6879      	ldr	r1, [r7, #4]
 800c55a:	47a0      	blx	r4
 800c55c:	4603      	mov	r3, r0
 800c55e:	73fb      	strb	r3, [r7, #15]
 800c560:	e001      	b.n	800c566 <tcp_process_refused_data+0xb6>
 800c562:	2300      	movs	r3, #0
 800c564:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c56a:	f113 0f0d 	cmn.w	r3, #13
 800c56e:	d110      	bne.n	800c592 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c570:	f06f 030c 	mvn.w	r3, #12
 800c574:	e00e      	b.n	800c594 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c57a:	f113 0f0d 	cmn.w	r3, #13
 800c57e:	d102      	bne.n	800c586 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c580:	f06f 030c 	mvn.w	r3, #12
 800c584:	e006      	b.n	800c594 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c58c:	f06f 0304 	mvn.w	r3, #4
 800c590:	e000      	b.n	800c594 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd90      	pop	{r4, r7, pc}
 800c59c:	08016ca0 	.word	0x08016ca0
 800c5a0:	080171b0 	.word	0x080171b0
 800c5a4:	08016ce4 	.word	0x08016ce4

0800c5a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c5b0:	e007      	b.n	800c5c2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f80a 	bl	800c5d2 <tcp_seg_free>
    seg = next;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1f4      	bne.n	800c5b2 <tcp_segs_free+0xa>
  }
}
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00c      	beq.n	800c5fa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fe fb6d 	bl	800accc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c5f2:	6879      	ldr	r1, [r7, #4]
 800c5f4:	2003      	movs	r0, #3
 800c5f6:	f7fd fcc5 	bl	8009f84 <memp_free>
  }
}
 800c5fa:	bf00      	nop
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
	...

0800c604 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d106      	bne.n	800c620 <tcp_seg_copy+0x1c>
 800c612:	4b0f      	ldr	r3, [pc, #60]	; (800c650 <tcp_seg_copy+0x4c>)
 800c614:	f240 6282 	movw	r2, #1666	; 0x682
 800c618:	490e      	ldr	r1, [pc, #56]	; (800c654 <tcp_seg_copy+0x50>)
 800c61a:	480f      	ldr	r0, [pc, #60]	; (800c658 <tcp_seg_copy+0x54>)
 800c61c:	f007 ffd6 	bl	80145cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c620:	2003      	movs	r0, #3
 800c622:	f7fd fc5d 	bl	8009ee0 <memp_malloc>
 800c626:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <tcp_seg_copy+0x2e>
    return NULL;
 800c62e:	2300      	movs	r3, #0
 800c630:	e00a      	b.n	800c648 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c632:	2210      	movs	r2, #16
 800c634:	6879      	ldr	r1, [r7, #4]
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f007 ffb2 	bl	80145a0 <memcpy>
  pbuf_ref(cseg->p);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	4618      	mov	r0, r3
 800c642:	f7fe fbe9 	bl	800ae18 <pbuf_ref>
  return cseg;
 800c646:	68fb      	ldr	r3, [r7, #12]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	08016ca0 	.word	0x08016ca0
 800c654:	080171f4 	.word	0x080171f4
 800c658:	08016ce4 	.word	0x08016ce4

0800c65c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d109      	bne.n	800c684 <tcp_recv_null+0x28>
 800c670:	4b12      	ldr	r3, [pc, #72]	; (800c6bc <tcp_recv_null+0x60>)
 800c672:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c676:	4912      	ldr	r1, [pc, #72]	; (800c6c0 <tcp_recv_null+0x64>)
 800c678:	4812      	ldr	r0, [pc, #72]	; (800c6c4 <tcp_recv_null+0x68>)
 800c67a:	f007 ffa7 	bl	80145cc <iprintf>
 800c67e:	f06f 030f 	mvn.w	r3, #15
 800c682:	e016      	b.n	800c6b2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d009      	beq.n	800c69e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	891b      	ldrh	r3, [r3, #8]
 800c68e:	4619      	mov	r1, r3
 800c690:	68b8      	ldr	r0, [r7, #8]
 800c692:	f7ff fad3 	bl	800bc3c <tcp_recved>
    pbuf_free(p);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7fe fb18 	bl	800accc <pbuf_free>
 800c69c:	e008      	b.n	800c6b0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c69e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d104      	bne.n	800c6b0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c6a6:	68b8      	ldr	r0, [r7, #8]
 800c6a8:	f7fe ffba 	bl	800b620 <tcp_close>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	e000      	b.n	800c6b2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	08016ca0 	.word	0x08016ca0
 800c6c0:	08017210 	.word	0x08017210
 800c6c4:	08016ce4 	.word	0x08016ce4

0800c6c8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c6d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	db01      	blt.n	800c6de <tcp_kill_prio+0x16>
 800c6da:	79fb      	ldrb	r3, [r7, #7]
 800c6dc:	e000      	b.n	800c6e0 <tcp_kill_prio+0x18>
 800c6de:	237f      	movs	r3, #127	; 0x7f
 800c6e0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c6e2:	7afb      	ldrb	r3, [r7, #11]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d034      	beq.n	800c752 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c6e8:	7afb      	ldrb	r3, [r7, #11]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6f6:	4b19      	ldr	r3, [pc, #100]	; (800c75c <tcp_kill_prio+0x94>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	617b      	str	r3, [r7, #20]
 800c6fc:	e01f      	b.n	800c73e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	7d5b      	ldrb	r3, [r3, #21]
 800c702:	7afa      	ldrb	r2, [r7, #11]
 800c704:	429a      	cmp	r2, r3
 800c706:	d80c      	bhi.n	800c722 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c70c:	7afa      	ldrb	r2, [r7, #11]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d112      	bne.n	800c738 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c712:	4b13      	ldr	r3, [pc, #76]	; (800c760 <tcp_kill_prio+0x98>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d80a      	bhi.n	800c738 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c722:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <tcp_kill_prio+0x98>)
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	7d5b      	ldrb	r3, [r3, #21]
 800c736:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	617b      	str	r3, [r7, #20]
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1dc      	bne.n	800c6fe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d004      	beq.n	800c754 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c74a:	6938      	ldr	r0, [r7, #16]
 800c74c:	f7ff f8ae 	bl	800b8ac <tcp_abort>
 800c750:	e000      	b.n	800c754 <tcp_kill_prio+0x8c>
    return;
 800c752:	bf00      	nop
  }
}
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	2000aac8 	.word	0x2000aac8
 800c760:	2000aacc 	.word	0x2000aacc

0800c764 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c76e:	79fb      	ldrb	r3, [r7, #7]
 800c770:	2b08      	cmp	r3, #8
 800c772:	d009      	beq.n	800c788 <tcp_kill_state+0x24>
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	2b09      	cmp	r3, #9
 800c778:	d006      	beq.n	800c788 <tcp_kill_state+0x24>
 800c77a:	4b1a      	ldr	r3, [pc, #104]	; (800c7e4 <tcp_kill_state+0x80>)
 800c77c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c780:	4919      	ldr	r1, [pc, #100]	; (800c7e8 <tcp_kill_state+0x84>)
 800c782:	481a      	ldr	r0, [pc, #104]	; (800c7ec <tcp_kill_state+0x88>)
 800c784:	f007 ff22 	bl	80145cc <iprintf>

  inactivity = 0;
 800c788:	2300      	movs	r3, #0
 800c78a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c78c:	2300      	movs	r3, #0
 800c78e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c790:	4b17      	ldr	r3, [pc, #92]	; (800c7f0 <tcp_kill_state+0x8c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	617b      	str	r3, [r7, #20]
 800c796:	e017      	b.n	800c7c8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	7d1b      	ldrb	r3, [r3, #20]
 800c79c:	79fa      	ldrb	r2, [r7, #7]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d10f      	bne.n	800c7c2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c7a2:	4b14      	ldr	r3, [pc, #80]	; (800c7f4 <tcp_kill_state+0x90>)
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d807      	bhi.n	800c7c2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c7b2:	4b10      	ldr	r3, [pc, #64]	; (800c7f4 <tcp_kill_state+0x90>)
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	617b      	str	r3, [r7, #20]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1e4      	bne.n	800c798 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d003      	beq.n	800c7dc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	6938      	ldr	r0, [r7, #16]
 800c7d8:	f7fe ffaa 	bl	800b730 <tcp_abandon>
  }
}
 800c7dc:	bf00      	nop
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	08016ca0 	.word	0x08016ca0
 800c7e8:	0801722c 	.word	0x0801722c
 800c7ec:	08016ce4 	.word	0x08016ce4
 800c7f0:	2000aac8 	.word	0x2000aac8
 800c7f4:	2000aacc 	.word	0x2000aacc

0800c7f8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c802:	2300      	movs	r3, #0
 800c804:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c806:	4b12      	ldr	r3, [pc, #72]	; (800c850 <tcp_kill_timewait+0x58>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]
 800c80c:	e012      	b.n	800c834 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c80e:	4b11      	ldr	r3, [pc, #68]	; (800c854 <tcp_kill_timewait+0x5c>)
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6a1b      	ldr	r3, [r3, #32]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d807      	bhi.n	800c82e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c81e:	4b0d      	ldr	r3, [pc, #52]	; (800c854 <tcp_kill_timewait+0x5c>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	1ad3      	subs	r3, r2, r3
 800c828:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	60fb      	str	r3, [r7, #12]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1e9      	bne.n	800c80e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d002      	beq.n	800c846 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c840:	68b8      	ldr	r0, [r7, #8]
 800c842:	f7ff f833 	bl	800b8ac <tcp_abort>
  }
}
 800c846:	bf00      	nop
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	2000aad8 	.word	0x2000aad8
 800c854:	2000aacc 	.word	0x2000aacc

0800c858 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c85e:	4b10      	ldr	r3, [pc, #64]	; (800c8a0 <tcp_handle_closepend+0x48>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c864:	e014      	b.n	800c890 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	8b5b      	ldrh	r3, [r3, #26]
 800c870:	f003 0308 	and.w	r3, r3, #8
 800c874:	2b00      	cmp	r3, #0
 800c876:	d009      	beq.n	800c88c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	8b5b      	ldrh	r3, [r3, #26]
 800c87c:	f023 0308 	bic.w	r3, r3, #8
 800c880:	b29a      	uxth	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7fe fe60 	bl	800b54c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1e7      	bne.n	800c866 <tcp_handle_closepend+0xe>
  }
}
 800c896:	bf00      	nop
 800c898:	bf00      	nop
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	2000aac8 	.word	0x2000aac8

0800c8a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c8ae:	2001      	movs	r0, #1
 800c8b0:	f7fd fb16 	bl	8009ee0 <memp_malloc>
 800c8b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d126      	bne.n	800c90a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c8bc:	f7ff ffcc 	bl	800c858 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c8c0:	f7ff ff9a 	bl	800c7f8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c8c4:	2001      	movs	r0, #1
 800c8c6:	f7fd fb0b 	bl	8009ee0 <memp_malloc>
 800c8ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d11b      	bne.n	800c90a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c8d2:	2009      	movs	r0, #9
 800c8d4:	f7ff ff46 	bl	800c764 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c8d8:	2001      	movs	r0, #1
 800c8da:	f7fd fb01 	bl	8009ee0 <memp_malloc>
 800c8de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d111      	bne.n	800c90a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c8e6:	2008      	movs	r0, #8
 800c8e8:	f7ff ff3c 	bl	800c764 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	f7fd faf7 	bl	8009ee0 <memp_malloc>
 800c8f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d107      	bne.n	800c90a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c8fa:	79fb      	ldrb	r3, [r7, #7]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7ff fee3 	bl	800c6c8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c902:	2001      	movs	r0, #1
 800c904:	f7fd faec 	bl	8009ee0 <memp_malloc>
 800c908:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d03f      	beq.n	800c990 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c910:	229c      	movs	r2, #156	; 0x9c
 800c912:	2100      	movs	r1, #0
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f007 fe51 	bl	80145bc <memset>
    pcb->prio = prio;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	79fa      	ldrb	r2, [r7, #7]
 800c91e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c926:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c930:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	22ff      	movs	r2, #255	; 0xff
 800c93e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c946:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2206      	movs	r2, #6
 800c94c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2206      	movs	r2, #6
 800c954:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c95c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2201      	movs	r2, #1
 800c962:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c966:	4b0d      	ldr	r3, [pc, #52]	; (800c99c <tcp_alloc+0xf8>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c96e:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <tcp_alloc+0xfc>)
 800c970:	781a      	ldrb	r2, [r3, #0]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c97c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	4a08      	ldr	r2, [pc, #32]	; (800c9a4 <tcp_alloc+0x100>)
 800c984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	4a07      	ldr	r2, [pc, #28]	; (800c9a8 <tcp_alloc+0x104>)
 800c98c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c990:	68fb      	ldr	r3, [r7, #12]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	2000aacc 	.word	0x2000aacc
 800c9a0:	2000409a 	.word	0x2000409a
 800c9a4:	0800c65d 	.word	0x0800c65d
 800c9a8:	006ddd00 	.word	0x006ddd00

0800c9ac <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c9b6:	2040      	movs	r0, #64	; 0x40
 800c9b8:	f7ff ff74 	bl	800c8a4 <tcp_alloc>
 800c9bc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800c9be:	68fb      	ldr	r3, [r7, #12]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d002      	beq.n	800c9de <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	683a      	ldr	r2, [r7, #0]
 800c9dc:	611a      	str	r2, [r3, #16]
  }
}
 800c9de:	bf00      	nop
 800c9e0:	370c      	adds	r7, #12
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
	...

0800c9ec <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00e      	beq.n	800ca1a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d106      	bne.n	800ca12 <tcp_recv+0x26>
 800ca04:	4b07      	ldr	r3, [pc, #28]	; (800ca24 <tcp_recv+0x38>)
 800ca06:	f240 72df 	movw	r2, #2015	; 0x7df
 800ca0a:	4907      	ldr	r1, [pc, #28]	; (800ca28 <tcp_recv+0x3c>)
 800ca0c:	4807      	ldr	r0, [pc, #28]	; (800ca2c <tcp_recv+0x40>)
 800ca0e:	f007 fddd 	bl	80145cc <iprintf>
    pcb->recv = recv;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ca1a:	bf00      	nop
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	08016ca0 	.word	0x08016ca0
 800ca28:	0801723c 	.word	0x0801723c
 800ca2c:	08016ce4 	.word	0x08016ce4

0800ca30 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00e      	beq.n	800ca5e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	7d1b      	ldrb	r3, [r3, #20]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d106      	bne.n	800ca56 <tcp_sent+0x26>
 800ca48:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <tcp_sent+0x38>)
 800ca4a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ca4e:	4907      	ldr	r1, [pc, #28]	; (800ca6c <tcp_sent+0x3c>)
 800ca50:	4807      	ldr	r0, [pc, #28]	; (800ca70 <tcp_sent+0x40>)
 800ca52:	f007 fdbb 	bl	80145cc <iprintf>
    pcb->sent = sent;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ca5e:	bf00      	nop
 800ca60:	3708      	adds	r7, #8
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	08016ca0 	.word	0x08016ca0
 800ca6c:	08017264 	.word	0x08017264
 800ca70:	08016ce4 	.word	0x08016ce4

0800ca74 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00e      	beq.n	800caa2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	7d1b      	ldrb	r3, [r3, #20]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d106      	bne.n	800ca9a <tcp_err+0x26>
 800ca8c:	4b07      	ldr	r3, [pc, #28]	; (800caac <tcp_err+0x38>)
 800ca8e:	f640 020d 	movw	r2, #2061	; 0x80d
 800ca92:	4907      	ldr	r1, [pc, #28]	; (800cab0 <tcp_err+0x3c>)
 800ca94:	4807      	ldr	r0, [pc, #28]	; (800cab4 <tcp_err+0x40>)
 800ca96:	f007 fd99 	bl	80145cc <iprintf>
    pcb->errf = err;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800caa2:	bf00      	nop
 800caa4:	3708      	adds	r7, #8
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	08016ca0 	.word	0x08016ca0
 800cab0:	0801728c 	.word	0x0801728c
 800cab4:	08016ce4 	.word	0x08016ce4

0800cab8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d008      	beq.n	800cada <tcp_accept+0x22>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7d1b      	ldrb	r3, [r3, #20]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d104      	bne.n	800cada <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	619a      	str	r2, [r3, #24]
  }
}
 800cada:	bf00      	nop
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
	...

0800cae8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	4613      	mov	r3, r2
 800caf4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d107      	bne.n	800cb0c <tcp_poll+0x24>
 800cafc:	4b0e      	ldr	r3, [pc, #56]	; (800cb38 <tcp_poll+0x50>)
 800cafe:	f640 023d 	movw	r2, #2109	; 0x83d
 800cb02:	490e      	ldr	r1, [pc, #56]	; (800cb3c <tcp_poll+0x54>)
 800cb04:	480e      	ldr	r0, [pc, #56]	; (800cb40 <tcp_poll+0x58>)
 800cb06:	f007 fd61 	bl	80145cc <iprintf>
 800cb0a:	e011      	b.n	800cb30 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	7d1b      	ldrb	r3, [r3, #20]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d106      	bne.n	800cb22 <tcp_poll+0x3a>
 800cb14:	4b08      	ldr	r3, [pc, #32]	; (800cb38 <tcp_poll+0x50>)
 800cb16:	f640 023e 	movw	r2, #2110	; 0x83e
 800cb1a:	490a      	ldr	r1, [pc, #40]	; (800cb44 <tcp_poll+0x5c>)
 800cb1c:	4808      	ldr	r0, [pc, #32]	; (800cb40 <tcp_poll+0x58>)
 800cb1e:	f007 fd55 	bl	80145cc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	79fa      	ldrb	r2, [r7, #7]
 800cb2e:	775a      	strb	r2, [r3, #29]
}
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	08016ca0 	.word	0x08016ca0
 800cb3c:	080172b4 	.word	0x080172b4
 800cb40:	08016ce4 	.word	0x08016ce4
 800cb44:	080172cc 	.word	0x080172cc

0800cb48 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d107      	bne.n	800cb66 <tcp_pcb_purge+0x1e>
 800cb56:	4b21      	ldr	r3, [pc, #132]	; (800cbdc <tcp_pcb_purge+0x94>)
 800cb58:	f640 0251 	movw	r2, #2129	; 0x851
 800cb5c:	4920      	ldr	r1, [pc, #128]	; (800cbe0 <tcp_pcb_purge+0x98>)
 800cb5e:	4821      	ldr	r0, [pc, #132]	; (800cbe4 <tcp_pcb_purge+0x9c>)
 800cb60:	f007 fd34 	bl	80145cc <iprintf>
 800cb64:	e037      	b.n	800cbd6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	7d1b      	ldrb	r3, [r3, #20]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d033      	beq.n	800cbd6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cb72:	2b0a      	cmp	r3, #10
 800cb74:	d02f      	beq.n	800cbd6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d02b      	beq.n	800cbd6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d007      	beq.n	800cb96 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fe f89e 	bl	800accc <pbuf_free>
      pcb->refused_data = NULL;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d002      	beq.n	800cba4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f986 	bl	800ceb0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbaa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7ff fcf9 	bl	800c5a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7ff fcf4 	bl	800c5a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	66da      	str	r2, [r3, #108]	; 0x6c
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	08016ca0 	.word	0x08016ca0
 800cbe0:	080172ec 	.word	0x080172ec
 800cbe4:	08016ce4 	.word	0x08016ce4

0800cbe8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d106      	bne.n	800cc06 <tcp_pcb_remove+0x1e>
 800cbf8:	4b3e      	ldr	r3, [pc, #248]	; (800ccf4 <tcp_pcb_remove+0x10c>)
 800cbfa:	f640 0283 	movw	r2, #2179	; 0x883
 800cbfe:	493e      	ldr	r1, [pc, #248]	; (800ccf8 <tcp_pcb_remove+0x110>)
 800cc00:	483e      	ldr	r0, [pc, #248]	; (800ccfc <tcp_pcb_remove+0x114>)
 800cc02:	f007 fce3 	bl	80145cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d106      	bne.n	800cc1a <tcp_pcb_remove+0x32>
 800cc0c:	4b39      	ldr	r3, [pc, #228]	; (800ccf4 <tcp_pcb_remove+0x10c>)
 800cc0e:	f640 0284 	movw	r2, #2180	; 0x884
 800cc12:	493b      	ldr	r1, [pc, #236]	; (800cd00 <tcp_pcb_remove+0x118>)
 800cc14:	4839      	ldr	r0, [pc, #228]	; (800ccfc <tcp_pcb_remove+0x114>)
 800cc16:	f007 fcd9 	bl	80145cc <iprintf>

  TCP_RMV(pcblist, pcb);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d105      	bne.n	800cc30 <tcp_pcb_remove+0x48>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	68da      	ldr	r2, [r3, #12]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	e013      	b.n	800cc58 <tcp_pcb_remove+0x70>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	60fb      	str	r3, [r7, #12]
 800cc36:	e00c      	b.n	800cc52 <tcp_pcb_remove+0x6a>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d104      	bne.n	800cc4c <tcp_pcb_remove+0x64>
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	68da      	ldr	r2, [r3, #12]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	60da      	str	r2, [r3, #12]
 800cc4a:	e005      	b.n	800cc58 <tcp_pcb_remove+0x70>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	60fb      	str	r3, [r7, #12]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1ef      	bne.n	800cc38 <tcp_pcb_remove+0x50>
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cc5e:	6838      	ldr	r0, [r7, #0]
 800cc60:	f7ff ff72 	bl	800cb48 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	7d1b      	ldrb	r3, [r3, #20]
 800cc68:	2b0a      	cmp	r3, #10
 800cc6a:	d013      	beq.n	800cc94 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d00f      	beq.n	800cc94 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	8b5b      	ldrh	r3, [r3, #26]
 800cc78:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d009      	beq.n	800cc94 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	8b5b      	ldrh	r3, [r3, #26]
 800cc84:	f043 0302 	orr.w	r3, r3, #2
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cc8e:	6838      	ldr	r0, [r7, #0]
 800cc90:	f003 fbc2 	bl	8010418 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	7d1b      	ldrb	r3, [r3, #20]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d020      	beq.n	800ccde <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d006      	beq.n	800ccb2 <tcp_pcb_remove+0xca>
 800cca4:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <tcp_pcb_remove+0x10c>)
 800cca6:	f640 0293 	movw	r2, #2195	; 0x893
 800ccaa:	4916      	ldr	r1, [pc, #88]	; (800cd04 <tcp_pcb_remove+0x11c>)
 800ccac:	4813      	ldr	r0, [pc, #76]	; (800ccfc <tcp_pcb_remove+0x114>)
 800ccae:	f007 fc8d 	bl	80145cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d006      	beq.n	800ccc8 <tcp_pcb_remove+0xe0>
 800ccba:	4b0e      	ldr	r3, [pc, #56]	; (800ccf4 <tcp_pcb_remove+0x10c>)
 800ccbc:	f640 0294 	movw	r2, #2196	; 0x894
 800ccc0:	4911      	ldr	r1, [pc, #68]	; (800cd08 <tcp_pcb_remove+0x120>)
 800ccc2:	480e      	ldr	r0, [pc, #56]	; (800ccfc <tcp_pcb_remove+0x114>)
 800ccc4:	f007 fc82 	bl	80145cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <tcp_pcb_remove+0xf6>
 800ccd0:	4b08      	ldr	r3, [pc, #32]	; (800ccf4 <tcp_pcb_remove+0x10c>)
 800ccd2:	f640 0296 	movw	r2, #2198	; 0x896
 800ccd6:	490d      	ldr	r1, [pc, #52]	; (800cd0c <tcp_pcb_remove+0x124>)
 800ccd8:	4808      	ldr	r0, [pc, #32]	; (800ccfc <tcp_pcb_remove+0x114>)
 800ccda:	f007 fc77 	bl	80145cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	2200      	movs	r2, #0
 800cce2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2200      	movs	r2, #0
 800cce8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ccea:	bf00      	nop
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	08016ca0 	.word	0x08016ca0
 800ccf8:	08017308 	.word	0x08017308
 800ccfc:	08016ce4 	.word	0x08016ce4
 800cd00:	08017324 	.word	0x08017324
 800cd04:	08017344 	.word	0x08017344
 800cd08:	0801735c 	.word	0x0801735c
 800cd0c:	08017378 	.word	0x08017378

0800cd10 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d106      	bne.n	800cd2c <tcp_next_iss+0x1c>
 800cd1e:	4b0a      	ldr	r3, [pc, #40]	; (800cd48 <tcp_next_iss+0x38>)
 800cd20:	f640 02af 	movw	r2, #2223	; 0x8af
 800cd24:	4909      	ldr	r1, [pc, #36]	; (800cd4c <tcp_next_iss+0x3c>)
 800cd26:	480a      	ldr	r0, [pc, #40]	; (800cd50 <tcp_next_iss+0x40>)
 800cd28:	f007 fc50 	bl	80145cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cd2c:	4b09      	ldr	r3, [pc, #36]	; (800cd54 <tcp_next_iss+0x44>)
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	4b09      	ldr	r3, [pc, #36]	; (800cd58 <tcp_next_iss+0x48>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4413      	add	r3, r2
 800cd36:	4a07      	ldr	r2, [pc, #28]	; (800cd54 <tcp_next_iss+0x44>)
 800cd38:	6013      	str	r3, [r2, #0]
  return iss;
 800cd3a:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <tcp_next_iss+0x44>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	08016ca0 	.word	0x08016ca0
 800cd4c:	08017390 	.word	0x08017390
 800cd50:	08016ce4 	.word	0x08016ce4
 800cd54:	20000014 	.word	0x20000014
 800cd58:	2000aacc 	.word	0x2000aacc

0800cd5c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d106      	bne.n	800cd7e <tcp_eff_send_mss_netif+0x22>
 800cd70:	4b14      	ldr	r3, [pc, #80]	; (800cdc4 <tcp_eff_send_mss_netif+0x68>)
 800cd72:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800cd76:	4914      	ldr	r1, [pc, #80]	; (800cdc8 <tcp_eff_send_mss_netif+0x6c>)
 800cd78:	4814      	ldr	r0, [pc, #80]	; (800cdcc <tcp_eff_send_mss_netif+0x70>)
 800cd7a:	f007 fc27 	bl	80145cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cd84:	89fb      	ldrh	r3, [r7, #14]
 800cd86:	e019      	b.n	800cdbc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd8c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cd8e:	8afb      	ldrh	r3, [r7, #22]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d012      	beq.n	800cdba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cd94:	2328      	movs	r3, #40	; 0x28
 800cd96:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cd98:	8afa      	ldrh	r2, [r7, #22]
 800cd9a:	8abb      	ldrh	r3, [r7, #20]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d904      	bls.n	800cdaa <tcp_eff_send_mss_netif+0x4e>
 800cda0:	8afa      	ldrh	r2, [r7, #22]
 800cda2:	8abb      	ldrh	r3, [r7, #20]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	e000      	b.n	800cdac <tcp_eff_send_mss_netif+0x50>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cdae:	8a7a      	ldrh	r2, [r7, #18]
 800cdb0:	89fb      	ldrh	r3, [r7, #14]
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	bf28      	it	cs
 800cdb6:	4613      	movcs	r3, r2
 800cdb8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cdba:	89fb      	ldrh	r3, [r7, #14]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	08016ca0 	.word	0x08016ca0
 800cdc8:	080173ac 	.word	0x080173ac
 800cdcc:	08016ce4 	.word	0x08016ce4

0800cdd0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d119      	bne.n	800ce18 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cde4:	4b10      	ldr	r3, [pc, #64]	; (800ce28 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cde6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cdea:	4910      	ldr	r1, [pc, #64]	; (800ce2c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cdec:	4810      	ldr	r0, [pc, #64]	; (800ce30 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cdee:	f007 fbed 	bl	80145cc <iprintf>

  while (pcb != NULL) {
 800cdf2:	e011      	b.n	800ce18 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d108      	bne.n	800ce12 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f7fe fd50 	bl	800b8ac <tcp_abort>
      pcb = next;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	e002      	b.n	800ce18 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1ea      	bne.n	800cdf4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ce1e:	bf00      	nop
 800ce20:	bf00      	nop
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	08016ca0 	.word	0x08016ca0
 800ce2c:	080173d4 	.word	0x080173d4
 800ce30:	08016ce4 	.word	0x08016ce4

0800ce34 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d02a      	beq.n	800ce9a <tcp_netif_ip_addr_changed+0x66>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d026      	beq.n	800ce9a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ce4c:	4b15      	ldr	r3, [pc, #84]	; (800cea4 <tcp_netif_ip_addr_changed+0x70>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4619      	mov	r1, r3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7ff ffbc 	bl	800cdd0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ce58:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <tcp_netif_ip_addr_changed+0x74>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7ff ffb6 	bl	800cdd0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d017      	beq.n	800ce9a <tcp_netif_ip_addr_changed+0x66>
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d013      	beq.n	800ce9a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce72:	4b0e      	ldr	r3, [pc, #56]	; (800ceac <tcp_netif_ip_addr_changed+0x78>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	e00c      	b.n	800ce94 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d103      	bne.n	800ce8e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1ef      	bne.n	800ce7a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ce9a:	bf00      	nop
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	2000aac8 	.word	0x2000aac8
 800cea8:	2000aad4 	.word	0x2000aad4
 800ceac:	2000aad0 	.word	0x2000aad0

0800ceb0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d007      	beq.n	800ced0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff fb6f 	bl	800c5a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ced0:	bf00      	nop
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ced8:	b590      	push	{r4, r7, lr}
 800ceda:	b08d      	sub	sp, #52	; 0x34
 800cedc:	af04      	add	r7, sp, #16
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d105      	bne.n	800cef4 <tcp_input+0x1c>
 800cee8:	4b9b      	ldr	r3, [pc, #620]	; (800d158 <tcp_input+0x280>)
 800ceea:	2283      	movs	r2, #131	; 0x83
 800ceec:	499b      	ldr	r1, [pc, #620]	; (800d15c <tcp_input+0x284>)
 800ceee:	489c      	ldr	r0, [pc, #624]	; (800d160 <tcp_input+0x288>)
 800cef0:	f007 fb6c 	bl	80145cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	4a9a      	ldr	r2, [pc, #616]	; (800d164 <tcp_input+0x28c>)
 800cefa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	895b      	ldrh	r3, [r3, #10]
 800cf00:	2b13      	cmp	r3, #19
 800cf02:	f240 83c4 	bls.w	800d68e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cf06:	4b98      	ldr	r3, [pc, #608]	; (800d168 <tcp_input+0x290>)
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	4a97      	ldr	r2, [pc, #604]	; (800d168 <tcp_input+0x290>)
 800cf0c:	6812      	ldr	r2, [r2, #0]
 800cf0e:	4611      	mov	r1, r2
 800cf10:	4618      	mov	r0, r3
 800cf12:	f006 f9e1 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f040 83ba 	bne.w	800d692 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cf1e:	4b92      	ldr	r3, [pc, #584]	; (800d168 <tcp_input+0x290>)
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cf26:	2be0      	cmp	r3, #224	; 0xe0
 800cf28:	f000 83b3 	beq.w	800d692 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cf2c:	4b8d      	ldr	r3, [pc, #564]	; (800d164 <tcp_input+0x28c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	899b      	ldrh	r3, [r3, #12]
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fc fb1d 	bl	8009574 <lwip_htons>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	0b1b      	lsrs	r3, r3, #12
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cf46:	7cbb      	ldrb	r3, [r7, #18]
 800cf48:	2b13      	cmp	r3, #19
 800cf4a:	f240 83a4 	bls.w	800d696 <tcp_input+0x7be>
 800cf4e:	7cbb      	ldrb	r3, [r7, #18]
 800cf50:	b29a      	uxth	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	891b      	ldrh	r3, [r3, #8]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	f200 839d 	bhi.w	800d696 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cf5c:	7cbb      	ldrb	r3, [r7, #18]
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	3b14      	subs	r3, #20
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	4b81      	ldr	r3, [pc, #516]	; (800d16c <tcp_input+0x294>)
 800cf66:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cf68:	4b81      	ldr	r3, [pc, #516]	; (800d170 <tcp_input+0x298>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	895a      	ldrh	r2, [r3, #10]
 800cf72:	7cbb      	ldrb	r3, [r7, #18]
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d309      	bcc.n	800cf8e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cf7a:	4b7c      	ldr	r3, [pc, #496]	; (800d16c <tcp_input+0x294>)
 800cf7c:	881a      	ldrh	r2, [r3, #0]
 800cf7e:	4b7d      	ldr	r3, [pc, #500]	; (800d174 <tcp_input+0x29c>)
 800cf80:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cf82:	7cbb      	ldrb	r3, [r7, #18]
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7fd fe1a 	bl	800abc0 <pbuf_remove_header>
 800cf8c:	e04e      	b.n	800d02c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d105      	bne.n	800cfa2 <tcp_input+0xca>
 800cf96:	4b70      	ldr	r3, [pc, #448]	; (800d158 <tcp_input+0x280>)
 800cf98:	22c2      	movs	r2, #194	; 0xc2
 800cf9a:	4977      	ldr	r1, [pc, #476]	; (800d178 <tcp_input+0x2a0>)
 800cf9c:	4870      	ldr	r0, [pc, #448]	; (800d160 <tcp_input+0x288>)
 800cf9e:	f007 fb15 	bl	80145cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cfa2:	2114      	movs	r1, #20
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7fd fe0b 	bl	800abc0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	895a      	ldrh	r2, [r3, #10]
 800cfae:	4b71      	ldr	r3, [pc, #452]	; (800d174 <tcp_input+0x29c>)
 800cfb0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cfb2:	4b6e      	ldr	r3, [pc, #440]	; (800d16c <tcp_input+0x294>)
 800cfb4:	881a      	ldrh	r2, [r3, #0]
 800cfb6:	4b6f      	ldr	r3, [pc, #444]	; (800d174 <tcp_input+0x29c>)
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cfbe:	4b6d      	ldr	r3, [pc, #436]	; (800d174 <tcp_input+0x29c>)
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7fd fdfb 	bl	800abc0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	895b      	ldrh	r3, [r3, #10]
 800cfd0:	8a3a      	ldrh	r2, [r7, #16]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	f200 8361 	bhi.w	800d69a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	4a64      	ldr	r2, [pc, #400]	; (800d170 <tcp_input+0x298>)
 800cfe0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	8a3a      	ldrh	r2, [r7, #16]
 800cfe8:	4611      	mov	r1, r2
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fd fde8 	bl	800abc0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	891a      	ldrh	r2, [r3, #8]
 800cff4:	8a3b      	ldrh	r3, [r7, #16]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	895b      	ldrh	r3, [r3, #10]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d005      	beq.n	800d012 <tcp_input+0x13a>
 800d006:	4b54      	ldr	r3, [pc, #336]	; (800d158 <tcp_input+0x280>)
 800d008:	22df      	movs	r2, #223	; 0xdf
 800d00a:	495c      	ldr	r1, [pc, #368]	; (800d17c <tcp_input+0x2a4>)
 800d00c:	4854      	ldr	r0, [pc, #336]	; (800d160 <tcp_input+0x288>)
 800d00e:	f007 fadd 	bl	80145cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	891a      	ldrh	r2, [r3, #8]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	891b      	ldrh	r3, [r3, #8]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d005      	beq.n	800d02c <tcp_input+0x154>
 800d020:	4b4d      	ldr	r3, [pc, #308]	; (800d158 <tcp_input+0x280>)
 800d022:	22e0      	movs	r2, #224	; 0xe0
 800d024:	4956      	ldr	r1, [pc, #344]	; (800d180 <tcp_input+0x2a8>)
 800d026:	484e      	ldr	r0, [pc, #312]	; (800d160 <tcp_input+0x288>)
 800d028:	f007 fad0 	bl	80145cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d02c:	4b4d      	ldr	r3, [pc, #308]	; (800d164 <tcp_input+0x28c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	b29b      	uxth	r3, r3
 800d034:	4a4b      	ldr	r2, [pc, #300]	; (800d164 <tcp_input+0x28c>)
 800d036:	6814      	ldr	r4, [r2, #0]
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fc fa9b 	bl	8009574 <lwip_htons>
 800d03e:	4603      	mov	r3, r0
 800d040:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d042:	4b48      	ldr	r3, [pc, #288]	; (800d164 <tcp_input+0x28c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	885b      	ldrh	r3, [r3, #2]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	4a46      	ldr	r2, [pc, #280]	; (800d164 <tcp_input+0x28c>)
 800d04c:	6814      	ldr	r4, [r2, #0]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7fc fa90 	bl	8009574 <lwip_htons>
 800d054:	4603      	mov	r3, r0
 800d056:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d058:	4b42      	ldr	r3, [pc, #264]	; (800d164 <tcp_input+0x28c>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	4a41      	ldr	r2, [pc, #260]	; (800d164 <tcp_input+0x28c>)
 800d060:	6814      	ldr	r4, [r2, #0]
 800d062:	4618      	mov	r0, r3
 800d064:	f7fc fa9b 	bl	800959e <lwip_htonl>
 800d068:	4603      	mov	r3, r0
 800d06a:	6063      	str	r3, [r4, #4]
 800d06c:	6863      	ldr	r3, [r4, #4]
 800d06e:	4a45      	ldr	r2, [pc, #276]	; (800d184 <tcp_input+0x2ac>)
 800d070:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d072:	4b3c      	ldr	r3, [pc, #240]	; (800d164 <tcp_input+0x28c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	4a3a      	ldr	r2, [pc, #232]	; (800d164 <tcp_input+0x28c>)
 800d07a:	6814      	ldr	r4, [r2, #0]
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fc fa8e 	bl	800959e <lwip_htonl>
 800d082:	4603      	mov	r3, r0
 800d084:	60a3      	str	r3, [r4, #8]
 800d086:	68a3      	ldr	r3, [r4, #8]
 800d088:	4a3f      	ldr	r2, [pc, #252]	; (800d188 <tcp_input+0x2b0>)
 800d08a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d08c:	4b35      	ldr	r3, [pc, #212]	; (800d164 <tcp_input+0x28c>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	89db      	ldrh	r3, [r3, #14]
 800d092:	b29b      	uxth	r3, r3
 800d094:	4a33      	ldr	r2, [pc, #204]	; (800d164 <tcp_input+0x28c>)
 800d096:	6814      	ldr	r4, [r2, #0]
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fc fa6b 	bl	8009574 <lwip_htons>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d0a2:	4b30      	ldr	r3, [pc, #192]	; (800d164 <tcp_input+0x28c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	899b      	ldrh	r3, [r3, #12]
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fc fa62 	bl	8009574 <lwip_htons>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	4b34      	ldr	r3, [pc, #208]	; (800d18c <tcp_input+0x2b4>)
 800d0bc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	891a      	ldrh	r2, [r3, #8]
 800d0c2:	4b33      	ldr	r3, [pc, #204]	; (800d190 <tcp_input+0x2b8>)
 800d0c4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d0c6:	4b31      	ldr	r3, [pc, #196]	; (800d18c <tcp_input+0x2b4>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	f003 0303 	and.w	r3, r3, #3
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00c      	beq.n	800d0ec <tcp_input+0x214>
    tcplen++;
 800d0d2:	4b2f      	ldr	r3, [pc, #188]	; (800d190 <tcp_input+0x2b8>)
 800d0d4:	881b      	ldrh	r3, [r3, #0]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	4b2d      	ldr	r3, [pc, #180]	; (800d190 <tcp_input+0x2b8>)
 800d0dc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	891a      	ldrh	r2, [r3, #8]
 800d0e2:	4b2b      	ldr	r3, [pc, #172]	; (800d190 <tcp_input+0x2b8>)
 800d0e4:	881b      	ldrh	r3, [r3, #0]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	f200 82d9 	bhi.w	800d69e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0f0:	4b28      	ldr	r3, [pc, #160]	; (800d194 <tcp_input+0x2bc>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	61fb      	str	r3, [r7, #28]
 800d0f6:	e09d      	b.n	800d234 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	7d1b      	ldrb	r3, [r3, #20]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d105      	bne.n	800d10c <tcp_input+0x234>
 800d100:	4b15      	ldr	r3, [pc, #84]	; (800d158 <tcp_input+0x280>)
 800d102:	22fb      	movs	r2, #251	; 0xfb
 800d104:	4924      	ldr	r1, [pc, #144]	; (800d198 <tcp_input+0x2c0>)
 800d106:	4816      	ldr	r0, [pc, #88]	; (800d160 <tcp_input+0x288>)
 800d108:	f007 fa60 	bl	80145cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	7d1b      	ldrb	r3, [r3, #20]
 800d110:	2b0a      	cmp	r3, #10
 800d112:	d105      	bne.n	800d120 <tcp_input+0x248>
 800d114:	4b10      	ldr	r3, [pc, #64]	; (800d158 <tcp_input+0x280>)
 800d116:	22fc      	movs	r2, #252	; 0xfc
 800d118:	4920      	ldr	r1, [pc, #128]	; (800d19c <tcp_input+0x2c4>)
 800d11a:	4811      	ldr	r0, [pc, #68]	; (800d160 <tcp_input+0x288>)
 800d11c:	f007 fa56 	bl	80145cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	7d1b      	ldrb	r3, [r3, #20]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d105      	bne.n	800d134 <tcp_input+0x25c>
 800d128:	4b0b      	ldr	r3, [pc, #44]	; (800d158 <tcp_input+0x280>)
 800d12a:	22fd      	movs	r2, #253	; 0xfd
 800d12c:	491c      	ldr	r1, [pc, #112]	; (800d1a0 <tcp_input+0x2c8>)
 800d12e:	480c      	ldr	r0, [pc, #48]	; (800d160 <tcp_input+0x288>)
 800d130:	f007 fa4c 	bl	80145cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	7a1b      	ldrb	r3, [r3, #8]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d033      	beq.n	800d1a4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	7a1a      	ldrb	r2, [r3, #8]
 800d140:	4b09      	ldr	r3, [pc, #36]	; (800d168 <tcp_input+0x290>)
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d148:	3301      	adds	r3, #1
 800d14a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d029      	beq.n	800d1a4 <tcp_input+0x2cc>
      prev = pcb;
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	61bb      	str	r3, [r7, #24]
      continue;
 800d154:	e06b      	b.n	800d22e <tcp_input+0x356>
 800d156:	bf00      	nop
 800d158:	08017408 	.word	0x08017408
 800d15c:	0801743c 	.word	0x0801743c
 800d160:	08017454 	.word	0x08017454
 800d164:	200040ac 	.word	0x200040ac
 800d168:	200073b4 	.word	0x200073b4
 800d16c:	200040b0 	.word	0x200040b0
 800d170:	200040b4 	.word	0x200040b4
 800d174:	200040b2 	.word	0x200040b2
 800d178:	0801747c 	.word	0x0801747c
 800d17c:	0801748c 	.word	0x0801748c
 800d180:	08017498 	.word	0x08017498
 800d184:	200040bc 	.word	0x200040bc
 800d188:	200040c0 	.word	0x200040c0
 800d18c:	200040c8 	.word	0x200040c8
 800d190:	200040c6 	.word	0x200040c6
 800d194:	2000aac8 	.word	0x2000aac8
 800d198:	080174b8 	.word	0x080174b8
 800d19c:	080174e0 	.word	0x080174e0
 800d1a0:	0801750c 	.word	0x0801750c
    }

    if (pcb->remote_port == tcphdr->src &&
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	8b1a      	ldrh	r2, [r3, #24]
 800d1a8:	4b94      	ldr	r3, [pc, #592]	; (800d3fc <tcp_input+0x524>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d13a      	bne.n	800d22a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	8ada      	ldrh	r2, [r3, #22]
 800d1b8:	4b90      	ldr	r3, [pc, #576]	; (800d3fc <tcp_input+0x524>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	885b      	ldrh	r3, [r3, #2]
 800d1be:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d132      	bne.n	800d22a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	685a      	ldr	r2, [r3, #4]
 800d1c8:	4b8d      	ldr	r3, [pc, #564]	; (800d400 <tcp_input+0x528>)
 800d1ca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d12c      	bne.n	800d22a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	4b8a      	ldr	r3, [pc, #552]	; (800d400 <tcp_input+0x528>)
 800d1d6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d126      	bne.n	800d22a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	69fa      	ldr	r2, [r7, #28]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d106      	bne.n	800d1f4 <tcp_input+0x31c>
 800d1e6:	4b87      	ldr	r3, [pc, #540]	; (800d404 <tcp_input+0x52c>)
 800d1e8:	f240 120d 	movw	r2, #269	; 0x10d
 800d1ec:	4986      	ldr	r1, [pc, #536]	; (800d408 <tcp_input+0x530>)
 800d1ee:	4887      	ldr	r0, [pc, #540]	; (800d40c <tcp_input+0x534>)
 800d1f0:	f007 f9ec 	bl	80145cc <iprintf>
      if (prev != NULL) {
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d00a      	beq.n	800d210 <tcp_input+0x338>
        prev->next = pcb->next;
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	68da      	ldr	r2, [r3, #12]
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d202:	4b83      	ldr	r3, [pc, #524]	; (800d410 <tcp_input+0x538>)
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d20a:	4a81      	ldr	r2, [pc, #516]	; (800d410 <tcp_input+0x538>)
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	69fa      	ldr	r2, [r7, #28]
 800d216:	429a      	cmp	r2, r3
 800d218:	d111      	bne.n	800d23e <tcp_input+0x366>
 800d21a:	4b7a      	ldr	r3, [pc, #488]	; (800d404 <tcp_input+0x52c>)
 800d21c:	f240 1215 	movw	r2, #277	; 0x115
 800d220:	497c      	ldr	r1, [pc, #496]	; (800d414 <tcp_input+0x53c>)
 800d222:	487a      	ldr	r0, [pc, #488]	; (800d40c <tcp_input+0x534>)
 800d224:	f007 f9d2 	bl	80145cc <iprintf>
      break;
 800d228:	e009      	b.n	800d23e <tcp_input+0x366>
    }
    prev = pcb;
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	61fb      	str	r3, [r7, #28]
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	2b00      	cmp	r3, #0
 800d238:	f47f af5e 	bne.w	800d0f8 <tcp_input+0x220>
 800d23c:	e000      	b.n	800d240 <tcp_input+0x368>
      break;
 800d23e:	bf00      	nop
  }

  if (pcb == NULL) {
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	2b00      	cmp	r3, #0
 800d244:	f040 8095 	bne.w	800d372 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d248:	4b73      	ldr	r3, [pc, #460]	; (800d418 <tcp_input+0x540>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	61fb      	str	r3, [r7, #28]
 800d24e:	e03f      	b.n	800d2d0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	7d1b      	ldrb	r3, [r3, #20]
 800d254:	2b0a      	cmp	r3, #10
 800d256:	d006      	beq.n	800d266 <tcp_input+0x38e>
 800d258:	4b6a      	ldr	r3, [pc, #424]	; (800d404 <tcp_input+0x52c>)
 800d25a:	f240 121f 	movw	r2, #287	; 0x11f
 800d25e:	496f      	ldr	r1, [pc, #444]	; (800d41c <tcp_input+0x544>)
 800d260:	486a      	ldr	r0, [pc, #424]	; (800d40c <tcp_input+0x534>)
 800d262:	f007 f9b3 	bl	80145cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	7a1b      	ldrb	r3, [r3, #8]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d009      	beq.n	800d282 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	7a1a      	ldrb	r2, [r3, #8]
 800d272:	4b63      	ldr	r3, [pc, #396]	; (800d400 <tcp_input+0x528>)
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d27a:	3301      	adds	r3, #1
 800d27c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d27e:	429a      	cmp	r2, r3
 800d280:	d122      	bne.n	800d2c8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	8b1a      	ldrh	r2, [r3, #24]
 800d286:	4b5d      	ldr	r3, [pc, #372]	; (800d3fc <tcp_input+0x524>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	881b      	ldrh	r3, [r3, #0]
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	429a      	cmp	r2, r3
 800d290:	d11b      	bne.n	800d2ca <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	8ada      	ldrh	r2, [r3, #22]
 800d296:	4b59      	ldr	r3, [pc, #356]	; (800d3fc <tcp_input+0x524>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	885b      	ldrh	r3, [r3, #2]
 800d29c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d113      	bne.n	800d2ca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	4b56      	ldr	r3, [pc, #344]	; (800d400 <tcp_input+0x528>)
 800d2a8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d10d      	bne.n	800d2ca <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	4b53      	ldr	r3, [pc, #332]	; (800d400 <tcp_input+0x528>)
 800d2b4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d107      	bne.n	800d2ca <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d2ba:	69f8      	ldr	r0, [r7, #28]
 800d2bc:	f000 fb54 	bl	800d968 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f7fd fd03 	bl	800accc <pbuf_free>
        return;
 800d2c6:	e1f0      	b.n	800d6aa <tcp_input+0x7d2>
        continue;
 800d2c8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	68db      	ldr	r3, [r3, #12]
 800d2ce:	61fb      	str	r3, [r7, #28]
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1bc      	bne.n	800d250 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d2da:	4b51      	ldr	r3, [pc, #324]	; (800d420 <tcp_input+0x548>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	617b      	str	r3, [r7, #20]
 800d2e0:	e02a      	b.n	800d338 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	7a1b      	ldrb	r3, [r3, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00c      	beq.n	800d304 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	7a1a      	ldrb	r2, [r3, #8]
 800d2ee:	4b44      	ldr	r3, [pc, #272]	; (800d400 <tcp_input+0x528>)
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d002      	beq.n	800d304 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	61bb      	str	r3, [r7, #24]
        continue;
 800d302:	e016      	b.n	800d332 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	8ada      	ldrh	r2, [r3, #22]
 800d308:	4b3c      	ldr	r3, [pc, #240]	; (800d3fc <tcp_input+0x524>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	885b      	ldrh	r3, [r3, #2]
 800d30e:	b29b      	uxth	r3, r3
 800d310:	429a      	cmp	r2, r3
 800d312:	d10c      	bne.n	800d32e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	4b39      	ldr	r3, [pc, #228]	; (800d400 <tcp_input+0x528>)
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d00f      	beq.n	800d340 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00d      	beq.n	800d342 <tcp_input+0x46a>
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d009      	beq.n	800d342 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	617b      	str	r3, [r7, #20]
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1d1      	bne.n	800d2e2 <tcp_input+0x40a>
 800d33e:	e000      	b.n	800d342 <tcp_input+0x46a>
            break;
 800d340:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d014      	beq.n	800d372 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00a      	beq.n	800d364 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	68da      	ldr	r2, [r3, #12]
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d356:	4b32      	ldr	r3, [pc, #200]	; (800d420 <tcp_input+0x548>)
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d35e:	4a30      	ldr	r2, [pc, #192]	; (800d420 <tcp_input+0x548>)
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d364:	6978      	ldr	r0, [r7, #20]
 800d366:	f000 fa01 	bl	800d76c <tcp_listen_input>
      }
      pbuf_free(p);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7fd fcae 	bl	800accc <pbuf_free>
      return;
 800d370:	e19b      	b.n	800d6aa <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 8160 	beq.w	800d63a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d37a:	4b2a      	ldr	r3, [pc, #168]	; (800d424 <tcp_input+0x54c>)
 800d37c:	2200      	movs	r2, #0
 800d37e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	891a      	ldrh	r2, [r3, #8]
 800d384:	4b27      	ldr	r3, [pc, #156]	; (800d424 <tcp_input+0x54c>)
 800d386:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d388:	4a26      	ldr	r2, [pc, #152]	; (800d424 <tcp_input+0x54c>)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d38e:	4b1b      	ldr	r3, [pc, #108]	; (800d3fc <tcp_input+0x524>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a24      	ldr	r2, [pc, #144]	; (800d424 <tcp_input+0x54c>)
 800d394:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d396:	4b24      	ldr	r3, [pc, #144]	; (800d428 <tcp_input+0x550>)
 800d398:	2200      	movs	r2, #0
 800d39a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d39c:	4b23      	ldr	r3, [pc, #140]	; (800d42c <tcp_input+0x554>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d3a2:	4b23      	ldr	r3, [pc, #140]	; (800d430 <tcp_input+0x558>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d3a8:	4b22      	ldr	r3, [pc, #136]	; (800d434 <tcp_input+0x55c>)
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	f003 0308 	and.w	r3, r3, #8
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d006      	beq.n	800d3c2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	7b5b      	ldrb	r3, [r3, #13]
 800d3b8:	f043 0301 	orr.w	r3, r3, #1
 800d3bc:	b2da      	uxtb	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d038      	beq.n	800d43c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d3ca:	69f8      	ldr	r0, [r7, #28]
 800d3cc:	f7ff f870 	bl	800c4b0 <tcp_process_refused_data>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	f113 0f0d 	cmn.w	r3, #13
 800d3d6:	d007      	beq.n	800d3e8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d02d      	beq.n	800d43c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d3e0:	4b15      	ldr	r3, [pc, #84]	; (800d438 <tcp_input+0x560>)
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d029      	beq.n	800d43c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 8104 	bne.w	800d5fa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d3f2:	69f8      	ldr	r0, [r7, #28]
 800d3f4:	f003 fe16 	bl	8011024 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d3f8:	e0ff      	b.n	800d5fa <tcp_input+0x722>
 800d3fa:	bf00      	nop
 800d3fc:	200040ac 	.word	0x200040ac
 800d400:	200073b4 	.word	0x200073b4
 800d404:	08017408 	.word	0x08017408
 800d408:	08017534 	.word	0x08017534
 800d40c:	08017454 	.word	0x08017454
 800d410:	2000aac8 	.word	0x2000aac8
 800d414:	08017560 	.word	0x08017560
 800d418:	2000aad8 	.word	0x2000aad8
 800d41c:	0801758c 	.word	0x0801758c
 800d420:	2000aad0 	.word	0x2000aad0
 800d424:	2000409c 	.word	0x2000409c
 800d428:	200040cc 	.word	0x200040cc
 800d42c:	200040c9 	.word	0x200040c9
 800d430:	200040c4 	.word	0x200040c4
 800d434:	200040c8 	.word	0x200040c8
 800d438:	200040c6 	.word	0x200040c6
      }
    }
    tcp_input_pcb = pcb;
 800d43c:	4a9c      	ldr	r2, [pc, #624]	; (800d6b0 <tcp_input+0x7d8>)
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d442:	69f8      	ldr	r0, [r7, #28]
 800d444:	f000 fb0a 	bl	800da5c <tcp_process>
 800d448:	4603      	mov	r3, r0
 800d44a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d44c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d450:	f113 0f0d 	cmn.w	r3, #13
 800d454:	f000 80d3 	beq.w	800d5fe <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d458:	4b96      	ldr	r3, [pc, #600]	; (800d6b4 <tcp_input+0x7dc>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	f003 0308 	and.w	r3, r3, #8
 800d460:	2b00      	cmp	r3, #0
 800d462:	d015      	beq.n	800d490 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d008      	beq.n	800d480 <tcp_input+0x5a8>
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d474:	69fa      	ldr	r2, [r7, #28]
 800d476:	6912      	ldr	r2, [r2, #16]
 800d478:	f06f 010d 	mvn.w	r1, #13
 800d47c:	4610      	mov	r0, r2
 800d47e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d480:	69f9      	ldr	r1, [r7, #28]
 800d482:	488d      	ldr	r0, [pc, #564]	; (800d6b8 <tcp_input+0x7e0>)
 800d484:	f7ff fbb0 	bl	800cbe8 <tcp_pcb_remove>
        tcp_free(pcb);
 800d488:	69f8      	ldr	r0, [r7, #28]
 800d48a:	f7fd fecb 	bl	800b224 <tcp_free>
 800d48e:	e0c1      	b.n	800d614 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d490:	2300      	movs	r3, #0
 800d492:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d494:	4b89      	ldr	r3, [pc, #548]	; (800d6bc <tcp_input+0x7e4>)
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d01d      	beq.n	800d4d8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d49c:	4b87      	ldr	r3, [pc, #540]	; (800d6bc <tcp_input+0x7e4>)
 800d49e:	881b      	ldrh	r3, [r3, #0]
 800d4a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00a      	beq.n	800d4c2 <tcp_input+0x5ea>
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4b2:	69fa      	ldr	r2, [r7, #28]
 800d4b4:	6910      	ldr	r0, [r2, #16]
 800d4b6:	89fa      	ldrh	r2, [r7, #14]
 800d4b8:	69f9      	ldr	r1, [r7, #28]
 800d4ba:	4798      	blx	r3
 800d4bc:	4603      	mov	r3, r0
 800d4be:	74fb      	strb	r3, [r7, #19]
 800d4c0:	e001      	b.n	800d4c6 <tcp_input+0x5ee>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d4c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4ca:	f113 0f0d 	cmn.w	r3, #13
 800d4ce:	f000 8098 	beq.w	800d602 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d4d2:	4b7a      	ldr	r3, [pc, #488]	; (800d6bc <tcp_input+0x7e4>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d4d8:	69f8      	ldr	r0, [r7, #28]
 800d4da:	f000 f907 	bl	800d6ec <tcp_input_delayed_close>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f040 8090 	bne.w	800d606 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d4e6:	4b76      	ldr	r3, [pc, #472]	; (800d6c0 <tcp_input+0x7e8>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d041      	beq.n	800d572 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d006      	beq.n	800d504 <tcp_input+0x62c>
 800d4f6:	4b73      	ldr	r3, [pc, #460]	; (800d6c4 <tcp_input+0x7ec>)
 800d4f8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d4fc:	4972      	ldr	r1, [pc, #456]	; (800d6c8 <tcp_input+0x7f0>)
 800d4fe:	4873      	ldr	r0, [pc, #460]	; (800d6cc <tcp_input+0x7f4>)
 800d500:	f007 f864 	bl	80145cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	8b5b      	ldrh	r3, [r3, #26]
 800d508:	f003 0310 	and.w	r3, r3, #16
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d008      	beq.n	800d522 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d510:	4b6b      	ldr	r3, [pc, #428]	; (800d6c0 <tcp_input+0x7e8>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4618      	mov	r0, r3
 800d516:	f7fd fbd9 	bl	800accc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d51a:	69f8      	ldr	r0, [r7, #28]
 800d51c:	f7fe f9c6 	bl	800b8ac <tcp_abort>
            goto aborted;
 800d520:	e078      	b.n	800d614 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00c      	beq.n	800d546 <tcp_input+0x66e>
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	6918      	ldr	r0, [r3, #16]
 800d536:	4b62      	ldr	r3, [pc, #392]	; (800d6c0 <tcp_input+0x7e8>)
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	2300      	movs	r3, #0
 800d53c:	69f9      	ldr	r1, [r7, #28]
 800d53e:	47a0      	blx	r4
 800d540:	4603      	mov	r3, r0
 800d542:	74fb      	strb	r3, [r7, #19]
 800d544:	e008      	b.n	800d558 <tcp_input+0x680>
 800d546:	4b5e      	ldr	r3, [pc, #376]	; (800d6c0 <tcp_input+0x7e8>)
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	2300      	movs	r3, #0
 800d54c:	69f9      	ldr	r1, [r7, #28]
 800d54e:	2000      	movs	r0, #0
 800d550:	f7ff f884 	bl	800c65c <tcp_recv_null>
 800d554:	4603      	mov	r3, r0
 800d556:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d55c:	f113 0f0d 	cmn.w	r3, #13
 800d560:	d053      	beq.n	800d60a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d003      	beq.n	800d572 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d56a:	4b55      	ldr	r3, [pc, #340]	; (800d6c0 <tcp_input+0x7e8>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d572:	4b50      	ldr	r3, [pc, #320]	; (800d6b4 <tcp_input+0x7dc>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	f003 0320 	and.w	r3, r3, #32
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d030      	beq.n	800d5e0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d582:	2b00      	cmp	r3, #0
 800d584:	d009      	beq.n	800d59a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d58a:	7b5a      	ldrb	r2, [r3, #13]
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d590:	f042 0220 	orr.w	r2, r2, #32
 800d594:	b2d2      	uxtb	r2, r2
 800d596:	735a      	strb	r2, [r3, #13]
 800d598:	e022      	b.n	800d5e0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d59e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d5a2:	d005      	beq.n	800d5b0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00b      	beq.n	800d5d2 <tcp_input+0x6fa>
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	6918      	ldr	r0, [r3, #16]
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	69f9      	ldr	r1, [r7, #28]
 800d5ca:	47a0      	blx	r4
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	74fb      	strb	r3, [r7, #19]
 800d5d0:	e001      	b.n	800d5d6 <tcp_input+0x6fe>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d5d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d5da:	f113 0f0d 	cmn.w	r3, #13
 800d5de:	d016      	beq.n	800d60e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d5e0:	4b33      	ldr	r3, [pc, #204]	; (800d6b0 <tcp_input+0x7d8>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d5e6:	69f8      	ldr	r0, [r7, #28]
 800d5e8:	f000 f880 	bl	800d6ec <tcp_input_delayed_close>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d10f      	bne.n	800d612 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d5f2:	69f8      	ldr	r0, [r7, #28]
 800d5f4:	f002 ff10 	bl	8010418 <tcp_output>
 800d5f8:	e00c      	b.n	800d614 <tcp_input+0x73c>
        goto aborted;
 800d5fa:	bf00      	nop
 800d5fc:	e00a      	b.n	800d614 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d5fe:	bf00      	nop
 800d600:	e008      	b.n	800d614 <tcp_input+0x73c>
              goto aborted;
 800d602:	bf00      	nop
 800d604:	e006      	b.n	800d614 <tcp_input+0x73c>
          goto aborted;
 800d606:	bf00      	nop
 800d608:	e004      	b.n	800d614 <tcp_input+0x73c>
            goto aborted;
 800d60a:	bf00      	nop
 800d60c:	e002      	b.n	800d614 <tcp_input+0x73c>
              goto aborted;
 800d60e:	bf00      	nop
 800d610:	e000      	b.n	800d614 <tcp_input+0x73c>
          goto aborted;
 800d612:	bf00      	nop
    tcp_input_pcb = NULL;
 800d614:	4b26      	ldr	r3, [pc, #152]	; (800d6b0 <tcp_input+0x7d8>)
 800d616:	2200      	movs	r2, #0
 800d618:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d61a:	4b29      	ldr	r3, [pc, #164]	; (800d6c0 <tcp_input+0x7e8>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d620:	4b2b      	ldr	r3, [pc, #172]	; (800d6d0 <tcp_input+0x7f8>)
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d03f      	beq.n	800d6a8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d628:	4b29      	ldr	r3, [pc, #164]	; (800d6d0 <tcp_input+0x7f8>)
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fd fb4d 	bl	800accc <pbuf_free>
      inseg.p = NULL;
 800d632:	4b27      	ldr	r3, [pc, #156]	; (800d6d0 <tcp_input+0x7f8>)
 800d634:	2200      	movs	r2, #0
 800d636:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d638:	e036      	b.n	800d6a8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d63a:	4b26      	ldr	r3, [pc, #152]	; (800d6d4 <tcp_input+0x7fc>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	899b      	ldrh	r3, [r3, #12]
 800d640:	b29b      	uxth	r3, r3
 800d642:	4618      	mov	r0, r3
 800d644:	f7fb ff96 	bl	8009574 <lwip_htons>
 800d648:	4603      	mov	r3, r0
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d118      	bne.n	800d686 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d654:	4b20      	ldr	r3, [pc, #128]	; (800d6d8 <tcp_input+0x800>)
 800d656:	6819      	ldr	r1, [r3, #0]
 800d658:	4b20      	ldr	r3, [pc, #128]	; (800d6dc <tcp_input+0x804>)
 800d65a:	881b      	ldrh	r3, [r3, #0]
 800d65c:	461a      	mov	r2, r3
 800d65e:	4b20      	ldr	r3, [pc, #128]	; (800d6e0 <tcp_input+0x808>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d664:	4b1b      	ldr	r3, [pc, #108]	; (800d6d4 <tcp_input+0x7fc>)
 800d666:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d668:	885b      	ldrh	r3, [r3, #2]
 800d66a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d66c:	4a19      	ldr	r2, [pc, #100]	; (800d6d4 <tcp_input+0x7fc>)
 800d66e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d670:	8812      	ldrh	r2, [r2, #0]
 800d672:	b292      	uxth	r2, r2
 800d674:	9202      	str	r2, [sp, #8]
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	4b1a      	ldr	r3, [pc, #104]	; (800d6e4 <tcp_input+0x80c>)
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	4b1a      	ldr	r3, [pc, #104]	; (800d6e8 <tcp_input+0x810>)
 800d67e:	4602      	mov	r2, r0
 800d680:	2000      	movs	r0, #0
 800d682:	f003 fc7d 	bl	8010f80 <tcp_rst>
    pbuf_free(p);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f7fd fb20 	bl	800accc <pbuf_free>
  return;
 800d68c:	e00c      	b.n	800d6a8 <tcp_input+0x7d0>
    goto dropped;
 800d68e:	bf00      	nop
 800d690:	e006      	b.n	800d6a0 <tcp_input+0x7c8>
    goto dropped;
 800d692:	bf00      	nop
 800d694:	e004      	b.n	800d6a0 <tcp_input+0x7c8>
    goto dropped;
 800d696:	bf00      	nop
 800d698:	e002      	b.n	800d6a0 <tcp_input+0x7c8>
      goto dropped;
 800d69a:	bf00      	nop
 800d69c:	e000      	b.n	800d6a0 <tcp_input+0x7c8>
      goto dropped;
 800d69e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7fd fb13 	bl	800accc <pbuf_free>
 800d6a6:	e000      	b.n	800d6aa <tcp_input+0x7d2>
  return;
 800d6a8:	bf00      	nop
}
 800d6aa:	3724      	adds	r7, #36	; 0x24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd90      	pop	{r4, r7, pc}
 800d6b0:	2000aadc 	.word	0x2000aadc
 800d6b4:	200040c9 	.word	0x200040c9
 800d6b8:	2000aac8 	.word	0x2000aac8
 800d6bc:	200040c4 	.word	0x200040c4
 800d6c0:	200040cc 	.word	0x200040cc
 800d6c4:	08017408 	.word	0x08017408
 800d6c8:	080175bc 	.word	0x080175bc
 800d6cc:	08017454 	.word	0x08017454
 800d6d0:	2000409c 	.word	0x2000409c
 800d6d4:	200040ac 	.word	0x200040ac
 800d6d8:	200040c0 	.word	0x200040c0
 800d6dc:	200040c6 	.word	0x200040c6
 800d6e0:	200040bc 	.word	0x200040bc
 800d6e4:	200073c4 	.word	0x200073c4
 800d6e8:	200073c8 	.word	0x200073c8

0800d6ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d106      	bne.n	800d708 <tcp_input_delayed_close+0x1c>
 800d6fa:	4b17      	ldr	r3, [pc, #92]	; (800d758 <tcp_input_delayed_close+0x6c>)
 800d6fc:	f240 225a 	movw	r2, #602	; 0x25a
 800d700:	4916      	ldr	r1, [pc, #88]	; (800d75c <tcp_input_delayed_close+0x70>)
 800d702:	4817      	ldr	r0, [pc, #92]	; (800d760 <tcp_input_delayed_close+0x74>)
 800d704:	f006 ff62 	bl	80145cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d708:	4b16      	ldr	r3, [pc, #88]	; (800d764 <tcp_input_delayed_close+0x78>)
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	f003 0310 	and.w	r3, r3, #16
 800d710:	2b00      	cmp	r3, #0
 800d712:	d01c      	beq.n	800d74e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	8b5b      	ldrh	r3, [r3, #26]
 800d718:	f003 0310 	and.w	r3, r3, #16
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10d      	bne.n	800d73c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d726:	2b00      	cmp	r3, #0
 800d728:	d008      	beq.n	800d73c <tcp_input_delayed_close+0x50>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	6912      	ldr	r2, [r2, #16]
 800d734:	f06f 010e 	mvn.w	r1, #14
 800d738:	4610      	mov	r0, r2
 800d73a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	480a      	ldr	r0, [pc, #40]	; (800d768 <tcp_input_delayed_close+0x7c>)
 800d740:	f7ff fa52 	bl	800cbe8 <tcp_pcb_remove>
    tcp_free(pcb);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7fd fd6d 	bl	800b224 <tcp_free>
    return 1;
 800d74a:	2301      	movs	r3, #1
 800d74c:	e000      	b.n	800d750 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	08017408 	.word	0x08017408
 800d75c:	080175d8 	.word	0x080175d8
 800d760:	08017454 	.word	0x08017454
 800d764:	200040c9 	.word	0x200040c9
 800d768:	2000aac8 	.word	0x2000aac8

0800d76c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d76c:	b590      	push	{r4, r7, lr}
 800d76e:	b08b      	sub	sp, #44	; 0x2c
 800d770:	af04      	add	r7, sp, #16
 800d772:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d774:	4b6f      	ldr	r3, [pc, #444]	; (800d934 <tcp_listen_input+0x1c8>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	f003 0304 	and.w	r3, r3, #4
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f040 80d2 	bne.w	800d926 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d106      	bne.n	800d796 <tcp_listen_input+0x2a>
 800d788:	4b6b      	ldr	r3, [pc, #428]	; (800d938 <tcp_listen_input+0x1cc>)
 800d78a:	f240 2281 	movw	r2, #641	; 0x281
 800d78e:	496b      	ldr	r1, [pc, #428]	; (800d93c <tcp_listen_input+0x1d0>)
 800d790:	486b      	ldr	r0, [pc, #428]	; (800d940 <tcp_listen_input+0x1d4>)
 800d792:	f006 ff1b 	bl	80145cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d796:	4b67      	ldr	r3, [pc, #412]	; (800d934 <tcp_listen_input+0x1c8>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	f003 0310 	and.w	r3, r3, #16
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d019      	beq.n	800d7d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7a2:	4b68      	ldr	r3, [pc, #416]	; (800d944 <tcp_listen_input+0x1d8>)
 800d7a4:	6819      	ldr	r1, [r3, #0]
 800d7a6:	4b68      	ldr	r3, [pc, #416]	; (800d948 <tcp_listen_input+0x1dc>)
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	4b67      	ldr	r3, [pc, #412]	; (800d94c <tcp_listen_input+0x1e0>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7b2:	4b67      	ldr	r3, [pc, #412]	; (800d950 <tcp_listen_input+0x1e4>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7b6:	885b      	ldrh	r3, [r3, #2]
 800d7b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d7ba:	4a65      	ldr	r2, [pc, #404]	; (800d950 <tcp_listen_input+0x1e4>)
 800d7bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d7be:	8812      	ldrh	r2, [r2, #0]
 800d7c0:	b292      	uxth	r2, r2
 800d7c2:	9202      	str	r2, [sp, #8]
 800d7c4:	9301      	str	r3, [sp, #4]
 800d7c6:	4b63      	ldr	r3, [pc, #396]	; (800d954 <tcp_listen_input+0x1e8>)
 800d7c8:	9300      	str	r3, [sp, #0]
 800d7ca:	4b63      	ldr	r3, [pc, #396]	; (800d958 <tcp_listen_input+0x1ec>)
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f003 fbd6 	bl	8010f80 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d7d4:	e0a9      	b.n	800d92a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d7d6:	4b57      	ldr	r3, [pc, #348]	; (800d934 <tcp_listen_input+0x1c8>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	f003 0302 	and.w	r3, r3, #2
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 80a3 	beq.w	800d92a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	7d5b      	ldrb	r3, [r3, #21]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff f85b 	bl	800c8a4 <tcp_alloc>
 800d7ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d111      	bne.n	800d81a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00a      	beq.n	800d814 <tcp_listen_input+0xa8>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	6910      	ldr	r0, [r2, #16]
 800d806:	f04f 32ff 	mov.w	r2, #4294967295
 800d80a:	2100      	movs	r1, #0
 800d80c:	4798      	blx	r3
 800d80e:	4603      	mov	r3, r0
 800d810:	73bb      	strb	r3, [r7, #14]
      return;
 800d812:	e08b      	b.n	800d92c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d814:	23f0      	movs	r3, #240	; 0xf0
 800d816:	73bb      	strb	r3, [r7, #14]
      return;
 800d818:	e088      	b.n	800d92c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d81a:	4b50      	ldr	r3, [pc, #320]	; (800d95c <tcp_listen_input+0x1f0>)
 800d81c:	695a      	ldr	r2, [r3, #20]
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d822:	4b4e      	ldr	r3, [pc, #312]	; (800d95c <tcp_listen_input+0x1f0>)
 800d824:	691a      	ldr	r2, [r3, #16]
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	8ada      	ldrh	r2, [r3, #22]
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d832:	4b47      	ldr	r3, [pc, #284]	; (800d950 <tcp_listen_input+0x1e4>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	b29a      	uxth	r2, r3
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2203      	movs	r2, #3
 800d842:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d844:	4b41      	ldr	r3, [pc, #260]	; (800d94c <tcp_listen_input+0x1e0>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d856:	6978      	ldr	r0, [r7, #20]
 800d858:	f7ff fa5a 	bl	800cd10 <tcp_next_iss>
 800d85c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	693a      	ldr	r2, [r7, #16]
 800d868:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	693a      	ldr	r2, [r7, #16]
 800d874:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d876:	4b35      	ldr	r3, [pc, #212]	; (800d94c <tcp_listen_input+0x1e0>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	1e5a      	subs	r2, r3, #1
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	691a      	ldr	r2, [r3, #16]
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	7a5b      	ldrb	r3, [r3, #9]
 800d892:	f003 030c 	and.w	r3, r3, #12
 800d896:	b2da      	uxtb	r2, r3
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	7a1a      	ldrb	r2, [r3, #8]
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d8a4:	4b2e      	ldr	r3, [pc, #184]	; (800d960 <tcp_listen_input+0x1f4>)
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	60da      	str	r2, [r3, #12]
 800d8ac:	4a2c      	ldr	r2, [pc, #176]	; (800d960 <tcp_listen_input+0x1f4>)
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	6013      	str	r3, [r2, #0]
 800d8b2:	f003 fd27 	bl	8011304 <tcp_timer_needed>
 800d8b6:	4b2b      	ldr	r3, [pc, #172]	; (800d964 <tcp_listen_input+0x1f8>)
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d8bc:	6978      	ldr	r0, [r7, #20]
 800d8be:	f001 fd8d 	bl	800f3dc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d8c2:	4b23      	ldr	r3, [pc, #140]	; (800d950 <tcp_listen_input+0x1e4>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	89db      	ldrh	r3, [r3, #14]
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	3304      	adds	r3, #4
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f005 fa61 	bl	8012dac <ip4_route>
 800d8ea:	4601      	mov	r1, r0
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f7ff fa32 	bl	800cd5c <tcp_eff_send_mss_netif>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d900:	2112      	movs	r1, #18
 800d902:	6978      	ldr	r0, [r7, #20]
 800d904:	f002 fc9a 	bl	801023c <tcp_enqueue_flags>
 800d908:	4603      	mov	r3, r0
 800d90a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d90c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d004      	beq.n	800d91e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d914:	2100      	movs	r1, #0
 800d916:	6978      	ldr	r0, [r7, #20]
 800d918:	f7fd ff0a 	bl	800b730 <tcp_abandon>
      return;
 800d91c:	e006      	b.n	800d92c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d91e:	6978      	ldr	r0, [r7, #20]
 800d920:	f002 fd7a 	bl	8010418 <tcp_output>
  return;
 800d924:	e001      	b.n	800d92a <tcp_listen_input+0x1be>
    return;
 800d926:	bf00      	nop
 800d928:	e000      	b.n	800d92c <tcp_listen_input+0x1c0>
  return;
 800d92a:	bf00      	nop
}
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd90      	pop	{r4, r7, pc}
 800d932:	bf00      	nop
 800d934:	200040c8 	.word	0x200040c8
 800d938:	08017408 	.word	0x08017408
 800d93c:	08017600 	.word	0x08017600
 800d940:	08017454 	.word	0x08017454
 800d944:	200040c0 	.word	0x200040c0
 800d948:	200040c6 	.word	0x200040c6
 800d94c:	200040bc 	.word	0x200040bc
 800d950:	200040ac 	.word	0x200040ac
 800d954:	200073c4 	.word	0x200073c4
 800d958:	200073c8 	.word	0x200073c8
 800d95c:	200073b4 	.word	0x200073b4
 800d960:	2000aac8 	.word	0x2000aac8
 800d964:	2000aac4 	.word	0x2000aac4

0800d968 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b086      	sub	sp, #24
 800d96c:	af04      	add	r7, sp, #16
 800d96e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d970:	4b2f      	ldr	r3, [pc, #188]	; (800da30 <tcp_timewait_input+0xc8>)
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	f003 0304 	and.w	r3, r3, #4
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d153      	bne.n	800da24 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d106      	bne.n	800d990 <tcp_timewait_input+0x28>
 800d982:	4b2c      	ldr	r3, [pc, #176]	; (800da34 <tcp_timewait_input+0xcc>)
 800d984:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d988:	492b      	ldr	r1, [pc, #172]	; (800da38 <tcp_timewait_input+0xd0>)
 800d98a:	482c      	ldr	r0, [pc, #176]	; (800da3c <tcp_timewait_input+0xd4>)
 800d98c:	f006 fe1e 	bl	80145cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d990:	4b27      	ldr	r3, [pc, #156]	; (800da30 <tcp_timewait_input+0xc8>)
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d02a      	beq.n	800d9f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d99c:	4b28      	ldr	r3, [pc, #160]	; (800da40 <tcp_timewait_input+0xd8>)
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a4:	1ad3      	subs	r3, r2, r3
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	db2d      	blt.n	800da06 <tcp_timewait_input+0x9e>
 800d9aa:	4b25      	ldr	r3, [pc, #148]	; (800da40 <tcp_timewait_input+0xd8>)
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b2:	6879      	ldr	r1, [r7, #4]
 800d9b4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d9b6:	440b      	add	r3, r1
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	dc23      	bgt.n	800da06 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9be:	4b21      	ldr	r3, [pc, #132]	; (800da44 <tcp_timewait_input+0xdc>)
 800d9c0:	6819      	ldr	r1, [r3, #0]
 800d9c2:	4b21      	ldr	r3, [pc, #132]	; (800da48 <tcp_timewait_input+0xe0>)
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	4b1d      	ldr	r3, [pc, #116]	; (800da40 <tcp_timewait_input+0xd8>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9ce:	4b1f      	ldr	r3, [pc, #124]	; (800da4c <tcp_timewait_input+0xe4>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9d2:	885b      	ldrh	r3, [r3, #2]
 800d9d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9d6:	4a1d      	ldr	r2, [pc, #116]	; (800da4c <tcp_timewait_input+0xe4>)
 800d9d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9da:	8812      	ldrh	r2, [r2, #0]
 800d9dc:	b292      	uxth	r2, r2
 800d9de:	9202      	str	r2, [sp, #8]
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	4b1b      	ldr	r3, [pc, #108]	; (800da50 <tcp_timewait_input+0xe8>)
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	4b1b      	ldr	r3, [pc, #108]	; (800da54 <tcp_timewait_input+0xec>)
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f003 fac8 	bl	8010f80 <tcp_rst>
      return;
 800d9f0:	e01b      	b.n	800da2a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d9f2:	4b0f      	ldr	r3, [pc, #60]	; (800da30 <tcp_timewait_input+0xc8>)
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d9fe:	4b16      	ldr	r3, [pc, #88]	; (800da58 <tcp_timewait_input+0xf0>)
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800da06:	4b10      	ldr	r3, [pc, #64]	; (800da48 <tcp_timewait_input+0xe0>)
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00c      	beq.n	800da28 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	8b5b      	ldrh	r3, [r3, #26]
 800da12:	f043 0302 	orr.w	r3, r3, #2
 800da16:	b29a      	uxth	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f002 fcfb 	bl	8010418 <tcp_output>
  }
  return;
 800da22:	e001      	b.n	800da28 <tcp_timewait_input+0xc0>
    return;
 800da24:	bf00      	nop
 800da26:	e000      	b.n	800da2a <tcp_timewait_input+0xc2>
  return;
 800da28:	bf00      	nop
}
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	200040c8 	.word	0x200040c8
 800da34:	08017408 	.word	0x08017408
 800da38:	08017620 	.word	0x08017620
 800da3c:	08017454 	.word	0x08017454
 800da40:	200040bc 	.word	0x200040bc
 800da44:	200040c0 	.word	0x200040c0
 800da48:	200040c6 	.word	0x200040c6
 800da4c:	200040ac 	.word	0x200040ac
 800da50:	200073c4 	.word	0x200073c4
 800da54:	200073c8 	.word	0x200073c8
 800da58:	2000aacc 	.word	0x2000aacc

0800da5c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800da5c:	b590      	push	{r4, r7, lr}
 800da5e:	b08d      	sub	sp, #52	; 0x34
 800da60:	af04      	add	r7, sp, #16
 800da62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800da64:	2300      	movs	r3, #0
 800da66:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d106      	bne.n	800da80 <tcp_process+0x24>
 800da72:	4ba5      	ldr	r3, [pc, #660]	; (800dd08 <tcp_process+0x2ac>)
 800da74:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800da78:	49a4      	ldr	r1, [pc, #656]	; (800dd0c <tcp_process+0x2b0>)
 800da7a:	48a5      	ldr	r0, [pc, #660]	; (800dd10 <tcp_process+0x2b4>)
 800da7c:	f006 fda6 	bl	80145cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800da80:	4ba4      	ldr	r3, [pc, #656]	; (800dd14 <tcp_process+0x2b8>)
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	f003 0304 	and.w	r3, r3, #4
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d04e      	beq.n	800db2a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7d1b      	ldrb	r3, [r3, #20]
 800da90:	2b02      	cmp	r3, #2
 800da92:	d108      	bne.n	800daa6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da98:	4b9f      	ldr	r3, [pc, #636]	; (800dd18 <tcp_process+0x2bc>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d123      	bne.n	800dae8 <tcp_process+0x8c>
        acceptable = 1;
 800daa0:	2301      	movs	r3, #1
 800daa2:	76fb      	strb	r3, [r7, #27]
 800daa4:	e020      	b.n	800dae8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800daaa:	4b9c      	ldr	r3, [pc, #624]	; (800dd1c <tcp_process+0x2c0>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d102      	bne.n	800dab8 <tcp_process+0x5c>
        acceptable = 1;
 800dab2:	2301      	movs	r3, #1
 800dab4:	76fb      	strb	r3, [r7, #27]
 800dab6:	e017      	b.n	800dae8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dab8:	4b98      	ldr	r3, [pc, #608]	; (800dd1c <tcp_process+0x2c0>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	db10      	blt.n	800dae8 <tcp_process+0x8c>
 800dac6:	4b95      	ldr	r3, [pc, #596]	; (800dd1c <tcp_process+0x2c0>)
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dace:	6879      	ldr	r1, [r7, #4]
 800dad0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dad2:	440b      	add	r3, r1
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	dc06      	bgt.n	800dae8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	8b5b      	ldrh	r3, [r3, #26]
 800dade:	f043 0302 	orr.w	r3, r3, #2
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dae8:	7efb      	ldrb	r3, [r7, #27]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d01b      	beq.n	800db26 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	7d1b      	ldrb	r3, [r3, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d106      	bne.n	800db04 <tcp_process+0xa8>
 800daf6:	4b84      	ldr	r3, [pc, #528]	; (800dd08 <tcp_process+0x2ac>)
 800daf8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dafc:	4988      	ldr	r1, [pc, #544]	; (800dd20 <tcp_process+0x2c4>)
 800dafe:	4884      	ldr	r0, [pc, #528]	; (800dd10 <tcp_process+0x2b4>)
 800db00:	f006 fd64 	bl	80145cc <iprintf>
      recv_flags |= TF_RESET;
 800db04:	4b87      	ldr	r3, [pc, #540]	; (800dd24 <tcp_process+0x2c8>)
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	f043 0308 	orr.w	r3, r3, #8
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	4b85      	ldr	r3, [pc, #532]	; (800dd24 <tcp_process+0x2c8>)
 800db10:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	8b5b      	ldrh	r3, [r3, #26]
 800db16:	f023 0301 	bic.w	r3, r3, #1
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800db20:	f06f 030d 	mvn.w	r3, #13
 800db24:	e37a      	b.n	800e21c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	e378      	b.n	800e21c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800db2a:	4b7a      	ldr	r3, [pc, #488]	; (800dd14 <tcp_process+0x2b8>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	f003 0302 	and.w	r3, r3, #2
 800db32:	2b00      	cmp	r3, #0
 800db34:	d010      	beq.n	800db58 <tcp_process+0xfc>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	7d1b      	ldrb	r3, [r3, #20]
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d00c      	beq.n	800db58 <tcp_process+0xfc>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	7d1b      	ldrb	r3, [r3, #20]
 800db42:	2b03      	cmp	r3, #3
 800db44:	d008      	beq.n	800db58 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	8b5b      	ldrh	r3, [r3, #26]
 800db4a:	f043 0302 	orr.w	r3, r3, #2
 800db4e:	b29a      	uxth	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800db54:	2300      	movs	r3, #0
 800db56:	e361      	b.n	800e21c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	8b5b      	ldrh	r3, [r3, #26]
 800db5c:	f003 0310 	and.w	r3, r3, #16
 800db60:	2b00      	cmp	r3, #0
 800db62:	d103      	bne.n	800db6c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800db64:	4b70      	ldr	r3, [pc, #448]	; (800dd28 <tcp_process+0x2cc>)
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f001 fc2d 	bl	800f3dc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	7d1b      	ldrb	r3, [r3, #20]
 800db86:	3b02      	subs	r3, #2
 800db88:	2b07      	cmp	r3, #7
 800db8a:	f200 8337 	bhi.w	800e1fc <tcp_process+0x7a0>
 800db8e:	a201      	add	r2, pc, #4	; (adr r2, 800db94 <tcp_process+0x138>)
 800db90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db94:	0800dbb5 	.word	0x0800dbb5
 800db98:	0800dde5 	.word	0x0800dde5
 800db9c:	0800df5d 	.word	0x0800df5d
 800dba0:	0800df87 	.word	0x0800df87
 800dba4:	0800e0ab 	.word	0x0800e0ab
 800dba8:	0800df5d 	.word	0x0800df5d
 800dbac:	0800e137 	.word	0x0800e137
 800dbb0:	0800e1c7 	.word	0x0800e1c7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dbb4:	4b57      	ldr	r3, [pc, #348]	; (800dd14 <tcp_process+0x2b8>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	f003 0310 	and.w	r3, r3, #16
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f000 80e4 	beq.w	800dd8a <tcp_process+0x32e>
 800dbc2:	4b54      	ldr	r3, [pc, #336]	; (800dd14 <tcp_process+0x2b8>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 80dd 	beq.w	800dd8a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbd4:	1c5a      	adds	r2, r3, #1
 800dbd6:	4b50      	ldr	r3, [pc, #320]	; (800dd18 <tcp_process+0x2bc>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	f040 80d5 	bne.w	800dd8a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dbe0:	4b4e      	ldr	r3, [pc, #312]	; (800dd1c <tcp_process+0x2c0>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	1c5a      	adds	r2, r3, #1
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dbf2:	4b49      	ldr	r3, [pc, #292]	; (800dd18 <tcp_process+0x2bc>)
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dbfa:	4b4c      	ldr	r3, [pc, #304]	; (800dd2c <tcp_process+0x2d0>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	89db      	ldrh	r3, [r3, #14]
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dc14:	4b41      	ldr	r3, [pc, #260]	; (800dd1c <tcp_process+0x2c0>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	1e5a      	subs	r2, r3, #1
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2204      	movs	r2, #4
 800dc22:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f005 f8bd 	bl	8012dac <ip4_route>
 800dc32:	4601      	mov	r1, r0
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	3304      	adds	r3, #4
 800dc38:	461a      	mov	r2, r3
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f7ff f88e 	bl	800cd5c <tcp_eff_send_mss_netif>
 800dc40:	4603      	mov	r3, r0
 800dc42:	461a      	mov	r2, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc4c:	009a      	lsls	r2, r3, #2
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc52:	005b      	lsls	r3, r3, #1
 800dc54:	f241 111c 	movw	r1, #4380	; 0x111c
 800dc58:	428b      	cmp	r3, r1
 800dc5a:	bf38      	it	cc
 800dc5c:	460b      	movcc	r3, r1
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d204      	bcs.n	800dc6c <tcp_process+0x210>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	e00d      	b.n	800dc88 <tcp_process+0x22c>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc70:	005b      	lsls	r3, r3, #1
 800dc72:	f241 121c 	movw	r2, #4380	; 0x111c
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d904      	bls.n	800dc84 <tcp_process+0x228>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc7e:	005b      	lsls	r3, r3, #1
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	e001      	b.n	800dc88 <tcp_process+0x22c>
 800dc84:	f241 131c 	movw	r3, #4380	; 0x111c
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <tcp_process+0x24a>
 800dc98:	4b1b      	ldr	r3, [pc, #108]	; (800dd08 <tcp_process+0x2ac>)
 800dc9a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800dc9e:	4924      	ldr	r1, [pc, #144]	; (800dd30 <tcp_process+0x2d4>)
 800dca0:	481b      	ldr	r0, [pc, #108]	; (800dd10 <tcp_process+0x2b4>)
 800dca2:	f006 fc93 	bl	80145cc <iprintf>
        --pcb->snd_queuelen;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dcac:	3b01      	subs	r3, #1
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d111      	bne.n	800dce6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d106      	bne.n	800dcdc <tcp_process+0x280>
 800dcce:	4b0e      	ldr	r3, [pc, #56]	; (800dd08 <tcp_process+0x2ac>)
 800dcd0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dcd4:	4917      	ldr	r1, [pc, #92]	; (800dd34 <tcp_process+0x2d8>)
 800dcd6:	480e      	ldr	r0, [pc, #56]	; (800dd10 <tcp_process+0x2b4>)
 800dcd8:	f006 fc78 	bl	80145cc <iprintf>
          pcb->unsent = rseg->next;
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	681a      	ldr	r2, [r3, #0]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	66da      	str	r2, [r3, #108]	; 0x6c
 800dce4:	e003      	b.n	800dcee <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dcee:	69f8      	ldr	r0, [r7, #28]
 800dcf0:	f7fe fc6f 	bl	800c5d2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d11d      	bne.n	800dd38 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd02:	861a      	strh	r2, [r3, #48]	; 0x30
 800dd04:	e01f      	b.n	800dd46 <tcp_process+0x2ea>
 800dd06:	bf00      	nop
 800dd08:	08017408 	.word	0x08017408
 800dd0c:	08017640 	.word	0x08017640
 800dd10:	08017454 	.word	0x08017454
 800dd14:	200040c8 	.word	0x200040c8
 800dd18:	200040c0 	.word	0x200040c0
 800dd1c:	200040bc 	.word	0x200040bc
 800dd20:	0801765c 	.word	0x0801765c
 800dd24:	200040c9 	.word	0x200040c9
 800dd28:	2000aacc 	.word	0x2000aacc
 800dd2c:	200040ac 	.word	0x200040ac
 800dd30:	0801767c 	.word	0x0801767c
 800dd34:	08017694 	.word	0x08017694
        } else {
          pcb->rtime = 0;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00a      	beq.n	800dd66 <tcp_process+0x30a>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	6910      	ldr	r0, [r2, #16]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	4798      	blx	r3
 800dd60:	4603      	mov	r3, r0
 800dd62:	76bb      	strb	r3, [r7, #26]
 800dd64:	e001      	b.n	800dd6a <tcp_process+0x30e>
 800dd66:	2300      	movs	r3, #0
 800dd68:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dd6a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dd6e:	f113 0f0d 	cmn.w	r3, #13
 800dd72:	d102      	bne.n	800dd7a <tcp_process+0x31e>
          return ERR_ABRT;
 800dd74:	f06f 030c 	mvn.w	r3, #12
 800dd78:	e250      	b.n	800e21c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	8b5b      	ldrh	r3, [r3, #26]
 800dd7e:	f043 0302 	orr.w	r3, r3, #2
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dd88:	e23a      	b.n	800e200 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dd8a:	4b9d      	ldr	r3, [pc, #628]	; (800e000 <tcp_process+0x5a4>)
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	f003 0310 	and.w	r3, r3, #16
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f000 8234 	beq.w	800e200 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd98:	4b9a      	ldr	r3, [pc, #616]	; (800e004 <tcp_process+0x5a8>)
 800dd9a:	6819      	ldr	r1, [r3, #0]
 800dd9c:	4b9a      	ldr	r3, [pc, #616]	; (800e008 <tcp_process+0x5ac>)
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	461a      	mov	r2, r3
 800dda2:	4b9a      	ldr	r3, [pc, #616]	; (800e00c <tcp_process+0x5b0>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dda8:	4b99      	ldr	r3, [pc, #612]	; (800e010 <tcp_process+0x5b4>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddac:	885b      	ldrh	r3, [r3, #2]
 800ddae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddb0:	4a97      	ldr	r2, [pc, #604]	; (800e010 <tcp_process+0x5b4>)
 800ddb2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddb4:	8812      	ldrh	r2, [r2, #0]
 800ddb6:	b292      	uxth	r2, r2
 800ddb8:	9202      	str	r2, [sp, #8]
 800ddba:	9301      	str	r3, [sp, #4]
 800ddbc:	4b95      	ldr	r3, [pc, #596]	; (800e014 <tcp_process+0x5b8>)
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	4b95      	ldr	r3, [pc, #596]	; (800e018 <tcp_process+0x5bc>)
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f003 f8db 	bl	8010f80 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ddd0:	2b05      	cmp	r3, #5
 800ddd2:	f200 8215 	bhi.w	800e200 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f002 fea5 	bl	8010b2c <tcp_rexmit_rto>
      break;
 800dde2:	e20d      	b.n	800e200 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dde4:	4b86      	ldr	r3, [pc, #536]	; (800e000 <tcp_process+0x5a4>)
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	f003 0310 	and.w	r3, r3, #16
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f000 80a1 	beq.w	800df34 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ddf2:	4b84      	ldr	r3, [pc, #528]	; (800e004 <tcp_process+0x5a8>)
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddfa:	1ad3      	subs	r3, r2, r3
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	db7e      	blt.n	800df00 <tcp_process+0x4a4>
 800de02:	4b80      	ldr	r3, [pc, #512]	; (800e004 <tcp_process+0x5a8>)
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	dc77      	bgt.n	800df00 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2204      	movs	r2, #4
 800de14:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d102      	bne.n	800de24 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800de1e:	23fa      	movs	r3, #250	; 0xfa
 800de20:	76bb      	strb	r3, [r7, #26]
 800de22:	e01d      	b.n	800de60 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d106      	bne.n	800de3c <tcp_process+0x3e0>
 800de2e:	4b7b      	ldr	r3, [pc, #492]	; (800e01c <tcp_process+0x5c0>)
 800de30:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800de34:	497a      	ldr	r1, [pc, #488]	; (800e020 <tcp_process+0x5c4>)
 800de36:	487b      	ldr	r0, [pc, #492]	; (800e024 <tcp_process+0x5c8>)
 800de38:	f006 fbc8 	bl	80145cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de40:	699b      	ldr	r3, [r3, #24]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00a      	beq.n	800de5c <tcp_process+0x400>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	6910      	ldr	r0, [r2, #16]
 800de50:	2200      	movs	r2, #0
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	4798      	blx	r3
 800de56:	4603      	mov	r3, r0
 800de58:	76bb      	strb	r3, [r7, #26]
 800de5a:	e001      	b.n	800de60 <tcp_process+0x404>
 800de5c:	23f0      	movs	r3, #240	; 0xf0
 800de5e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800de60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00a      	beq.n	800de7e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800de68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de6c:	f113 0f0d 	cmn.w	r3, #13
 800de70:	d002      	beq.n	800de78 <tcp_process+0x41c>
              tcp_abort(pcb);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7fd fd1a 	bl	800b8ac <tcp_abort>
            }
            return ERR_ABRT;
 800de78:	f06f 030c 	mvn.w	r3, #12
 800de7c:	e1ce      	b.n	800e21c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 fae0 	bl	800e444 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800de84:	4b68      	ldr	r3, [pc, #416]	; (800e028 <tcp_process+0x5cc>)
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d005      	beq.n	800de98 <tcp_process+0x43c>
            recv_acked--;
 800de8c:	4b66      	ldr	r3, [pc, #408]	; (800e028 <tcp_process+0x5cc>)
 800de8e:	881b      	ldrh	r3, [r3, #0]
 800de90:	3b01      	subs	r3, #1
 800de92:	b29a      	uxth	r2, r3
 800de94:	4b64      	ldr	r3, [pc, #400]	; (800e028 <tcp_process+0x5cc>)
 800de96:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de9c:	009a      	lsls	r2, r3, #2
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	f241 111c 	movw	r1, #4380	; 0x111c
 800dea8:	428b      	cmp	r3, r1
 800deaa:	bf38      	it	cc
 800deac:	460b      	movcc	r3, r1
 800deae:	429a      	cmp	r2, r3
 800deb0:	d204      	bcs.n	800debc <tcp_process+0x460>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	b29b      	uxth	r3, r3
 800deba:	e00d      	b.n	800ded8 <tcp_process+0x47c>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	f241 121c 	movw	r2, #4380	; 0x111c
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d904      	bls.n	800ded4 <tcp_process+0x478>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	e001      	b.n	800ded8 <tcp_process+0x47c>
 800ded4:	f241 131c 	movw	r3, #4380	; 0x111c
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800dede:	4b53      	ldr	r3, [pc, #332]	; (800e02c <tcp_process+0x5d0>)
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	f003 0320 	and.w	r3, r3, #32
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d037      	beq.n	800df5a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	8b5b      	ldrh	r3, [r3, #26]
 800deee:	f043 0302 	orr.w	r3, r3, #2
 800def2:	b29a      	uxth	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2207      	movs	r2, #7
 800defc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800defe:	e02c      	b.n	800df5a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df00:	4b40      	ldr	r3, [pc, #256]	; (800e004 <tcp_process+0x5a8>)
 800df02:	6819      	ldr	r1, [r3, #0]
 800df04:	4b40      	ldr	r3, [pc, #256]	; (800e008 <tcp_process+0x5ac>)
 800df06:	881b      	ldrh	r3, [r3, #0]
 800df08:	461a      	mov	r2, r3
 800df0a:	4b40      	ldr	r3, [pc, #256]	; (800e00c <tcp_process+0x5b0>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df10:	4b3f      	ldr	r3, [pc, #252]	; (800e010 <tcp_process+0x5b4>)
 800df12:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df14:	885b      	ldrh	r3, [r3, #2]
 800df16:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df18:	4a3d      	ldr	r2, [pc, #244]	; (800e010 <tcp_process+0x5b4>)
 800df1a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df1c:	8812      	ldrh	r2, [r2, #0]
 800df1e:	b292      	uxth	r2, r2
 800df20:	9202      	str	r2, [sp, #8]
 800df22:	9301      	str	r3, [sp, #4]
 800df24:	4b3b      	ldr	r3, [pc, #236]	; (800e014 <tcp_process+0x5b8>)
 800df26:	9300      	str	r3, [sp, #0]
 800df28:	4b3b      	ldr	r3, [pc, #236]	; (800e018 <tcp_process+0x5bc>)
 800df2a:	4602      	mov	r2, r0
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f003 f827 	bl	8010f80 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800df32:	e167      	b.n	800e204 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800df34:	4b32      	ldr	r3, [pc, #200]	; (800e000 <tcp_process+0x5a4>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f000 8161 	beq.w	800e204 <tcp_process+0x7a8>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df46:	1e5a      	subs	r2, r3, #1
 800df48:	4b30      	ldr	r3, [pc, #192]	; (800e00c <tcp_process+0x5b0>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	f040 8159 	bne.w	800e204 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f002 fe0c 	bl	8010b70 <tcp_rexmit>
      break;
 800df58:	e154      	b.n	800e204 <tcp_process+0x7a8>
 800df5a:	e153      	b.n	800e204 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fa71 	bl	800e444 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800df62:	4b32      	ldr	r3, [pc, #200]	; (800e02c <tcp_process+0x5d0>)
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	f003 0320 	and.w	r3, r3, #32
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	f000 814c 	beq.w	800e208 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	8b5b      	ldrh	r3, [r3, #26]
 800df74:	f043 0302 	orr.w	r3, r3, #2
 800df78:	b29a      	uxth	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2207      	movs	r2, #7
 800df82:	751a      	strb	r2, [r3, #20]
      }
      break;
 800df84:	e140      	b.n	800e208 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fa5c 	bl	800e444 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800df8c:	4b27      	ldr	r3, [pc, #156]	; (800e02c <tcp_process+0x5d0>)
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	f003 0320 	and.w	r3, r3, #32
 800df94:	2b00      	cmp	r3, #0
 800df96:	d071      	beq.n	800e07c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df98:	4b19      	ldr	r3, [pc, #100]	; (800e000 <tcp_process+0x5a4>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	f003 0310 	and.w	r3, r3, #16
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d060      	beq.n	800e066 <tcp_process+0x60a>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfa8:	4b16      	ldr	r3, [pc, #88]	; (800e004 <tcp_process+0x5a8>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d15a      	bne.n	800e066 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d156      	bne.n	800e066 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	8b5b      	ldrh	r3, [r3, #26]
 800dfbc:	f043 0302 	orr.w	r3, r3, #2
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7fe fdbe 	bl	800cb48 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dfcc:	4b18      	ldr	r3, [pc, #96]	; (800e030 <tcp_process+0x5d4>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d105      	bne.n	800dfe2 <tcp_process+0x586>
 800dfd6:	4b16      	ldr	r3, [pc, #88]	; (800e030 <tcp_process+0x5d4>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	4a14      	ldr	r2, [pc, #80]	; (800e030 <tcp_process+0x5d4>)
 800dfde:	6013      	str	r3, [r2, #0]
 800dfe0:	e02e      	b.n	800e040 <tcp_process+0x5e4>
 800dfe2:	4b13      	ldr	r3, [pc, #76]	; (800e030 <tcp_process+0x5d4>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	617b      	str	r3, [r7, #20]
 800dfe8:	e027      	b.n	800e03a <tcp_process+0x5de>
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	68db      	ldr	r3, [r3, #12]
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d11f      	bne.n	800e034 <tcp_process+0x5d8>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	68da      	ldr	r2, [r3, #12]
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	60da      	str	r2, [r3, #12]
 800dffc:	e020      	b.n	800e040 <tcp_process+0x5e4>
 800dffe:	bf00      	nop
 800e000:	200040c8 	.word	0x200040c8
 800e004:	200040c0 	.word	0x200040c0
 800e008:	200040c6 	.word	0x200040c6
 800e00c:	200040bc 	.word	0x200040bc
 800e010:	200040ac 	.word	0x200040ac
 800e014:	200073c4 	.word	0x200073c4
 800e018:	200073c8 	.word	0x200073c8
 800e01c:	08017408 	.word	0x08017408
 800e020:	080176a8 	.word	0x080176a8
 800e024:	08017454 	.word	0x08017454
 800e028:	200040c4 	.word	0x200040c4
 800e02c:	200040c9 	.word	0x200040c9
 800e030:	2000aac8 	.word	0x2000aac8
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	617b      	str	r3, [r7, #20]
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d1d4      	bne.n	800dfea <tcp_process+0x58e>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2200      	movs	r2, #0
 800e044:	60da      	str	r2, [r3, #12]
 800e046:	4b77      	ldr	r3, [pc, #476]	; (800e224 <tcp_process+0x7c8>)
 800e048:	2201      	movs	r2, #1
 800e04a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	220a      	movs	r2, #10
 800e050:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e052:	4b75      	ldr	r3, [pc, #468]	; (800e228 <tcp_process+0x7cc>)
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	60da      	str	r2, [r3, #12]
 800e05a:	4a73      	ldr	r2, [pc, #460]	; (800e228 <tcp_process+0x7cc>)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6013      	str	r3, [r2, #0]
 800e060:	f003 f950 	bl	8011304 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e064:	e0d2      	b.n	800e20c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	8b5b      	ldrh	r3, [r3, #26]
 800e06a:	f043 0302 	orr.w	r3, r3, #2
 800e06e:	b29a      	uxth	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2208      	movs	r2, #8
 800e078:	751a      	strb	r2, [r3, #20]
      break;
 800e07a:	e0c7      	b.n	800e20c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e07c:	4b6b      	ldr	r3, [pc, #428]	; (800e22c <tcp_process+0x7d0>)
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	f003 0310 	and.w	r3, r3, #16
 800e084:	2b00      	cmp	r3, #0
 800e086:	f000 80c1 	beq.w	800e20c <tcp_process+0x7b0>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e08e:	4b68      	ldr	r3, [pc, #416]	; (800e230 <tcp_process+0x7d4>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	f040 80ba 	bne.w	800e20c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f040 80b5 	bne.w	800e20c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2206      	movs	r2, #6
 800e0a6:	751a      	strb	r2, [r3, #20]
      break;
 800e0a8:	e0b0      	b.n	800e20c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f9ca 	bl	800e444 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e0b0:	4b60      	ldr	r3, [pc, #384]	; (800e234 <tcp_process+0x7d8>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 0320 	and.w	r3, r3, #32
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	f000 80a9 	beq.w	800e210 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	8b5b      	ldrh	r3, [r3, #26]
 800e0c2:	f043 0302 	orr.w	r3, r3, #2
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7fe fd3b 	bl	800cb48 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e0d2:	4b59      	ldr	r3, [pc, #356]	; (800e238 <tcp_process+0x7dc>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d105      	bne.n	800e0e8 <tcp_process+0x68c>
 800e0dc:	4b56      	ldr	r3, [pc, #344]	; (800e238 <tcp_process+0x7dc>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	4a55      	ldr	r2, [pc, #340]	; (800e238 <tcp_process+0x7dc>)
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	e013      	b.n	800e110 <tcp_process+0x6b4>
 800e0e8:	4b53      	ldr	r3, [pc, #332]	; (800e238 <tcp_process+0x7dc>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	613b      	str	r3, [r7, #16]
 800e0ee:	e00c      	b.n	800e10a <tcp_process+0x6ae>
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d104      	bne.n	800e104 <tcp_process+0x6a8>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	68da      	ldr	r2, [r3, #12]
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	60da      	str	r2, [r3, #12]
 800e102:	e005      	b.n	800e110 <tcp_process+0x6b4>
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	613b      	str	r3, [r7, #16]
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1ef      	bne.n	800e0f0 <tcp_process+0x694>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	60da      	str	r2, [r3, #12]
 800e116:	4b43      	ldr	r3, [pc, #268]	; (800e224 <tcp_process+0x7c8>)
 800e118:	2201      	movs	r2, #1
 800e11a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	220a      	movs	r2, #10
 800e120:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e122:	4b41      	ldr	r3, [pc, #260]	; (800e228 <tcp_process+0x7cc>)
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	60da      	str	r2, [r3, #12]
 800e12a:	4a3f      	ldr	r2, [pc, #252]	; (800e228 <tcp_process+0x7cc>)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6013      	str	r3, [r2, #0]
 800e130:	f003 f8e8 	bl	8011304 <tcp_timer_needed>
      }
      break;
 800e134:	e06c      	b.n	800e210 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f984 	bl	800e444 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e13c:	4b3b      	ldr	r3, [pc, #236]	; (800e22c <tcp_process+0x7d0>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f003 0310 	and.w	r3, r3, #16
 800e144:	2b00      	cmp	r3, #0
 800e146:	d065      	beq.n	800e214 <tcp_process+0x7b8>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e14c:	4b38      	ldr	r3, [pc, #224]	; (800e230 <tcp_process+0x7d4>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	429a      	cmp	r2, r3
 800e152:	d15f      	bne.n	800e214 <tcp_process+0x7b8>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d15b      	bne.n	800e214 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7fe fcf3 	bl	800cb48 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e162:	4b35      	ldr	r3, [pc, #212]	; (800e238 <tcp_process+0x7dc>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d105      	bne.n	800e178 <tcp_process+0x71c>
 800e16c:	4b32      	ldr	r3, [pc, #200]	; (800e238 <tcp_process+0x7dc>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	4a31      	ldr	r2, [pc, #196]	; (800e238 <tcp_process+0x7dc>)
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	e013      	b.n	800e1a0 <tcp_process+0x744>
 800e178:	4b2f      	ldr	r3, [pc, #188]	; (800e238 <tcp_process+0x7dc>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	60fb      	str	r3, [r7, #12]
 800e17e:	e00c      	b.n	800e19a <tcp_process+0x73e>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	429a      	cmp	r2, r3
 800e188:	d104      	bne.n	800e194 <tcp_process+0x738>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	68da      	ldr	r2, [r3, #12]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	60da      	str	r2, [r3, #12]
 800e192:	e005      	b.n	800e1a0 <tcp_process+0x744>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	60fb      	str	r3, [r7, #12]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1ef      	bne.n	800e180 <tcp_process+0x724>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	60da      	str	r2, [r3, #12]
 800e1a6:	4b1f      	ldr	r3, [pc, #124]	; (800e224 <tcp_process+0x7c8>)
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	220a      	movs	r2, #10
 800e1b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e1b2:	4b1d      	ldr	r3, [pc, #116]	; (800e228 <tcp_process+0x7cc>)
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	60da      	str	r2, [r3, #12]
 800e1ba:	4a1b      	ldr	r2, [pc, #108]	; (800e228 <tcp_process+0x7cc>)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	f003 f8a0 	bl	8011304 <tcp_timer_needed>
      }
      break;
 800e1c4:	e026      	b.n	800e214 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 f93c 	bl	800e444 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e1cc:	4b17      	ldr	r3, [pc, #92]	; (800e22c <tcp_process+0x7d0>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	f003 0310 	and.w	r3, r3, #16
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d01f      	beq.n	800e218 <tcp_process+0x7bc>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1dc:	4b14      	ldr	r3, [pc, #80]	; (800e230 <tcp_process+0x7d4>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d119      	bne.n	800e218 <tcp_process+0x7bc>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d115      	bne.n	800e218 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e1ec:	4b11      	ldr	r3, [pc, #68]	; (800e234 <tcp_process+0x7d8>)
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	f043 0310 	orr.w	r3, r3, #16
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	4b0f      	ldr	r3, [pc, #60]	; (800e234 <tcp_process+0x7d8>)
 800e1f8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e1fa:	e00d      	b.n	800e218 <tcp_process+0x7bc>
    default:
      break;
 800e1fc:	bf00      	nop
 800e1fe:	e00c      	b.n	800e21a <tcp_process+0x7be>
      break;
 800e200:	bf00      	nop
 800e202:	e00a      	b.n	800e21a <tcp_process+0x7be>
      break;
 800e204:	bf00      	nop
 800e206:	e008      	b.n	800e21a <tcp_process+0x7be>
      break;
 800e208:	bf00      	nop
 800e20a:	e006      	b.n	800e21a <tcp_process+0x7be>
      break;
 800e20c:	bf00      	nop
 800e20e:	e004      	b.n	800e21a <tcp_process+0x7be>
      break;
 800e210:	bf00      	nop
 800e212:	e002      	b.n	800e21a <tcp_process+0x7be>
      break;
 800e214:	bf00      	nop
 800e216:	e000      	b.n	800e21a <tcp_process+0x7be>
      break;
 800e218:	bf00      	nop
  }
  return ERR_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3724      	adds	r7, #36	; 0x24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd90      	pop	{r4, r7, pc}
 800e224:	2000aac4 	.word	0x2000aac4
 800e228:	2000aad8 	.word	0x2000aad8
 800e22c:	200040c8 	.word	0x200040c8
 800e230:	200040c0 	.word	0x200040c0
 800e234:	200040c9 	.word	0x200040c9
 800e238:	2000aac8 	.word	0x2000aac8

0800e23c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e23c:	b590      	push	{r4, r7, lr}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d106      	bne.n	800e25a <tcp_oos_insert_segment+0x1e>
 800e24c:	4b3b      	ldr	r3, [pc, #236]	; (800e33c <tcp_oos_insert_segment+0x100>)
 800e24e:	f240 421f 	movw	r2, #1055	; 0x41f
 800e252:	493b      	ldr	r1, [pc, #236]	; (800e340 <tcp_oos_insert_segment+0x104>)
 800e254:	483b      	ldr	r0, [pc, #236]	; (800e344 <tcp_oos_insert_segment+0x108>)
 800e256:	f006 f9b9 	bl	80145cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	899b      	ldrh	r3, [r3, #12]
 800e260:	b29b      	uxth	r3, r3
 800e262:	4618      	mov	r0, r3
 800e264:	f7fb f986 	bl	8009574 <lwip_htons>
 800e268:	4603      	mov	r3, r0
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	f003 0301 	and.w	r3, r3, #1
 800e270:	2b00      	cmp	r3, #0
 800e272:	d028      	beq.n	800e2c6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e274:	6838      	ldr	r0, [r7, #0]
 800e276:	f7fe f997 	bl	800c5a8 <tcp_segs_free>
    next = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	603b      	str	r3, [r7, #0]
 800e27e:	e056      	b.n	800e32e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	899b      	ldrh	r3, [r3, #12]
 800e286:	b29b      	uxth	r3, r3
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fb f973 	bl	8009574 <lwip_htons>
 800e28e:	4603      	mov	r3, r0
 800e290:	b2db      	uxtb	r3, r3
 800e292:	f003 0301 	and.w	r3, r3, #1
 800e296:	2b00      	cmp	r3, #0
 800e298:	d00d      	beq.n	800e2b6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	899b      	ldrh	r3, [r3, #12]
 800e2a0:	b29c      	uxth	r4, r3
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	f7fb f966 	bl	8009574 <lwip_htons>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	4322      	orrs	r2, r4
 800e2b2:	b292      	uxth	r2, r2
 800e2b4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f7fe f986 	bl	800c5d2 <tcp_seg_free>
    while (next &&
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00e      	beq.n	800e2ea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	891b      	ldrh	r3, [r3, #8]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4b1d      	ldr	r3, [pc, #116]	; (800e348 <tcp_oos_insert_segment+0x10c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	441a      	add	r2, r3
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	8909      	ldrh	r1, [r1, #8]
 800e2e2:	440b      	add	r3, r1
 800e2e4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	daca      	bge.n	800e280 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d01e      	beq.n	800e32e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	891b      	ldrh	r3, [r3, #8]
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	4b14      	ldr	r3, [pc, #80]	; (800e348 <tcp_oos_insert_segment+0x10c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	441a      	add	r2, r3
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e304:	2b00      	cmp	r3, #0
 800e306:	dd12      	ble.n	800e32e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	b29a      	uxth	r2, r3
 800e310:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <tcp_oos_insert_segment+0x10c>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	b29b      	uxth	r3, r3
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	b29a      	uxth	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	891b      	ldrh	r3, [r3, #8]
 800e326:	4619      	mov	r1, r3
 800e328:	4610      	mov	r0, r2
 800e32a:	f7fc fb49 	bl	800a9c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	683a      	ldr	r2, [r7, #0]
 800e332:	601a      	str	r2, [r3, #0]
}
 800e334:	bf00      	nop
 800e336:	3714      	adds	r7, #20
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd90      	pop	{r4, r7, pc}
 800e33c:	08017408 	.word	0x08017408
 800e340:	080176c8 	.word	0x080176c8
 800e344:	08017454 	.word	0x08017454
 800e348:	200040bc 	.word	0x200040bc

0800e34c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e34c:	b5b0      	push	{r4, r5, r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e35a:	e03e      	b.n	800e3da <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fc fd3c 	bl	800ade8 <pbuf_clen>
 800e370:	4603      	mov	r3, r0
 800e372:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e37a:	8a7a      	ldrh	r2, [r7, #18]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d906      	bls.n	800e38e <tcp_free_acked_segments+0x42>
 800e380:	4b2a      	ldr	r3, [pc, #168]	; (800e42c <tcp_free_acked_segments+0xe0>)
 800e382:	f240 4257 	movw	r2, #1111	; 0x457
 800e386:	492a      	ldr	r1, [pc, #168]	; (800e430 <tcp_free_acked_segments+0xe4>)
 800e388:	482a      	ldr	r0, [pc, #168]	; (800e434 <tcp_free_acked_segments+0xe8>)
 800e38a:	f006 f91f 	bl	80145cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e394:	8a7b      	ldrh	r3, [r7, #18]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	b29a      	uxth	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	891a      	ldrh	r2, [r3, #8]
 800e3a4:	4b24      	ldr	r3, [pc, #144]	; (800e438 <tcp_free_acked_segments+0xec>)
 800e3a6:	881b      	ldrh	r3, [r3, #0]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	4b22      	ldr	r3, [pc, #136]	; (800e438 <tcp_free_acked_segments+0xec>)
 800e3ae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e3b0:	6978      	ldr	r0, [r7, #20]
 800e3b2:	f7fe f90e 	bl	800c5d2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00c      	beq.n	800e3da <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d109      	bne.n	800e3da <tcp_free_acked_segments+0x8e>
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d106      	bne.n	800e3da <tcp_free_acked_segments+0x8e>
 800e3cc:	4b17      	ldr	r3, [pc, #92]	; (800e42c <tcp_free_acked_segments+0xe0>)
 800e3ce:	f240 4261 	movw	r2, #1121	; 0x461
 800e3d2:	491a      	ldr	r1, [pc, #104]	; (800e43c <tcp_free_acked_segments+0xf0>)
 800e3d4:	4817      	ldr	r0, [pc, #92]	; (800e434 <tcp_free_acked_segments+0xe8>)
 800e3d6:	f006 f8f9 	bl	80145cc <iprintf>
  while (seg_list != NULL &&
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d020      	beq.n	800e422 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fb f8d9 	bl	800959e <lwip_htonl>
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	891b      	ldrh	r3, [r3, #8]
 800e3f2:	461d      	mov	r5, r3
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	899b      	ldrh	r3, [r3, #12]
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7fb f8b9 	bl	8009574 <lwip_htons>
 800e402:	4603      	mov	r3, r0
 800e404:	b2db      	uxtb	r3, r3
 800e406:	f003 0303 	and.w	r3, r3, #3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <tcp_free_acked_segments+0xc6>
 800e40e:	2301      	movs	r3, #1
 800e410:	e000      	b.n	800e414 <tcp_free_acked_segments+0xc8>
 800e412:	2300      	movs	r3, #0
 800e414:	442b      	add	r3, r5
 800e416:	18e2      	adds	r2, r4, r3
 800e418:	4b09      	ldr	r3, [pc, #36]	; (800e440 <tcp_free_acked_segments+0xf4>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dd9c      	ble.n	800e35c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e422:	68bb      	ldr	r3, [r7, #8]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3718      	adds	r7, #24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bdb0      	pop	{r4, r5, r7, pc}
 800e42c:	08017408 	.word	0x08017408
 800e430:	080176f0 	.word	0x080176f0
 800e434:	08017454 	.word	0x08017454
 800e438:	200040c4 	.word	0x200040c4
 800e43c:	08017718 	.word	0x08017718
 800e440:	200040c0 	.word	0x200040c0

0800e444 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e444:	b5b0      	push	{r4, r5, r7, lr}
 800e446:	b094      	sub	sp, #80	; 0x50
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d106      	bne.n	800e464 <tcp_receive+0x20>
 800e456:	4ba6      	ldr	r3, [pc, #664]	; (800e6f0 <tcp_receive+0x2ac>)
 800e458:	f240 427b 	movw	r2, #1147	; 0x47b
 800e45c:	49a5      	ldr	r1, [pc, #660]	; (800e6f4 <tcp_receive+0x2b0>)
 800e45e:	48a6      	ldr	r0, [pc, #664]	; (800e6f8 <tcp_receive+0x2b4>)
 800e460:	f006 f8b4 	bl	80145cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	7d1b      	ldrb	r3, [r3, #20]
 800e468:	2b03      	cmp	r3, #3
 800e46a:	d806      	bhi.n	800e47a <tcp_receive+0x36>
 800e46c:	4ba0      	ldr	r3, [pc, #640]	; (800e6f0 <tcp_receive+0x2ac>)
 800e46e:	f240 427c 	movw	r2, #1148	; 0x47c
 800e472:	49a2      	ldr	r1, [pc, #648]	; (800e6fc <tcp_receive+0x2b8>)
 800e474:	48a0      	ldr	r0, [pc, #640]	; (800e6f8 <tcp_receive+0x2b4>)
 800e476:	f006 f8a9 	bl	80145cc <iprintf>

  if (flags & TCP_ACK) {
 800e47a:	4ba1      	ldr	r3, [pc, #644]	; (800e700 <tcp_receive+0x2bc>)
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	f003 0310 	and.w	r3, r3, #16
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 8263 	beq.w	800e94e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e48e:	461a      	mov	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e494:	4413      	add	r3, r2
 800e496:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e49c:	4b99      	ldr	r3, [pc, #612]	; (800e704 <tcp_receive+0x2c0>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	db1b      	blt.n	800e4de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e4aa:	4b96      	ldr	r3, [pc, #600]	; (800e704 <tcp_receive+0x2c0>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d106      	bne.n	800e4c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4b6:	4b94      	ldr	r3, [pc, #592]	; (800e708 <tcp_receive+0x2c4>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	1ad3      	subs	r3, r2, r3
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	db0e      	blt.n	800e4de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e4c4:	4b90      	ldr	r3, [pc, #576]	; (800e708 <tcp_receive+0x2c4>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d125      	bne.n	800e518 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e4cc:	4b8f      	ldr	r3, [pc, #572]	; (800e70c <tcp_receive+0x2c8>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	89db      	ldrh	r3, [r3, #14]
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d91c      	bls.n	800e518 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e4de:	4b8b      	ldr	r3, [pc, #556]	; (800e70c <tcp_receive+0x2c8>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	89db      	ldrh	r3, [r3, #14]
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d205      	bcs.n	800e508 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e508:	4b7e      	ldr	r3, [pc, #504]	; (800e704 <tcp_receive+0x2c0>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e510:	4b7d      	ldr	r3, [pc, #500]	; (800e708 <tcp_receive+0x2c4>)
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e518:	4b7b      	ldr	r3, [pc, #492]	; (800e708 <tcp_receive+0x2c4>)
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	dc58      	bgt.n	800e5d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e526:	4b7a      	ldr	r3, [pc, #488]	; (800e710 <tcp_receive+0x2cc>)
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d14b      	bne.n	800e5c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e538:	4413      	add	r3, r2
 800e53a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d142      	bne.n	800e5c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e546:	2b00      	cmp	r3, #0
 800e548:	db3d      	blt.n	800e5c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e54e:	4b6e      	ldr	r3, [pc, #440]	; (800e708 <tcp_receive+0x2c4>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	429a      	cmp	r2, r3
 800e554:	d137      	bne.n	800e5c6 <tcp_receive+0x182>
              found_dupack = 1;
 800e556:	2301      	movs	r3, #1
 800e558:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e560:	2bff      	cmp	r3, #255	; 0xff
 800e562:	d007      	beq.n	800e574 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e56a:	3301      	adds	r3, #1
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e57a:	2b03      	cmp	r3, #3
 800e57c:	d91b      	bls.n	800e5b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e588:	4413      	add	r3, r2
 800e58a:	b29a      	uxth	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e592:	429a      	cmp	r2, r3
 800e594:	d30a      	bcc.n	800e5ac <tcp_receive+0x168>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5a0:	4413      	add	r3, r2
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e5aa:	e004      	b.n	800e5b6 <tcp_receive+0x172>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e5bc:	2b02      	cmp	r3, #2
 800e5be:	d902      	bls.n	800e5c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f002 fb41 	bl	8010c48 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f040 8160 	bne.w	800e88e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e5d6:	e15a      	b.n	800e88e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e5d8:	4b4b      	ldr	r3, [pc, #300]	; (800e708 <tcp_receive+0x2c4>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f2c0 814d 	blt.w	800e884 <tcp_receive+0x440>
 800e5ea:	4b47      	ldr	r3, [pc, #284]	; (800e708 <tcp_receive+0x2c4>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5f2:	1ad3      	subs	r3, r2, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f300 8145 	bgt.w	800e884 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	8b5b      	ldrh	r3, [r3, #26]
 800e5fe:	f003 0304 	and.w	r3, r3, #4
 800e602:	2b00      	cmp	r3, #0
 800e604:	d010      	beq.n	800e628 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	8b5b      	ldrh	r3, [r3, #26]
 800e60a:	f023 0304 	bic.w	r3, r3, #4
 800e60e:	b29a      	uxth	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e636:	10db      	asrs	r3, r3, #3
 800e638:	b21b      	sxth	r3, r3
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e642:	b29b      	uxth	r3, r3
 800e644:	4413      	add	r3, r2
 800e646:	b29b      	uxth	r3, r3
 800e648:	b21a      	sxth	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e650:	4b2d      	ldr	r3, [pc, #180]	; (800e708 <tcp_receive+0x2c4>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	b29a      	uxth	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	1ad3      	subs	r3, r2, r3
 800e65e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e668:	4b27      	ldr	r3, [pc, #156]	; (800e708 <tcp_receive+0x2c4>)
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7d1b      	ldrb	r3, [r3, #20]
 800e674:	2b03      	cmp	r3, #3
 800e676:	f240 8096 	bls.w	800e7a6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e686:	429a      	cmp	r2, r3
 800e688:	d244      	bcs.n	800e714 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	8b5b      	ldrh	r3, [r3, #26]
 800e68e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <tcp_receive+0x256>
 800e696:	2301      	movs	r3, #1
 800e698:	e000      	b.n	800e69c <tcp_receive+0x258>
 800e69a:	2302      	movs	r3, #2
 800e69c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e6a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6aa:	fb12 f303 	smulbb	r3, r2, r3
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	bf28      	it	cs
 800e6b6:	4613      	movcs	r3, r2
 800e6b8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6c2:	4413      	add	r3, r2
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d309      	bcc.n	800e6e4 <tcp_receive+0x2a0>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6d8:	4413      	add	r3, r2
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e6e2:	e060      	b.n	800e7a6 <tcp_receive+0x362>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e6ee:	e05a      	b.n	800e7a6 <tcp_receive+0x362>
 800e6f0:	08017408 	.word	0x08017408
 800e6f4:	08017738 	.word	0x08017738
 800e6f8:	08017454 	.word	0x08017454
 800e6fc:	08017754 	.word	0x08017754
 800e700:	200040c8 	.word	0x200040c8
 800e704:	200040bc 	.word	0x200040bc
 800e708:	200040c0 	.word	0x200040c0
 800e70c:	200040ac 	.word	0x200040ac
 800e710:	200040c6 	.word	0x200040c6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e71a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e71c:	4413      	add	r3, r2
 800e71e:	b29a      	uxth	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e726:	429a      	cmp	r2, r3
 800e728:	d309      	bcc.n	800e73e <tcp_receive+0x2fa>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e732:	4413      	add	r3, r2
 800e734:	b29a      	uxth	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e73c:	e004      	b.n	800e748 <tcp_receive+0x304>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e754:	429a      	cmp	r2, r3
 800e756:	d326      	bcc.n	800e7a6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	b29a      	uxth	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e778:	4413      	add	r3, r2
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e782:	429a      	cmp	r2, r3
 800e784:	d30a      	bcc.n	800e79c <tcp_receive+0x358>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e790:	4413      	add	r3, r2
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e79a:	e004      	b.n	800e7a6 <tcp_receive+0x362>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7ae:	4a98      	ldr	r2, [pc, #608]	; (800ea10 <tcp_receive+0x5cc>)
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f7ff fdcb 	bl	800e34c <tcp_free_acked_segments>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7c4:	4a93      	ldr	r2, [pc, #588]	; (800ea14 <tcp_receive+0x5d0>)
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7ff fdc0 	bl	800e34c <tcp_free_acked_segments>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d104      	bne.n	800e7e4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7e0:	861a      	strh	r2, [r3, #48]	; 0x30
 800e7e2:	e002      	b.n	800e7ea <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d103      	bne.n	800e800 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e806:	4b84      	ldr	r3, [pc, #528]	; (800ea18 <tcp_receive+0x5d4>)
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	4413      	add	r3, r2
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	8b5b      	ldrh	r3, [r3, #26]
 800e818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d035      	beq.n	800e88c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e824:	2b00      	cmp	r3, #0
 800e826:	d118      	bne.n	800e85a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00c      	beq.n	800e84a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fa feae 	bl	800959e <lwip_htonl>
 800e842:	4603      	mov	r3, r0
 800e844:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e846:	2b00      	cmp	r3, #0
 800e848:	dc20      	bgt.n	800e88c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	8b5b      	ldrh	r3, [r3, #26]
 800e84e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e852:	b29a      	uxth	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e858:	e018      	b.n	800e88c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e862:	68db      	ldr	r3, [r3, #12]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	4618      	mov	r0, r3
 800e868:	f7fa fe99 	bl	800959e <lwip_htonl>
 800e86c:	4603      	mov	r3, r0
 800e86e:	1ae3      	subs	r3, r4, r3
 800e870:	2b00      	cmp	r3, #0
 800e872:	dc0b      	bgt.n	800e88c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	8b5b      	ldrh	r3, [r3, #26]
 800e878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e882:	e003      	b.n	800e88c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f002 fbcd 	bl	8011024 <tcp_send_empty_ack>
 800e88a:	e000      	b.n	800e88e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e88c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e892:	2b00      	cmp	r3, #0
 800e894:	d05b      	beq.n	800e94e <tcp_receive+0x50a>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e89a:	4b60      	ldr	r3, [pc, #384]	; (800ea1c <tcp_receive+0x5d8>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	da54      	bge.n	800e94e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e8a4:	4b5e      	ldr	r3, [pc, #376]	; (800ea20 <tcp_receive+0x5dc>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	b29a      	uxth	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	1ad3      	subs	r3, r2, r3
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e8b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e8c2:	10db      	asrs	r3, r3, #3
 800e8c4:	b21b      	sxth	r3, r3
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e8d6:	b29a      	uxth	r2, r3
 800e8d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e8dc:	4413      	add	r3, r2
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	b21a      	sxth	r2, r3
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e8e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	da05      	bge.n	800e8fa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e8ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e8f2:	425b      	negs	r3, r3
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e8fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e904:	109b      	asrs	r3, r3, #2
 800e906:	b21b      	sxth	r3, r3
 800e908:	b29b      	uxth	r3, r3
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e918:	b29a      	uxth	r2, r3
 800e91a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e91e:	4413      	add	r3, r2
 800e920:	b29b      	uxth	r3, r3
 800e922:	b21a      	sxth	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e92e:	10db      	asrs	r3, r3, #3
 800e930:	b21b      	sxth	r3, r3
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	4413      	add	r3, r2
 800e93e:	b29b      	uxth	r3, r3
 800e940:	b21a      	sxth	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e94e:	4b35      	ldr	r3, [pc, #212]	; (800ea24 <tcp_receive+0x5e0>)
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	f000 84e1 	beq.w	800f31a <tcp_receive+0xed6>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	7d1b      	ldrb	r3, [r3, #20]
 800e95c:	2b06      	cmp	r3, #6
 800e95e:	f200 84dc 	bhi.w	800f31a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e966:	4b30      	ldr	r3, [pc, #192]	; (800ea28 <tcp_receive+0x5e4>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	1ad3      	subs	r3, r2, r3
 800e96c:	3b01      	subs	r3, #1
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f2c0 808e 	blt.w	800ea90 <tcp_receive+0x64c>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e978:	4b2a      	ldr	r3, [pc, #168]	; (800ea24 <tcp_receive+0x5e0>)
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	4619      	mov	r1, r3
 800e97e:	4b2a      	ldr	r3, [pc, #168]	; (800ea28 <tcp_receive+0x5e4>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	440b      	add	r3, r1
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	3301      	adds	r3, #1
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f300 8081 	bgt.w	800ea90 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e98e:	4b27      	ldr	r3, [pc, #156]	; (800ea2c <tcp_receive+0x5e8>)
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e998:	4b23      	ldr	r3, [pc, #140]	; (800ea28 <tcp_receive+0x5e4>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e9a0:	4b22      	ldr	r3, [pc, #136]	; (800ea2c <tcp_receive+0x5e8>)
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d106      	bne.n	800e9b6 <tcp_receive+0x572>
 800e9a8:	4b21      	ldr	r3, [pc, #132]	; (800ea30 <tcp_receive+0x5ec>)
 800e9aa:	f240 5294 	movw	r2, #1428	; 0x594
 800e9ae:	4921      	ldr	r1, [pc, #132]	; (800ea34 <tcp_receive+0x5f0>)
 800e9b0:	4821      	ldr	r0, [pc, #132]	; (800ea38 <tcp_receive+0x5f4>)
 800e9b2:	f005 fe0b 	bl	80145cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d906      	bls.n	800e9ce <tcp_receive+0x58a>
 800e9c0:	4b1b      	ldr	r3, [pc, #108]	; (800ea30 <tcp_receive+0x5ec>)
 800e9c2:	f240 5295 	movw	r2, #1429	; 0x595
 800e9c6:	491d      	ldr	r1, [pc, #116]	; (800ea3c <tcp_receive+0x5f8>)
 800e9c8:	481b      	ldr	r0, [pc, #108]	; (800ea38 <tcp_receive+0x5f4>)
 800e9ca:	f005 fdff 	bl	80145cc <iprintf>
      off = (u16_t)off32;
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e9d4:	4b15      	ldr	r3, [pc, #84]	; (800ea2c <tcp_receive+0x5e8>)
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	891b      	ldrh	r3, [r3, #8]
 800e9da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d906      	bls.n	800e9f0 <tcp_receive+0x5ac>
 800e9e2:	4b13      	ldr	r3, [pc, #76]	; (800ea30 <tcp_receive+0x5ec>)
 800e9e4:	f240 5297 	movw	r2, #1431	; 0x597
 800e9e8:	4915      	ldr	r1, [pc, #84]	; (800ea40 <tcp_receive+0x5fc>)
 800e9ea:	4813      	ldr	r0, [pc, #76]	; (800ea38 <tcp_receive+0x5f4>)
 800e9ec:	f005 fdee 	bl	80145cc <iprintf>
      inseg.len -= off;
 800e9f0:	4b0e      	ldr	r3, [pc, #56]	; (800ea2c <tcp_receive+0x5e8>)
 800e9f2:	891a      	ldrh	r2, [r3, #8]
 800e9f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ea2c <tcp_receive+0x5e8>)
 800e9fe:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ea00:	4b0a      	ldr	r3, [pc, #40]	; (800ea2c <tcp_receive+0x5e8>)
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	891a      	ldrh	r2, [r3, #8]
 800ea06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ea0e:	e029      	b.n	800ea64 <tcp_receive+0x620>
 800ea10:	08017770 	.word	0x08017770
 800ea14:	08017778 	.word	0x08017778
 800ea18:	200040c4 	.word	0x200040c4
 800ea1c:	200040c0 	.word	0x200040c0
 800ea20:	2000aacc 	.word	0x2000aacc
 800ea24:	200040c6 	.word	0x200040c6
 800ea28:	200040bc 	.word	0x200040bc
 800ea2c:	2000409c 	.word	0x2000409c
 800ea30:	08017408 	.word	0x08017408
 800ea34:	08017780 	.word	0x08017780
 800ea38:	08017454 	.word	0x08017454
 800ea3c:	08017790 	.word	0x08017790
 800ea40:	080177a0 	.word	0x080177a0
        off -= p->len;
 800ea44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea46:	895b      	ldrh	r3, [r3, #10]
 800ea48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ea52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea56:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ea58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ea5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ea64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea66:	895b      	ldrh	r3, [r3, #10]
 800ea68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d8e9      	bhi.n	800ea44 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ea70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea74:	4619      	mov	r1, r3
 800ea76:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ea78:	f7fc f8a2 	bl	800abc0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea80:	4a91      	ldr	r2, [pc, #580]	; (800ecc8 <tcp_receive+0x884>)
 800ea82:	6013      	str	r3, [r2, #0]
 800ea84:	4b91      	ldr	r3, [pc, #580]	; (800eccc <tcp_receive+0x888>)
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	4a8f      	ldr	r2, [pc, #572]	; (800ecc8 <tcp_receive+0x884>)
 800ea8a:	6812      	ldr	r2, [r2, #0]
 800ea8c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ea8e:	e00d      	b.n	800eaac <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ea90:	4b8d      	ldr	r3, [pc, #564]	; (800ecc8 <tcp_receive+0x884>)
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	da06      	bge.n	800eaac <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	8b5b      	ldrh	r3, [r3, #26]
 800eaa2:	f043 0302 	orr.w	r3, r3, #2
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eaac:	4b86      	ldr	r3, [pc, #536]	; (800ecc8 <tcp_receive+0x884>)
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f2c0 842a 	blt.w	800f310 <tcp_receive+0xecc>
 800eabc:	4b82      	ldr	r3, [pc, #520]	; (800ecc8 <tcp_receive+0x884>)
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac4:	6879      	ldr	r1, [r7, #4]
 800eac6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eac8:	440b      	add	r3, r1
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	3301      	adds	r3, #1
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f300 841e 	bgt.w	800f310 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ead8:	4b7b      	ldr	r3, [pc, #492]	; (800ecc8 <tcp_receive+0x884>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	429a      	cmp	r2, r3
 800eade:	f040 829a 	bne.w	800f016 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800eae2:	4b7a      	ldr	r3, [pc, #488]	; (800eccc <tcp_receive+0x888>)
 800eae4:	891c      	ldrh	r4, [r3, #8]
 800eae6:	4b79      	ldr	r3, [pc, #484]	; (800eccc <tcp_receive+0x888>)
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	899b      	ldrh	r3, [r3, #12]
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fa fd40 	bl	8009574 <lwip_htons>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	f003 0303 	and.w	r3, r3, #3
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d001      	beq.n	800eb04 <tcp_receive+0x6c0>
 800eb00:	2301      	movs	r3, #1
 800eb02:	e000      	b.n	800eb06 <tcp_receive+0x6c2>
 800eb04:	2300      	movs	r3, #0
 800eb06:	4423      	add	r3, r4
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	4b71      	ldr	r3, [pc, #452]	; (800ecd0 <tcp_receive+0x88c>)
 800eb0c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb12:	4b6f      	ldr	r3, [pc, #444]	; (800ecd0 <tcp_receive+0x88c>)
 800eb14:	881b      	ldrh	r3, [r3, #0]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d275      	bcs.n	800ec06 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eb1a:	4b6c      	ldr	r3, [pc, #432]	; (800eccc <tcp_receive+0x888>)
 800eb1c:	68db      	ldr	r3, [r3, #12]
 800eb1e:	899b      	ldrh	r3, [r3, #12]
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fa fd26 	bl	8009574 <lwip_htons>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	f003 0301 	and.w	r3, r3, #1
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d01f      	beq.n	800eb74 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800eb34:	4b65      	ldr	r3, [pc, #404]	; (800eccc <tcp_receive+0x888>)
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	899b      	ldrh	r3, [r3, #12]
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	b21b      	sxth	r3, r3
 800eb3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eb42:	b21c      	sxth	r4, r3
 800eb44:	4b61      	ldr	r3, [pc, #388]	; (800eccc <tcp_receive+0x888>)
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	899b      	ldrh	r3, [r3, #12]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fa fd11 	bl	8009574 <lwip_htons>
 800eb52:	4603      	mov	r3, r0
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7fa fd08 	bl	8009574 <lwip_htons>
 800eb64:	4603      	mov	r3, r0
 800eb66:	b21b      	sxth	r3, r3
 800eb68:	4323      	orrs	r3, r4
 800eb6a:	b21a      	sxth	r2, r3
 800eb6c:	4b57      	ldr	r3, [pc, #348]	; (800eccc <tcp_receive+0x888>)
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	b292      	uxth	r2, r2
 800eb72:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb78:	4b54      	ldr	r3, [pc, #336]	; (800eccc <tcp_receive+0x888>)
 800eb7a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eb7c:	4b53      	ldr	r3, [pc, #332]	; (800eccc <tcp_receive+0x888>)
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	899b      	ldrh	r3, [r3, #12]
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7fa fcf5 	bl	8009574 <lwip_htons>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	f003 0302 	and.w	r3, r3, #2
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d005      	beq.n	800eba2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800eb96:	4b4d      	ldr	r3, [pc, #308]	; (800eccc <tcp_receive+0x888>)
 800eb98:	891b      	ldrh	r3, [r3, #8]
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	4b4b      	ldr	r3, [pc, #300]	; (800eccc <tcp_receive+0x888>)
 800eba0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800eba2:	4b4a      	ldr	r3, [pc, #296]	; (800eccc <tcp_receive+0x888>)
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	4a49      	ldr	r2, [pc, #292]	; (800eccc <tcp_receive+0x888>)
 800eba8:	8912      	ldrh	r2, [r2, #8]
 800ebaa:	4611      	mov	r1, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fb ff07 	bl	800a9c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ebb2:	4b46      	ldr	r3, [pc, #280]	; (800eccc <tcp_receive+0x888>)
 800ebb4:	891c      	ldrh	r4, [r3, #8]
 800ebb6:	4b45      	ldr	r3, [pc, #276]	; (800eccc <tcp_receive+0x888>)
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	899b      	ldrh	r3, [r3, #12]
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fa fcd8 	bl	8009574 <lwip_htons>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	f003 0303 	and.w	r3, r3, #3
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <tcp_receive+0x790>
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e000      	b.n	800ebd6 <tcp_receive+0x792>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4423      	add	r3, r4
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	4b3d      	ldr	r3, [pc, #244]	; (800ecd0 <tcp_receive+0x88c>)
 800ebdc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ebde:	4b3c      	ldr	r3, [pc, #240]	; (800ecd0 <tcp_receive+0x88c>)
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	4b38      	ldr	r3, [pc, #224]	; (800ecc8 <tcp_receive+0x884>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	441a      	add	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebee:	6879      	ldr	r1, [r7, #4]
 800ebf0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebf2:	440b      	add	r3, r1
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d006      	beq.n	800ec06 <tcp_receive+0x7c2>
 800ebf8:	4b36      	ldr	r3, [pc, #216]	; (800ecd4 <tcp_receive+0x890>)
 800ebfa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ebfe:	4936      	ldr	r1, [pc, #216]	; (800ecd8 <tcp_receive+0x894>)
 800ec00:	4836      	ldr	r0, [pc, #216]	; (800ecdc <tcp_receive+0x898>)
 800ec02:	f005 fce3 	bl	80145cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 80e7 	beq.w	800edde <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ec10:	4b2e      	ldr	r3, [pc, #184]	; (800eccc <tcp_receive+0x888>)
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	899b      	ldrh	r3, [r3, #12]
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fa fcab 	bl	8009574 <lwip_htons>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	f003 0301 	and.w	r3, r3, #1
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d010      	beq.n	800ec4c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ec2a:	e00a      	b.n	800ec42 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec30:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	f7fd fcc8 	bl	800c5d2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1f0      	bne.n	800ec2c <tcp_receive+0x7e8>
 800ec4a:	e0c8      	b.n	800edde <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec50:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ec52:	e052      	b.n	800ecfa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ec54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	899b      	ldrh	r3, [r3, #12]
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7fa fc89 	bl	8009574 <lwip_htons>
 800ec62:	4603      	mov	r3, r0
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	f003 0301 	and.w	r3, r3, #1
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d03d      	beq.n	800ecea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ec6e:	4b17      	ldr	r3, [pc, #92]	; (800eccc <tcp_receive+0x888>)
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	899b      	ldrh	r3, [r3, #12]
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fa fc7c 	bl	8009574 <lwip_htons>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d130      	bne.n	800ecea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ec88:	4b10      	ldr	r3, [pc, #64]	; (800eccc <tcp_receive+0x888>)
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	899b      	ldrh	r3, [r3, #12]
 800ec8e:	b29c      	uxth	r4, r3
 800ec90:	2001      	movs	r0, #1
 800ec92:	f7fa fc6f 	bl	8009574 <lwip_htons>
 800ec96:	4603      	mov	r3, r0
 800ec98:	461a      	mov	r2, r3
 800ec9a:	4b0c      	ldr	r3, [pc, #48]	; (800eccc <tcp_receive+0x888>)
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	4322      	orrs	r2, r4
 800eca0:	b292      	uxth	r2, r2
 800eca2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800eca4:	4b09      	ldr	r3, [pc, #36]	; (800eccc <tcp_receive+0x888>)
 800eca6:	891c      	ldrh	r4, [r3, #8]
 800eca8:	4b08      	ldr	r3, [pc, #32]	; (800eccc <tcp_receive+0x888>)
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	899b      	ldrh	r3, [r3, #12]
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fa fc5f 	bl	8009574 <lwip_htons>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	f003 0303 	and.w	r3, r3, #3
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00e      	beq.n	800ece0 <tcp_receive+0x89c>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e00d      	b.n	800ece2 <tcp_receive+0x89e>
 800ecc6:	bf00      	nop
 800ecc8:	200040bc 	.word	0x200040bc
 800eccc:	2000409c 	.word	0x2000409c
 800ecd0:	200040c6 	.word	0x200040c6
 800ecd4:	08017408 	.word	0x08017408
 800ecd8:	080177b0 	.word	0x080177b0
 800ecdc:	08017454 	.word	0x08017454
 800ece0:	2300      	movs	r3, #0
 800ece2:	4423      	add	r3, r4
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	4b98      	ldr	r3, [pc, #608]	; (800ef48 <tcp_receive+0xb04>)
 800ece8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ecea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecec:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ecee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ecf4:	6938      	ldr	r0, [r7, #16]
 800ecf6:	f7fd fc6c 	bl	800c5d2 <tcp_seg_free>
            while (next &&
 800ecfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00e      	beq.n	800ed1e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ed00:	4b91      	ldr	r3, [pc, #580]	; (800ef48 <tcp_receive+0xb04>)
 800ed02:	881b      	ldrh	r3, [r3, #0]
 800ed04:	461a      	mov	r2, r3
 800ed06:	4b91      	ldr	r3, [pc, #580]	; (800ef4c <tcp_receive+0xb08>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	441a      	add	r2, r3
 800ed0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed14:	8909      	ldrh	r1, [r1, #8]
 800ed16:	440b      	add	r3, r1
 800ed18:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	da9a      	bge.n	800ec54 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ed1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d059      	beq.n	800edd8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ed24:	4b88      	ldr	r3, [pc, #544]	; (800ef48 <tcp_receive+0xb04>)
 800ed26:	881b      	ldrh	r3, [r3, #0]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	4b88      	ldr	r3, [pc, #544]	; (800ef4c <tcp_receive+0xb08>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	441a      	add	r2, r3
 800ed30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	dd4d      	ble.n	800edd8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ed3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	4b81      	ldr	r3, [pc, #516]	; (800ef4c <tcp_receive+0xb08>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	1ad3      	subs	r3, r2, r3
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	4b80      	ldr	r3, [pc, #512]	; (800ef50 <tcp_receive+0xb0c>)
 800ed50:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ed52:	4b7f      	ldr	r3, [pc, #508]	; (800ef50 <tcp_receive+0xb0c>)
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	899b      	ldrh	r3, [r3, #12]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fa fc0a 	bl	8009574 <lwip_htons>
 800ed60:	4603      	mov	r3, r0
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	f003 0302 	and.w	r3, r3, #2
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d005      	beq.n	800ed78 <tcp_receive+0x934>
                inseg.len -= 1;
 800ed6c:	4b78      	ldr	r3, [pc, #480]	; (800ef50 <tcp_receive+0xb0c>)
 800ed6e:	891b      	ldrh	r3, [r3, #8]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	4b76      	ldr	r3, [pc, #472]	; (800ef50 <tcp_receive+0xb0c>)
 800ed76:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ed78:	4b75      	ldr	r3, [pc, #468]	; (800ef50 <tcp_receive+0xb0c>)
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	4a74      	ldr	r2, [pc, #464]	; (800ef50 <tcp_receive+0xb0c>)
 800ed7e:	8912      	ldrh	r2, [r2, #8]
 800ed80:	4611      	mov	r1, r2
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fb fe1c 	bl	800a9c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ed88:	4b71      	ldr	r3, [pc, #452]	; (800ef50 <tcp_receive+0xb0c>)
 800ed8a:	891c      	ldrh	r4, [r3, #8]
 800ed8c:	4b70      	ldr	r3, [pc, #448]	; (800ef50 <tcp_receive+0xb0c>)
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	899b      	ldrh	r3, [r3, #12]
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fa fbed 	bl	8009574 <lwip_htons>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	f003 0303 	and.w	r3, r3, #3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <tcp_receive+0x966>
 800eda6:	2301      	movs	r3, #1
 800eda8:	e000      	b.n	800edac <tcp_receive+0x968>
 800edaa:	2300      	movs	r3, #0
 800edac:	4423      	add	r3, r4
 800edae:	b29a      	uxth	r2, r3
 800edb0:	4b65      	ldr	r3, [pc, #404]	; (800ef48 <tcp_receive+0xb04>)
 800edb2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800edb4:	4b64      	ldr	r3, [pc, #400]	; (800ef48 <tcp_receive+0xb04>)
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	461a      	mov	r2, r3
 800edba:	4b64      	ldr	r3, [pc, #400]	; (800ef4c <tcp_receive+0xb08>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	441a      	add	r2, r3
 800edc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d006      	beq.n	800edd8 <tcp_receive+0x994>
 800edca:	4b62      	ldr	r3, [pc, #392]	; (800ef54 <tcp_receive+0xb10>)
 800edcc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800edd0:	4961      	ldr	r1, [pc, #388]	; (800ef58 <tcp_receive+0xb14>)
 800edd2:	4862      	ldr	r0, [pc, #392]	; (800ef5c <tcp_receive+0xb18>)
 800edd4:	f005 fbfa 	bl	80145cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eddc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800edde:	4b5a      	ldr	r3, [pc, #360]	; (800ef48 <tcp_receive+0xb04>)
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	461a      	mov	r2, r3
 800ede4:	4b59      	ldr	r3, [pc, #356]	; (800ef4c <tcp_receive+0xb08>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	441a      	add	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800edf2:	4b55      	ldr	r3, [pc, #340]	; (800ef48 <tcp_receive+0xb04>)
 800edf4:	881b      	ldrh	r3, [r3, #0]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d206      	bcs.n	800ee08 <tcp_receive+0x9c4>
 800edfa:	4b56      	ldr	r3, [pc, #344]	; (800ef54 <tcp_receive+0xb10>)
 800edfc:	f240 6207 	movw	r2, #1543	; 0x607
 800ee00:	4957      	ldr	r1, [pc, #348]	; (800ef60 <tcp_receive+0xb1c>)
 800ee02:	4856      	ldr	r0, [pc, #344]	; (800ef5c <tcp_receive+0xb18>)
 800ee04:	f005 fbe2 	bl	80145cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ee0c:	4b4e      	ldr	r3, [pc, #312]	; (800ef48 <tcp_receive+0xb04>)
 800ee0e:	881b      	ldrh	r3, [r3, #0]
 800ee10:	1ad3      	subs	r3, r2, r3
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7fc feb5 	bl	800bb88 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ee1e:	4b4c      	ldr	r3, [pc, #304]	; (800ef50 <tcp_receive+0xb0c>)
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	891b      	ldrh	r3, [r3, #8]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d006      	beq.n	800ee36 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ee28:	4b49      	ldr	r3, [pc, #292]	; (800ef50 <tcp_receive+0xb0c>)
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	4a4d      	ldr	r2, [pc, #308]	; (800ef64 <tcp_receive+0xb20>)
 800ee2e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ee30:	4b47      	ldr	r3, [pc, #284]	; (800ef50 <tcp_receive+0xb0c>)
 800ee32:	2200      	movs	r2, #0
 800ee34:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ee36:	4b46      	ldr	r3, [pc, #280]	; (800ef50 <tcp_receive+0xb0c>)
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	899b      	ldrh	r3, [r3, #12]
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fa fb98 	bl	8009574 <lwip_htons>
 800ee44:	4603      	mov	r3, r0
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	f003 0301 	and.w	r3, r3, #1
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f000 80b8 	beq.w	800efc2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ee52:	4b45      	ldr	r3, [pc, #276]	; (800ef68 <tcp_receive+0xb24>)
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	f043 0320 	orr.w	r3, r3, #32
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	4b42      	ldr	r3, [pc, #264]	; (800ef68 <tcp_receive+0xb24>)
 800ee5e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ee60:	e0af      	b.n	800efc2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee66:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	4a36      	ldr	r2, [pc, #216]	; (800ef4c <tcp_receive+0xb08>)
 800ee72:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	891b      	ldrh	r3, [r3, #8]
 800ee78:	461c      	mov	r4, r3
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	899b      	ldrh	r3, [r3, #12]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fa fb76 	bl	8009574 <lwip_htons>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	f003 0303 	and.w	r3, r3, #3
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d001      	beq.n	800ee98 <tcp_receive+0xa54>
 800ee94:	2301      	movs	r3, #1
 800ee96:	e000      	b.n	800ee9a <tcp_receive+0xa56>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	191a      	adds	r2, r3, r4
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea0:	441a      	add	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eeaa:	461c      	mov	r4, r3
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	891b      	ldrh	r3, [r3, #8]
 800eeb0:	461d      	mov	r5, r3
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	899b      	ldrh	r3, [r3, #12]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fa fb5a 	bl	8009574 <lwip_htons>
 800eec0:	4603      	mov	r3, r0
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	f003 0303 	and.w	r3, r3, #3
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <tcp_receive+0xa8c>
 800eecc:	2301      	movs	r3, #1
 800eece:	e000      	b.n	800eed2 <tcp_receive+0xa8e>
 800eed0:	2300      	movs	r3, #0
 800eed2:	442b      	add	r3, r5
 800eed4:	429c      	cmp	r4, r3
 800eed6:	d206      	bcs.n	800eee6 <tcp_receive+0xaa2>
 800eed8:	4b1e      	ldr	r3, [pc, #120]	; (800ef54 <tcp_receive+0xb10>)
 800eeda:	f240 622b 	movw	r2, #1579	; 0x62b
 800eede:	4923      	ldr	r1, [pc, #140]	; (800ef6c <tcp_receive+0xb28>)
 800eee0:	481e      	ldr	r0, [pc, #120]	; (800ef5c <tcp_receive+0xb18>)
 800eee2:	f005 fb73 	bl	80145cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	891b      	ldrh	r3, [r3, #8]
 800eeea:	461c      	mov	r4, r3
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	899b      	ldrh	r3, [r3, #12]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fa fb3d 	bl	8009574 <lwip_htons>
 800eefa:	4603      	mov	r3, r0
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	f003 0303 	and.w	r3, r3, #3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <tcp_receive+0xac6>
 800ef06:	2301      	movs	r3, #1
 800ef08:	e000      	b.n	800ef0c <tcp_receive+0xac8>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	1919      	adds	r1, r3, r4
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef12:	b28b      	uxth	r3, r1
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	b29a      	uxth	r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7fc fe33 	bl	800bb88 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	891b      	ldrh	r3, [r3, #8]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d028      	beq.n	800ef7e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ef2c:	4b0d      	ldr	r3, [pc, #52]	; (800ef64 <tcp_receive+0xb20>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d01d      	beq.n	800ef70 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ef34:	4b0b      	ldr	r3, [pc, #44]	; (800ef64 <tcp_receive+0xb20>)
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4610      	mov	r0, r2
 800ef40:	f7fb ff92 	bl	800ae68 <pbuf_cat>
 800ef44:	e018      	b.n	800ef78 <tcp_receive+0xb34>
 800ef46:	bf00      	nop
 800ef48:	200040c6 	.word	0x200040c6
 800ef4c:	200040bc 	.word	0x200040bc
 800ef50:	2000409c 	.word	0x2000409c
 800ef54:	08017408 	.word	0x08017408
 800ef58:	080177e8 	.word	0x080177e8
 800ef5c:	08017454 	.word	0x08017454
 800ef60:	08017824 	.word	0x08017824
 800ef64:	200040cc 	.word	0x200040cc
 800ef68:	200040c9 	.word	0x200040c9
 800ef6c:	08017844 	.word	0x08017844
            } else {
              recv_data = cseg->p;
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	4a70      	ldr	r2, [pc, #448]	; (800f138 <tcp_receive+0xcf4>)
 800ef76:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	899b      	ldrh	r3, [r3, #12]
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fa faf4 	bl	8009574 <lwip_htons>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	f003 0301 	and.w	r3, r3, #1
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00d      	beq.n	800efb4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ef98:	4b68      	ldr	r3, [pc, #416]	; (800f13c <tcp_receive+0xcf8>)
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	f043 0320 	orr.w	r3, r3, #32
 800efa0:	b2da      	uxtb	r2, r3
 800efa2:	4b66      	ldr	r3, [pc, #408]	; (800f13c <tcp_receive+0xcf8>)
 800efa4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	7d1b      	ldrb	r3, [r3, #20]
 800efaa:	2b04      	cmp	r3, #4
 800efac:	d102      	bne.n	800efb4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2207      	movs	r2, #7
 800efb2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800efbc:	68b8      	ldr	r0, [r7, #8]
 800efbe:	f7fd fb08 	bl	800c5d2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d008      	beq.n	800efdc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	685a      	ldr	r2, [r3, #4]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800efd6:	429a      	cmp	r2, r3
 800efd8:	f43f af43 	beq.w	800ee62 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	8b5b      	ldrh	r3, [r3, #26]
 800efe0:	f003 0301 	and.w	r3, r3, #1
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d00e      	beq.n	800f006 <tcp_receive+0xbc2>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	8b5b      	ldrh	r3, [r3, #26]
 800efec:	f023 0301 	bic.w	r3, r3, #1
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	835a      	strh	r2, [r3, #26]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	8b5b      	ldrh	r3, [r3, #26]
 800effa:	f043 0302 	orr.w	r3, r3, #2
 800effe:	b29a      	uxth	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f004:	e188      	b.n	800f318 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	8b5b      	ldrh	r3, [r3, #26]
 800f00a:	f043 0301 	orr.w	r3, r3, #1
 800f00e:	b29a      	uxth	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f014:	e180      	b.n	800f318 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d106      	bne.n	800f02c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f01e:	4848      	ldr	r0, [pc, #288]	; (800f140 <tcp_receive+0xcfc>)
 800f020:	f7fd faf0 	bl	800c604 <tcp_seg_copy>
 800f024:	4602      	mov	r2, r0
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	675a      	str	r2, [r3, #116]	; 0x74
 800f02a:	e16d      	b.n	800f308 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f02c:	2300      	movs	r3, #0
 800f02e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f034:	63bb      	str	r3, [r7, #56]	; 0x38
 800f036:	e157      	b.n	800f2e8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	685a      	ldr	r2, [r3, #4]
 800f03e:	4b41      	ldr	r3, [pc, #260]	; (800f144 <tcp_receive+0xd00>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	429a      	cmp	r2, r3
 800f044:	d11d      	bne.n	800f082 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f046:	4b3e      	ldr	r3, [pc, #248]	; (800f140 <tcp_receive+0xcfc>)
 800f048:	891a      	ldrh	r2, [r3, #8]
 800f04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04c:	891b      	ldrh	r3, [r3, #8]
 800f04e:	429a      	cmp	r2, r3
 800f050:	f240 814f 	bls.w	800f2f2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f054:	483a      	ldr	r0, [pc, #232]	; (800f140 <tcp_receive+0xcfc>)
 800f056:	f7fd fad5 	bl	800c604 <tcp_seg_copy>
 800f05a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	f000 8149 	beq.w	800f2f6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f066:	2b00      	cmp	r3, #0
 800f068:	d003      	beq.n	800f072 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f06c:	697a      	ldr	r2, [r7, #20]
 800f06e:	601a      	str	r2, [r3, #0]
 800f070:	e002      	b.n	800f078 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f078:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f07a:	6978      	ldr	r0, [r7, #20]
 800f07c:	f7ff f8de 	bl	800e23c <tcp_oos_insert_segment>
                }
                break;
 800f080:	e139      	b.n	800f2f6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f084:	2b00      	cmp	r3, #0
 800f086:	d117      	bne.n	800f0b8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f088:	4b2e      	ldr	r3, [pc, #184]	; (800f144 <tcp_receive+0xd00>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	2b00      	cmp	r3, #0
 800f096:	da57      	bge.n	800f148 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f098:	4829      	ldr	r0, [pc, #164]	; (800f140 <tcp_receive+0xcfc>)
 800f09a:	f7fd fab3 	bl	800c604 <tcp_seg_copy>
 800f09e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f0a0:	69bb      	ldr	r3, [r7, #24]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	f000 8129 	beq.w	800f2fa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	69ba      	ldr	r2, [r7, #24]
 800f0ac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f0ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0b0:	69b8      	ldr	r0, [r7, #24]
 800f0b2:	f7ff f8c3 	bl	800e23c <tcp_oos_insert_segment>
                  }
                  break;
 800f0b6:	e120      	b.n	800f2fa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f0b8:	4b22      	ldr	r3, [pc, #136]	; (800f144 <tcp_receive+0xd00>)
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	3b01      	subs	r3, #1
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	db3e      	blt.n	800f148 <tcp_receive+0xd04>
 800f0ca:	4b1e      	ldr	r3, [pc, #120]	; (800f144 <tcp_receive+0xd00>)
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	dc35      	bgt.n	800f148 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f0dc:	4818      	ldr	r0, [pc, #96]	; (800f140 <tcp_receive+0xcfc>)
 800f0de:	f7fd fa91 	bl	800c604 <tcp_seg_copy>
 800f0e2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	f000 8109 	beq.w	800f2fe <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0f4:	8912      	ldrh	r2, [r2, #8]
 800f0f6:	441a      	add	r2, r3
 800f0f8:	4b12      	ldr	r3, [pc, #72]	; (800f144 <tcp_receive+0xd00>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	dd12      	ble.n	800f128 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f102:	4b10      	ldr	r3, [pc, #64]	; (800f144 <tcp_receive+0xd00>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	b29a      	uxth	r2, r3
 800f108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	b29b      	uxth	r3, r3
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	b29a      	uxth	r2, r3
 800f114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f116:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f11e:	891b      	ldrh	r3, [r3, #8]
 800f120:	4619      	mov	r1, r3
 800f122:	4610      	mov	r0, r2
 800f124:	f7fb fc4c 	bl	800a9c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f12a:	69fa      	ldr	r2, [r7, #28]
 800f12c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f12e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f130:	69f8      	ldr	r0, [r7, #28]
 800f132:	f7ff f883 	bl	800e23c <tcp_oos_insert_segment>
                  }
                  break;
 800f136:	e0e2      	b.n	800f2fe <tcp_receive+0xeba>
 800f138:	200040cc 	.word	0x200040cc
 800f13c:	200040c9 	.word	0x200040c9
 800f140:	2000409c 	.word	0x2000409c
 800f144:	200040bc 	.word	0x200040bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	f040 80c6 	bne.w	800f2e2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f156:	4b80      	ldr	r3, [pc, #512]	; (800f358 <tcp_receive+0xf14>)
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f162:	2b00      	cmp	r3, #0
 800f164:	f340 80bd 	ble.w	800f2e2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	899b      	ldrh	r3, [r3, #12]
 800f16e:	b29b      	uxth	r3, r3
 800f170:	4618      	mov	r0, r3
 800f172:	f7fa f9ff 	bl	8009574 <lwip_htons>
 800f176:	4603      	mov	r3, r0
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	f003 0301 	and.w	r3, r3, #1
 800f17e:	2b00      	cmp	r3, #0
 800f180:	f040 80bf 	bne.w	800f302 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f184:	4875      	ldr	r0, [pc, #468]	; (800f35c <tcp_receive+0xf18>)
 800f186:	f7fd fa3d 	bl	800c604 <tcp_seg_copy>
 800f18a:	4602      	mov	r2, r0
 800f18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	f000 80b6 	beq.w	800f306 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1a2:	8912      	ldrh	r2, [r2, #8]
 800f1a4:	441a      	add	r2, r3
 800f1a6:	4b6c      	ldr	r3, [pc, #432]	; (800f358 <tcp_receive+0xf14>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	dd12      	ble.n	800f1d6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f1b0:	4b69      	ldr	r3, [pc, #420]	; (800f358 <tcp_receive+0xf14>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	1ad3      	subs	r3, r2, r3
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c8:	685a      	ldr	r2, [r3, #4]
 800f1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1cc:	891b      	ldrh	r3, [r3, #8]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	4610      	mov	r0, r2
 800f1d2:	f7fb fbf5 	bl	800a9c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f1d6:	4b62      	ldr	r3, [pc, #392]	; (800f360 <tcp_receive+0xf1c>)
 800f1d8:	881b      	ldrh	r3, [r3, #0]
 800f1da:	461a      	mov	r2, r3
 800f1dc:	4b5e      	ldr	r3, [pc, #376]	; (800f358 <tcp_receive+0xf14>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	441a      	add	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e6:	6879      	ldr	r1, [r7, #4]
 800f1e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f1ea:	440b      	add	r3, r1
 800f1ec:	1ad3      	subs	r3, r2, r3
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f340 8089 	ble.w	800f306 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	899b      	ldrh	r3, [r3, #12]
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fa f9b8 	bl	8009574 <lwip_htons>
 800f204:	4603      	mov	r3, r0
 800f206:	b2db      	uxtb	r3, r3
 800f208:	f003 0301 	and.w	r3, r3, #1
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d022      	beq.n	800f256 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	899b      	ldrh	r3, [r3, #12]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	b21b      	sxth	r3, r3
 800f21c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f220:	b21c      	sxth	r4, r3
 800f222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	899b      	ldrh	r3, [r3, #12]
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fa f9a1 	bl	8009574 <lwip_htons>
 800f232:	4603      	mov	r3, r0
 800f234:	b2db      	uxtb	r3, r3
 800f236:	b29b      	uxth	r3, r3
 800f238:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fa f998 	bl	8009574 <lwip_htons>
 800f244:	4603      	mov	r3, r0
 800f246:	b21b      	sxth	r3, r3
 800f248:	4323      	orrs	r3, r4
 800f24a:	b21a      	sxth	r2, r3
 800f24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	b292      	uxth	r2, r2
 800f254:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25a:	b29a      	uxth	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f260:	4413      	add	r3, r2
 800f262:	b299      	uxth	r1, r3
 800f264:	4b3c      	ldr	r3, [pc, #240]	; (800f358 <tcp_receive+0xf14>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	b29a      	uxth	r2, r3
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	1a8a      	subs	r2, r1, r2
 800f270:	b292      	uxth	r2, r2
 800f272:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	685a      	ldr	r2, [r3, #4]
 800f27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	891b      	ldrh	r3, [r3, #8]
 800f280:	4619      	mov	r1, r3
 800f282:	4610      	mov	r0, r2
 800f284:	f7fb fb9c 	bl	800a9c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	891c      	ldrh	r4, [r3, #8]
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	899b      	ldrh	r3, [r3, #12]
 800f296:	b29b      	uxth	r3, r3
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fa f96b 	bl	8009574 <lwip_htons>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	f003 0303 	and.w	r3, r3, #3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <tcp_receive+0xe6a>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e000      	b.n	800f2b0 <tcp_receive+0xe6c>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	4423      	add	r3, r4
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	4b2a      	ldr	r3, [pc, #168]	; (800f360 <tcp_receive+0xf1c>)
 800f2b6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f2b8:	4b29      	ldr	r3, [pc, #164]	; (800f360 <tcp_receive+0xf1c>)
 800f2ba:	881b      	ldrh	r3, [r3, #0]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	4b26      	ldr	r3, [pc, #152]	; (800f358 <tcp_receive+0xf14>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	441a      	add	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c8:	6879      	ldr	r1, [r7, #4]
 800f2ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f2cc:	440b      	add	r3, r1
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d019      	beq.n	800f306 <tcp_receive+0xec2>
 800f2d2:	4b24      	ldr	r3, [pc, #144]	; (800f364 <tcp_receive+0xf20>)
 800f2d4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f2d8:	4923      	ldr	r1, [pc, #140]	; (800f368 <tcp_receive+0xf24>)
 800f2da:	4824      	ldr	r0, [pc, #144]	; (800f36c <tcp_receive+0xf28>)
 800f2dc:	f005 f976 	bl	80145cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f2e0:	e011      	b.n	800f306 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f47f aea4 	bne.w	800f038 <tcp_receive+0xbf4>
 800f2f0:	e00a      	b.n	800f308 <tcp_receive+0xec4>
                break;
 800f2f2:	bf00      	nop
 800f2f4:	e008      	b.n	800f308 <tcp_receive+0xec4>
                break;
 800f2f6:	bf00      	nop
 800f2f8:	e006      	b.n	800f308 <tcp_receive+0xec4>
                  break;
 800f2fa:	bf00      	nop
 800f2fc:	e004      	b.n	800f308 <tcp_receive+0xec4>
                  break;
 800f2fe:	bf00      	nop
 800f300:	e002      	b.n	800f308 <tcp_receive+0xec4>
                  break;
 800f302:	bf00      	nop
 800f304:	e000      	b.n	800f308 <tcp_receive+0xec4>
                break;
 800f306:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f001 fe8b 	bl	8011024 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f30e:	e003      	b.n	800f318 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f001 fe87 	bl	8011024 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f316:	e01a      	b.n	800f34e <tcp_receive+0xf0a>
 800f318:	e019      	b.n	800f34e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f31a:	4b0f      	ldr	r3, [pc, #60]	; (800f358 <tcp_receive+0xf14>)
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f322:	1ad3      	subs	r3, r2, r3
 800f324:	2b00      	cmp	r3, #0
 800f326:	db0a      	blt.n	800f33e <tcp_receive+0xefa>
 800f328:	4b0b      	ldr	r3, [pc, #44]	; (800f358 <tcp_receive+0xf14>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f330:	6879      	ldr	r1, [r7, #4]
 800f332:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f334:	440b      	add	r3, r1
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	3301      	adds	r3, #1
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	dd07      	ble.n	800f34e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	8b5b      	ldrh	r3, [r3, #26]
 800f342:	f043 0302 	orr.w	r3, r3, #2
 800f346:	b29a      	uxth	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f34c:	e7ff      	b.n	800f34e <tcp_receive+0xf0a>
 800f34e:	bf00      	nop
 800f350:	3750      	adds	r7, #80	; 0x50
 800f352:	46bd      	mov	sp, r7
 800f354:	bdb0      	pop	{r4, r5, r7, pc}
 800f356:	bf00      	nop
 800f358:	200040bc 	.word	0x200040bc
 800f35c:	2000409c 	.word	0x2000409c
 800f360:	200040c6 	.word	0x200040c6
 800f364:	08017408 	.word	0x08017408
 800f368:	080177b0 	.word	0x080177b0
 800f36c:	08017454 	.word	0x08017454

0800f370 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f376:	4b15      	ldr	r3, [pc, #84]	; (800f3cc <tcp_get_next_optbyte+0x5c>)
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	1c5a      	adds	r2, r3, #1
 800f37c:	b291      	uxth	r1, r2
 800f37e:	4a13      	ldr	r2, [pc, #76]	; (800f3cc <tcp_get_next_optbyte+0x5c>)
 800f380:	8011      	strh	r1, [r2, #0]
 800f382:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f384:	4b12      	ldr	r3, [pc, #72]	; (800f3d0 <tcp_get_next_optbyte+0x60>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d004      	beq.n	800f396 <tcp_get_next_optbyte+0x26>
 800f38c:	4b11      	ldr	r3, [pc, #68]	; (800f3d4 <tcp_get_next_optbyte+0x64>)
 800f38e:	881b      	ldrh	r3, [r3, #0]
 800f390:	88fa      	ldrh	r2, [r7, #6]
 800f392:	429a      	cmp	r2, r3
 800f394:	d208      	bcs.n	800f3a8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f396:	4b10      	ldr	r3, [pc, #64]	; (800f3d8 <tcp_get_next_optbyte+0x68>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3314      	adds	r3, #20
 800f39c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f39e:	88fb      	ldrh	r3, [r7, #6]
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	4413      	add	r3, r2
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	e00b      	b.n	800f3c0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f3a8:	88fb      	ldrh	r3, [r7, #6]
 800f3aa:	b2da      	uxtb	r2, r3
 800f3ac:	4b09      	ldr	r3, [pc, #36]	; (800f3d4 <tcp_get_next_optbyte+0x64>)
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f3b6:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <tcp_get_next_optbyte+0x60>)
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	797b      	ldrb	r3, [r7, #5]
 800f3bc:	4413      	add	r3, r2
 800f3be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr
 800f3cc:	200040b8 	.word	0x200040b8
 800f3d0:	200040b4 	.word	0x200040b4
 800f3d4:	200040b2 	.word	0x200040b2
 800f3d8:	200040ac 	.word	0x200040ac

0800f3dc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d106      	bne.n	800f3f8 <tcp_parseopt+0x1c>
 800f3ea:	4b32      	ldr	r3, [pc, #200]	; (800f4b4 <tcp_parseopt+0xd8>)
 800f3ec:	f240 727d 	movw	r2, #1917	; 0x77d
 800f3f0:	4931      	ldr	r1, [pc, #196]	; (800f4b8 <tcp_parseopt+0xdc>)
 800f3f2:	4832      	ldr	r0, [pc, #200]	; (800f4bc <tcp_parseopt+0xe0>)
 800f3f4:	f005 f8ea 	bl	80145cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f3f8:	4b31      	ldr	r3, [pc, #196]	; (800f4c0 <tcp_parseopt+0xe4>)
 800f3fa:	881b      	ldrh	r3, [r3, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d055      	beq.n	800f4ac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f400:	4b30      	ldr	r3, [pc, #192]	; (800f4c4 <tcp_parseopt+0xe8>)
 800f402:	2200      	movs	r2, #0
 800f404:	801a      	strh	r2, [r3, #0]
 800f406:	e045      	b.n	800f494 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f408:	f7ff ffb2 	bl	800f370 <tcp_get_next_optbyte>
 800f40c:	4603      	mov	r3, r0
 800f40e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f410:	7bfb      	ldrb	r3, [r7, #15]
 800f412:	2b02      	cmp	r3, #2
 800f414:	d006      	beq.n	800f424 <tcp_parseopt+0x48>
 800f416:	2b02      	cmp	r3, #2
 800f418:	dc2b      	bgt.n	800f472 <tcp_parseopt+0x96>
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d041      	beq.n	800f4a2 <tcp_parseopt+0xc6>
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d127      	bne.n	800f472 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f422:	e037      	b.n	800f494 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f424:	f7ff ffa4 	bl	800f370 <tcp_get_next_optbyte>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d13b      	bne.n	800f4a6 <tcp_parseopt+0xca>
 800f42e:	4b25      	ldr	r3, [pc, #148]	; (800f4c4 <tcp_parseopt+0xe8>)
 800f430:	881b      	ldrh	r3, [r3, #0]
 800f432:	3301      	adds	r3, #1
 800f434:	4a22      	ldr	r2, [pc, #136]	; (800f4c0 <tcp_parseopt+0xe4>)
 800f436:	8812      	ldrh	r2, [r2, #0]
 800f438:	4293      	cmp	r3, r2
 800f43a:	da34      	bge.n	800f4a6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f43c:	f7ff ff98 	bl	800f370 <tcp_get_next_optbyte>
 800f440:	4603      	mov	r3, r0
 800f442:	b29b      	uxth	r3, r3
 800f444:	021b      	lsls	r3, r3, #8
 800f446:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f448:	f7ff ff92 	bl	800f370 <tcp_get_next_optbyte>
 800f44c:	4603      	mov	r3, r0
 800f44e:	b29a      	uxth	r2, r3
 800f450:	89bb      	ldrh	r3, [r7, #12]
 800f452:	4313      	orrs	r3, r2
 800f454:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f456:	89bb      	ldrh	r3, [r7, #12]
 800f458:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f45c:	d804      	bhi.n	800f468 <tcp_parseopt+0x8c>
 800f45e:	89bb      	ldrh	r3, [r7, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <tcp_parseopt+0x8c>
 800f464:	89ba      	ldrh	r2, [r7, #12]
 800f466:	e001      	b.n	800f46c <tcp_parseopt+0x90>
 800f468:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f470:	e010      	b.n	800f494 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f472:	f7ff ff7d 	bl	800f370 <tcp_get_next_optbyte>
 800f476:	4603      	mov	r3, r0
 800f478:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f47a:	7afb      	ldrb	r3, [r7, #11]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d914      	bls.n	800f4aa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f480:	7afb      	ldrb	r3, [r7, #11]
 800f482:	b29a      	uxth	r2, r3
 800f484:	4b0f      	ldr	r3, [pc, #60]	; (800f4c4 <tcp_parseopt+0xe8>)
 800f486:	881b      	ldrh	r3, [r3, #0]
 800f488:	4413      	add	r3, r2
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	3b02      	subs	r3, #2
 800f48e:	b29a      	uxth	r2, r3
 800f490:	4b0c      	ldr	r3, [pc, #48]	; (800f4c4 <tcp_parseopt+0xe8>)
 800f492:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f494:	4b0b      	ldr	r3, [pc, #44]	; (800f4c4 <tcp_parseopt+0xe8>)
 800f496:	881a      	ldrh	r2, [r3, #0]
 800f498:	4b09      	ldr	r3, [pc, #36]	; (800f4c0 <tcp_parseopt+0xe4>)
 800f49a:	881b      	ldrh	r3, [r3, #0]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d3b3      	bcc.n	800f408 <tcp_parseopt+0x2c>
 800f4a0:	e004      	b.n	800f4ac <tcp_parseopt+0xd0>
          return;
 800f4a2:	bf00      	nop
 800f4a4:	e002      	b.n	800f4ac <tcp_parseopt+0xd0>
            return;
 800f4a6:	bf00      	nop
 800f4a8:	e000      	b.n	800f4ac <tcp_parseopt+0xd0>
            return;
 800f4aa:	bf00      	nop
      }
    }
  }
}
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	08017408 	.word	0x08017408
 800f4b8:	0801786c 	.word	0x0801786c
 800f4bc:	08017454 	.word	0x08017454
 800f4c0:	200040b0 	.word	0x200040b0
 800f4c4:	200040b8 	.word	0x200040b8

0800f4c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f4cc:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <tcp_trigger_input_pcb_close+0x1c>)
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	f043 0310 	orr.w	r3, r3, #16
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	4b03      	ldr	r3, [pc, #12]	; (800f4e4 <tcp_trigger_input_pcb_close+0x1c>)
 800f4d8:	701a      	strb	r2, [r3, #0]
}
 800f4da:	bf00      	nop
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr
 800f4e4:	200040c9 	.word	0x200040c9

0800f4e8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d00a      	beq.n	800f510 <tcp_route+0x28>
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	7a1b      	ldrb	r3, [r3, #8]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d006      	beq.n	800f510 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	7a1b      	ldrb	r3, [r3, #8]
 800f506:	4618      	mov	r0, r3
 800f508:	f7fb f852 	bl	800a5b0 <netif_get_by_index>
 800f50c:	4603      	mov	r3, r0
 800f50e:	e003      	b.n	800f518 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f003 fc4b 	bl	8012dac <ip4_route>
 800f516:	4603      	mov	r3, r0
  }
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f520:	b590      	push	{r4, r7, lr}
 800f522:	b087      	sub	sp, #28
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	603b      	str	r3, [r7, #0]
 800f52c:	4613      	mov	r3, r2
 800f52e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d105      	bne.n	800f542 <tcp_create_segment+0x22>
 800f536:	4b44      	ldr	r3, [pc, #272]	; (800f648 <tcp_create_segment+0x128>)
 800f538:	22a3      	movs	r2, #163	; 0xa3
 800f53a:	4944      	ldr	r1, [pc, #272]	; (800f64c <tcp_create_segment+0x12c>)
 800f53c:	4844      	ldr	r0, [pc, #272]	; (800f650 <tcp_create_segment+0x130>)
 800f53e:	f005 f845 	bl	80145cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d105      	bne.n	800f554 <tcp_create_segment+0x34>
 800f548:	4b3f      	ldr	r3, [pc, #252]	; (800f648 <tcp_create_segment+0x128>)
 800f54a:	22a4      	movs	r2, #164	; 0xa4
 800f54c:	4941      	ldr	r1, [pc, #260]	; (800f654 <tcp_create_segment+0x134>)
 800f54e:	4840      	ldr	r0, [pc, #256]	; (800f650 <tcp_create_segment+0x130>)
 800f550:	f005 f83c 	bl	80145cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f554:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	f003 0304 	and.w	r3, r3, #4
 800f560:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f562:	2003      	movs	r0, #3
 800f564:	f7fa fcbc 	bl	8009ee0 <memp_malloc>
 800f568:	6138      	str	r0, [r7, #16]
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d104      	bne.n	800f57a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f570:	68b8      	ldr	r0, [r7, #8]
 800f572:	f7fb fbab 	bl	800accc <pbuf_free>
    return NULL;
 800f576:	2300      	movs	r3, #0
 800f578:	e061      	b.n	800f63e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f580:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	2200      	movs	r2, #0
 800f586:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	891a      	ldrh	r2, [r3, #8]
 800f592:	7dfb      	ldrb	r3, [r7, #23]
 800f594:	b29b      	uxth	r3, r3
 800f596:	429a      	cmp	r2, r3
 800f598:	d205      	bcs.n	800f5a6 <tcp_create_segment+0x86>
 800f59a:	4b2b      	ldr	r3, [pc, #172]	; (800f648 <tcp_create_segment+0x128>)
 800f59c:	22b0      	movs	r2, #176	; 0xb0
 800f59e:	492e      	ldr	r1, [pc, #184]	; (800f658 <tcp_create_segment+0x138>)
 800f5a0:	482b      	ldr	r0, [pc, #172]	; (800f650 <tcp_create_segment+0x130>)
 800f5a2:	f005 f813 	bl	80145cc <iprintf>
  seg->len = p->tot_len - optlen;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	891a      	ldrh	r2, [r3, #8]
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	1ad3      	subs	r3, r2, r3
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f5b6:	2114      	movs	r1, #20
 800f5b8:	68b8      	ldr	r0, [r7, #8]
 800f5ba:	f7fb faf1 	bl	800aba0 <pbuf_add_header>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d004      	beq.n	800f5ce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f5c4:	6938      	ldr	r0, [r7, #16]
 800f5c6:	f7fd f804 	bl	800c5d2 <tcp_seg_free>
    return NULL;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	e037      	b.n	800f63e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	685a      	ldr	r2, [r3, #4]
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	8ada      	ldrh	r2, [r3, #22]
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	68dc      	ldr	r4, [r3, #12]
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	f7f9 ffc7 	bl	8009574 <lwip_htons>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	8b1a      	ldrh	r2, [r3, #24]
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	68dc      	ldr	r4, [r3, #12]
 800f5f2:	4610      	mov	r0, r2
 800f5f4:	f7f9 ffbe 	bl	8009574 <lwip_htons>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	68dc      	ldr	r4, [r3, #12]
 800f600:	6838      	ldr	r0, [r7, #0]
 800f602:	f7f9 ffcc 	bl	800959e <lwip_htonl>
 800f606:	4603      	mov	r3, r0
 800f608:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f60a:	7dfb      	ldrb	r3, [r7, #23]
 800f60c:	089b      	lsrs	r3, r3, #2
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	b29b      	uxth	r3, r3
 800f612:	3305      	adds	r3, #5
 800f614:	b29b      	uxth	r3, r3
 800f616:	031b      	lsls	r3, r3, #12
 800f618:	b29a      	uxth	r2, r3
 800f61a:	79fb      	ldrb	r3, [r7, #7]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	4313      	orrs	r3, r2
 800f620:	b29a      	uxth	r2, r3
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	68dc      	ldr	r4, [r3, #12]
 800f626:	4610      	mov	r0, r2
 800f628:	f7f9 ffa4 	bl	8009574 <lwip_htons>
 800f62c:	4603      	mov	r3, r0
 800f62e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	749a      	strb	r2, [r3, #18]
 800f638:	2200      	movs	r2, #0
 800f63a:	74da      	strb	r2, [r3, #19]
  return seg;
 800f63c:	693b      	ldr	r3, [r7, #16]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	371c      	adds	r7, #28
 800f642:	46bd      	mov	sp, r7
 800f644:	bd90      	pop	{r4, r7, pc}
 800f646:	bf00      	nop
 800f648:	08017888 	.word	0x08017888
 800f64c:	080178bc 	.word	0x080178bc
 800f650:	080178dc 	.word	0x080178dc
 800f654:	08017904 	.word	0x08017904
 800f658:	08017928 	.word	0x08017928

0800f65c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
 800f662:	607b      	str	r3, [r7, #4]
 800f664:	4603      	mov	r3, r0
 800f666:	73fb      	strb	r3, [r7, #15]
 800f668:	460b      	mov	r3, r1
 800f66a:	81bb      	strh	r3, [r7, #12]
 800f66c:	4613      	mov	r3, r2
 800f66e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f670:	89bb      	ldrh	r3, [r7, #12]
 800f672:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d105      	bne.n	800f686 <tcp_pbuf_prealloc+0x2a>
 800f67a:	4b30      	ldr	r3, [pc, #192]	; (800f73c <tcp_pbuf_prealloc+0xe0>)
 800f67c:	22e8      	movs	r2, #232	; 0xe8
 800f67e:	4930      	ldr	r1, [pc, #192]	; (800f740 <tcp_pbuf_prealloc+0xe4>)
 800f680:	4830      	ldr	r0, [pc, #192]	; (800f744 <tcp_pbuf_prealloc+0xe8>)
 800f682:	f004 ffa3 	bl	80145cc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f686:	6a3b      	ldr	r3, [r7, #32]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d105      	bne.n	800f698 <tcp_pbuf_prealloc+0x3c>
 800f68c:	4b2b      	ldr	r3, [pc, #172]	; (800f73c <tcp_pbuf_prealloc+0xe0>)
 800f68e:	22e9      	movs	r2, #233	; 0xe9
 800f690:	492d      	ldr	r1, [pc, #180]	; (800f748 <tcp_pbuf_prealloc+0xec>)
 800f692:	482c      	ldr	r0, [pc, #176]	; (800f744 <tcp_pbuf_prealloc+0xe8>)
 800f694:	f004 ff9a 	bl	80145cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f698:	89ba      	ldrh	r2, [r7, #12]
 800f69a:	897b      	ldrh	r3, [r7, #10]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d221      	bcs.n	800f6e4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f6a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f6a4:	f003 0302 	and.w	r3, r3, #2
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d111      	bne.n	800f6d0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800f6ac:	6a3b      	ldr	r3, [r7, #32]
 800f6ae:	8b5b      	ldrh	r3, [r3, #26]
 800f6b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d115      	bne.n	800f6e4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800f6b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d007      	beq.n	800f6d0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f6c0:	6a3b      	ldr	r3, [r7, #32]
 800f6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d103      	bne.n	800f6d0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800f6c8:	6a3b      	ldr	r3, [r7, #32]
 800f6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d009      	beq.n	800f6e4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f6d0:	89bb      	ldrh	r3, [r7, #12]
 800f6d2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f6d6:	f023 0203 	bic.w	r2, r3, #3
 800f6da:	897b      	ldrh	r3, [r7, #10]
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	bf28      	it	cs
 800f6e0:	4613      	movcs	r3, r2
 800f6e2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f6e4:	8af9      	ldrh	r1, [r7, #22]
 800f6e6:	7bfb      	ldrb	r3, [r7, #15]
 800f6e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fb f809 	bl	800a704 <pbuf_alloc>
 800f6f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d101      	bne.n	800f6fe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	e019      	b.n	800f732 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d006      	beq.n	800f714 <tcp_pbuf_prealloc+0xb8>
 800f706:	4b0d      	ldr	r3, [pc, #52]	; (800f73c <tcp_pbuf_prealloc+0xe0>)
 800f708:	f240 120b 	movw	r2, #267	; 0x10b
 800f70c:	490f      	ldr	r1, [pc, #60]	; (800f74c <tcp_pbuf_prealloc+0xf0>)
 800f70e:	480d      	ldr	r0, [pc, #52]	; (800f744 <tcp_pbuf_prealloc+0xe8>)
 800f710:	f004 ff5c 	bl	80145cc <iprintf>
  *oversize = p->len - length;
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	895a      	ldrh	r2, [r3, #10]
 800f718:	89bb      	ldrh	r3, [r7, #12]
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	89ba      	ldrh	r2, [r7, #12]
 800f726:	811a      	strh	r2, [r3, #8]
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	891a      	ldrh	r2, [r3, #8]
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	815a      	strh	r2, [r3, #10]
  return p;
 800f730:	693b      	ldr	r3, [r7, #16]
}
 800f732:	4618      	mov	r0, r3
 800f734:	3718      	adds	r7, #24
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	08017888 	.word	0x08017888
 800f740:	08017940 	.word	0x08017940
 800f744:	080178dc 	.word	0x080178dc
 800f748:	08017964 	.word	0x08017964
 800f74c:	08017984 	.word	0x08017984

0800f750 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	460b      	mov	r3, r1
 800f75a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d106      	bne.n	800f770 <tcp_write_checks+0x20>
 800f762:	4b33      	ldr	r3, [pc, #204]	; (800f830 <tcp_write_checks+0xe0>)
 800f764:	f240 1233 	movw	r2, #307	; 0x133
 800f768:	4932      	ldr	r1, [pc, #200]	; (800f834 <tcp_write_checks+0xe4>)
 800f76a:	4833      	ldr	r0, [pc, #204]	; (800f838 <tcp_write_checks+0xe8>)
 800f76c:	f004 ff2e 	bl	80145cc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	7d1b      	ldrb	r3, [r3, #20]
 800f774:	2b04      	cmp	r3, #4
 800f776:	d00e      	beq.n	800f796 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f77c:	2b07      	cmp	r3, #7
 800f77e:	d00a      	beq.n	800f796 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f784:	2b02      	cmp	r3, #2
 800f786:	d006      	beq.n	800f796 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f78c:	2b03      	cmp	r3, #3
 800f78e:	d002      	beq.n	800f796 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f790:	f06f 030a 	mvn.w	r3, #10
 800f794:	e048      	b.n	800f828 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800f796:	887b      	ldrh	r3, [r7, #2]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d101      	bne.n	800f7a0 <tcp_write_checks+0x50>
    return ERR_OK;
 800f79c:	2300      	movs	r3, #0
 800f79e:	e043      	b.n	800f828 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f7a6:	887a      	ldrh	r2, [r7, #2]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d909      	bls.n	800f7c0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	8b5b      	ldrh	r3, [r3, #26]
 800f7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f7be:	e033      	b.n	800f828 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f7c6:	2b08      	cmp	r3, #8
 800f7c8:	d909      	bls.n	800f7de <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	8b5b      	ldrh	r3, [r3, #26]
 800f7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7dc:	e024      	b.n	800f828 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00f      	beq.n	800f808 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d11a      	bne.n	800f826 <tcp_write_checks+0xd6>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d116      	bne.n	800f826 <tcp_write_checks+0xd6>
 800f7f8:	4b0d      	ldr	r3, [pc, #52]	; (800f830 <tcp_write_checks+0xe0>)
 800f7fa:	f240 1255 	movw	r2, #341	; 0x155
 800f7fe:	490f      	ldr	r1, [pc, #60]	; (800f83c <tcp_write_checks+0xec>)
 800f800:	480d      	ldr	r0, [pc, #52]	; (800f838 <tcp_write_checks+0xe8>)
 800f802:	f004 fee3 	bl	80145cc <iprintf>
 800f806:	e00e      	b.n	800f826 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d103      	bne.n	800f818 <tcp_write_checks+0xc8>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f814:	2b00      	cmp	r3, #0
 800f816:	d006      	beq.n	800f826 <tcp_write_checks+0xd6>
 800f818:	4b05      	ldr	r3, [pc, #20]	; (800f830 <tcp_write_checks+0xe0>)
 800f81a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800f81e:	4908      	ldr	r1, [pc, #32]	; (800f840 <tcp_write_checks+0xf0>)
 800f820:	4805      	ldr	r0, [pc, #20]	; (800f838 <tcp_write_checks+0xe8>)
 800f822:	f004 fed3 	bl	80145cc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800f826:	2300      	movs	r3, #0
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	08017888 	.word	0x08017888
 800f834:	08017998 	.word	0x08017998
 800f838:	080178dc 	.word	0x080178dc
 800f83c:	080179b8 	.word	0x080179b8
 800f840:	080179f4 	.word	0x080179f4

0800f844 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800f844:	b590      	push	{r4, r7, lr}
 800f846:	b09b      	sub	sp, #108	; 0x6c
 800f848:	af04      	add	r7, sp, #16
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	4611      	mov	r1, r2
 800f850:	461a      	mov	r2, r3
 800f852:	460b      	mov	r3, r1
 800f854:	80fb      	strh	r3, [r7, #6]
 800f856:	4613      	mov	r3, r2
 800f858:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800f85a:	2300      	movs	r3, #0
 800f85c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f85e:	2300      	movs	r3, #0
 800f860:	653b      	str	r3, [r7, #80]	; 0x50
 800f862:	2300      	movs	r3, #0
 800f864:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f866:	2300      	movs	r3, #0
 800f868:	64bb      	str	r3, [r7, #72]	; 0x48
 800f86a:	2300      	movs	r3, #0
 800f86c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800f86e:	2300      	movs	r3, #0
 800f870:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800f882:	2300      	movs	r3, #0
 800f884:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d109      	bne.n	800f8a0 <tcp_write+0x5c>
 800f88c:	4ba4      	ldr	r3, [pc, #656]	; (800fb20 <tcp_write+0x2dc>)
 800f88e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f892:	49a4      	ldr	r1, [pc, #656]	; (800fb24 <tcp_write+0x2e0>)
 800f894:	48a4      	ldr	r0, [pc, #656]	; (800fb28 <tcp_write+0x2e4>)
 800f896:	f004 fe99 	bl	80145cc <iprintf>
 800f89a:	f06f 030f 	mvn.w	r3, #15
 800f89e:	e32a      	b.n	800fef6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8a6:	085b      	lsrs	r3, r3, #1
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	bf28      	it	cs
 800f8b2:	4613      	movcs	r3, r2
 800f8b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800f8b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d102      	bne.n	800f8c2 <tcp_write+0x7e>
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8c0:	e000      	b.n	800f8c4 <tcp_write+0x80>
 800f8c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d109      	bne.n	800f8e0 <tcp_write+0x9c>
 800f8cc:	4b94      	ldr	r3, [pc, #592]	; (800fb20 <tcp_write+0x2dc>)
 800f8ce:	f240 12ad 	movw	r2, #429	; 0x1ad
 800f8d2:	4996      	ldr	r1, [pc, #600]	; (800fb2c <tcp_write+0x2e8>)
 800f8d4:	4894      	ldr	r0, [pc, #592]	; (800fb28 <tcp_write+0x2e4>)
 800f8d6:	f004 fe79 	bl	80145cc <iprintf>
 800f8da:	f06f 030f 	mvn.w	r3, #15
 800f8de:	e30a      	b.n	800fef6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f8e0:	88fb      	ldrh	r3, [r7, #6]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f7ff ff33 	bl	800f750 <tcp_write_checks>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f8f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <tcp_write+0xba>
    return err;
 800f8f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f8fc:	e2fb      	b.n	800fef6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f904:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f908:	2300      	movs	r3, #0
 800f90a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f912:	2b00      	cmp	r3, #0
 800f914:	f000 80f6 	beq.w	800fb04 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f91c:	653b      	str	r3, [r7, #80]	; 0x50
 800f91e:	e002      	b.n	800f926 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800f920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d1f8      	bne.n	800f920 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f930:	7a9b      	ldrb	r3, [r3, #10]
 800f932:	009b      	lsls	r3, r3, #2
 800f934:	b29b      	uxth	r3, r3
 800f936:	f003 0304 	and.w	r3, r3, #4
 800f93a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f93c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f93e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f940:	891b      	ldrh	r3, [r3, #8]
 800f942:	4619      	mov	r1, r3
 800f944:	8c3b      	ldrh	r3, [r7, #32]
 800f946:	440b      	add	r3, r1
 800f948:	429a      	cmp	r2, r3
 800f94a:	da06      	bge.n	800f95a <tcp_write+0x116>
 800f94c:	4b74      	ldr	r3, [pc, #464]	; (800fb20 <tcp_write+0x2dc>)
 800f94e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f952:	4977      	ldr	r1, [pc, #476]	; (800fb30 <tcp_write+0x2ec>)
 800f954:	4874      	ldr	r0, [pc, #464]	; (800fb28 <tcp_write+0x2e4>)
 800f956:	f004 fe39 	bl	80145cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f95a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f95c:	891a      	ldrh	r2, [r3, #8]
 800f95e:	8c3b      	ldrh	r3, [r7, #32]
 800f960:	4413      	add	r3, r2
 800f962:	b29b      	uxth	r3, r3
 800f964:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f966:	1ad3      	subs	r3, r2, r3
 800f968:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f970:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800f972:	8a7b      	ldrh	r3, [r7, #18]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d026      	beq.n	800f9c6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f978:	8a7b      	ldrh	r3, [r7, #18]
 800f97a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d206      	bcs.n	800f98e <tcp_write+0x14a>
 800f980:	4b67      	ldr	r3, [pc, #412]	; (800fb20 <tcp_write+0x2dc>)
 800f982:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f986:	496b      	ldr	r1, [pc, #428]	; (800fb34 <tcp_write+0x2f0>)
 800f988:	4867      	ldr	r0, [pc, #412]	; (800fb28 <tcp_write+0x2e4>)
 800f98a:	f004 fe1f 	bl	80145cc <iprintf>
      seg = last_unsent;
 800f98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f990:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f992:	8a7b      	ldrh	r3, [r7, #18]
 800f994:	88fa      	ldrh	r2, [r7, #6]
 800f996:	4293      	cmp	r3, r2
 800f998:	bf28      	it	cs
 800f99a:	4613      	movcs	r3, r2
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	bf28      	it	cs
 800f9a4:	4613      	movcs	r3, r2
 800f9a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800f9a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800f9b4:	8a7a      	ldrh	r2, [r7, #18]
 800f9b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9b8:	1ad3      	subs	r3, r2, r3
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800f9be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f9c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f9c6:	8a7b      	ldrh	r3, [r7, #18]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00b      	beq.n	800f9e4 <tcp_write+0x1a0>
 800f9cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9d0:	88fb      	ldrh	r3, [r7, #6]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d006      	beq.n	800f9e4 <tcp_write+0x1a0>
 800f9d6:	4b52      	ldr	r3, [pc, #328]	; (800fb20 <tcp_write+0x2dc>)
 800f9d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9dc:	4956      	ldr	r1, [pc, #344]	; (800fb38 <tcp_write+0x2f4>)
 800f9de:	4852      	ldr	r0, [pc, #328]	; (800fb28 <tcp_write+0x2e4>)
 800f9e0:	f004 fdf4 	bl	80145cc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f9e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f9e8:	88fb      	ldrh	r3, [r7, #6]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	f080 8167 	bcs.w	800fcbe <tcp_write+0x47a>
 800f9f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f000 8163 	beq.w	800fcbe <tcp_write+0x47a>
 800f9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9fa:	891b      	ldrh	r3, [r3, #8]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f000 815e 	beq.w	800fcbe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800fa02:	88fa      	ldrh	r2, [r7, #6]
 800fa04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa08:	1ad2      	subs	r2, r2, r3
 800fa0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	bfa8      	it	ge
 800fa10:	4613      	movge	r3, r2
 800fa12:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800fa14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa16:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fa18:	797b      	ldrb	r3, [r7, #5]
 800fa1a:	f003 0301 	and.w	r3, r3, #1
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d027      	beq.n	800fa72 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800fa22:	f107 0012 	add.w	r0, r7, #18
 800fa26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa28:	8bf9      	ldrh	r1, [r7, #30]
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	9302      	str	r3, [sp, #8]
 800fa2e:	797b      	ldrb	r3, [r7, #5]
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	4603      	mov	r3, r0
 800fa38:	2000      	movs	r0, #0
 800fa3a:	f7ff fe0f 	bl	800f65c <tcp_pbuf_prealloc>
 800fa3e:	6578      	str	r0, [r7, #84]	; 0x54
 800fa40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 8225 	beq.w	800fe92 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800fa48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa4a:	6858      	ldr	r0, [r3, #4]
 800fa4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa50:	68ba      	ldr	r2, [r7, #8]
 800fa52:	4413      	add	r3, r2
 800fa54:	8bfa      	ldrh	r2, [r7, #30]
 800fa56:	4619      	mov	r1, r3
 800fa58:	f004 fda2 	bl	80145a0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800fa5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fa5e:	f7fb f9c3 	bl	800ade8 <pbuf_clen>
 800fa62:	4603      	mov	r3, r0
 800fa64:	461a      	mov	r2, r3
 800fa66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fa6a:	4413      	add	r3, r2
 800fa6c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fa70:	e041      	b.n	800faf6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800fa72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	637b      	str	r3, [r7, #52]	; 0x34
 800fa78:	e002      	b.n	800fa80 <tcp_write+0x23c>
 800fa7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d1f8      	bne.n	800fa7a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8a:	7b1b      	ldrb	r3, [r3, #12]
 800fa8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d115      	bne.n	800fac0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800fa94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa9a:	8952      	ldrh	r2, [r2, #10]
 800fa9c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d10d      	bne.n	800fac0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800faa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d006      	beq.n	800faba <tcp_write+0x276>
 800faac:	4b1c      	ldr	r3, [pc, #112]	; (800fb20 <tcp_write+0x2dc>)
 800faae:	f240 2231 	movw	r2, #561	; 0x231
 800fab2:	4922      	ldr	r1, [pc, #136]	; (800fb3c <tcp_write+0x2f8>)
 800fab4:	481c      	ldr	r0, [pc, #112]	; (800fb28 <tcp_write+0x2e4>)
 800fab6:	f004 fd89 	bl	80145cc <iprintf>
          extendlen = seglen;
 800faba:	8bfb      	ldrh	r3, [r7, #30]
 800fabc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fabe:	e01a      	b.n	800faf6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800fac0:	8bfb      	ldrh	r3, [r7, #30]
 800fac2:	2201      	movs	r2, #1
 800fac4:	4619      	mov	r1, r3
 800fac6:	2000      	movs	r0, #0
 800fac8:	f7fa fe1c 	bl	800a704 <pbuf_alloc>
 800facc:	6578      	str	r0, [r7, #84]	; 0x54
 800face:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	f000 81e0 	beq.w	800fe96 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800fad6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	441a      	add	r2, r3
 800fade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fae0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800fae2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fae4:	f7fb f980 	bl	800ade8 <pbuf_clen>
 800fae8:	4603      	mov	r3, r0
 800faea:	461a      	mov	r2, r3
 800faec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800faf0:	4413      	add	r3, r2
 800faf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800faf6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fafa:	8bfb      	ldrh	r3, [r7, #30]
 800fafc:	4413      	add	r3, r2
 800fafe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800fb02:	e0dc      	b.n	800fcbe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f000 80d7 	beq.w	800fcbe <tcp_write+0x47a>
 800fb10:	4b03      	ldr	r3, [pc, #12]	; (800fb20 <tcp_write+0x2dc>)
 800fb12:	f240 224a 	movw	r2, #586	; 0x24a
 800fb16:	490a      	ldr	r1, [pc, #40]	; (800fb40 <tcp_write+0x2fc>)
 800fb18:	4803      	ldr	r0, [pc, #12]	; (800fb28 <tcp_write+0x2e4>)
 800fb1a:	f004 fd57 	bl	80145cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800fb1e:	e0ce      	b.n	800fcbe <tcp_write+0x47a>
 800fb20:	08017888 	.word	0x08017888
 800fb24:	08017a28 	.word	0x08017a28
 800fb28:	080178dc 	.word	0x080178dc
 800fb2c:	08017a40 	.word	0x08017a40
 800fb30:	08017a74 	.word	0x08017a74
 800fb34:	08017a8c 	.word	0x08017a8c
 800fb38:	08017aac 	.word	0x08017aac
 800fb3c:	08017acc 	.word	0x08017acc
 800fb40:	08017af8 	.word	0x08017af8
    struct pbuf *p;
    u16_t left = len - pos;
 800fb44:	88fa      	ldrh	r2, [r7, #6]
 800fb46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800fb4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800fb5a:	8b7a      	ldrh	r2, [r7, #26]
 800fb5c:	8bbb      	ldrh	r3, [r7, #28]
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	bf28      	it	cs
 800fb62:	4613      	movcs	r3, r2
 800fb64:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fb66:	797b      	ldrb	r3, [r7, #5]
 800fb68:	f003 0301 	and.w	r3, r3, #1
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d036      	beq.n	800fbde <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800fb70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	8b3b      	ldrh	r3, [r7, #24]
 800fb78:	4413      	add	r3, r2
 800fb7a:	b299      	uxth	r1, r3
 800fb7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	bf0c      	ite	eq
 800fb82:	2301      	moveq	r3, #1
 800fb84:	2300      	movne	r3, #0
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	f107 0012 	add.w	r0, r7, #18
 800fb8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb8e:	9302      	str	r3, [sp, #8]
 800fb90:	797b      	ldrb	r3, [r7, #5]
 800fb92:	9301      	str	r3, [sp, #4]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2036      	movs	r0, #54	; 0x36
 800fb9c:	f7ff fd5e 	bl	800f65c <tcp_pbuf_prealloc>
 800fba0:	6338      	str	r0, [r7, #48]	; 0x30
 800fba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 8178 	beq.w	800fe9a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbac:	895b      	ldrh	r3, [r3, #10]
 800fbae:	8b3a      	ldrh	r2, [r7, #24]
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d906      	bls.n	800fbc2 <tcp_write+0x37e>
 800fbb4:	4b8c      	ldr	r3, [pc, #560]	; (800fde8 <tcp_write+0x5a4>)
 800fbb6:	f240 2266 	movw	r2, #614	; 0x266
 800fbba:	498c      	ldr	r1, [pc, #560]	; (800fdec <tcp_write+0x5a8>)
 800fbbc:	488c      	ldr	r0, [pc, #560]	; (800fdf0 <tcp_write+0x5ac>)
 800fbbe:	f004 fd05 	bl	80145cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800fbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc4:	685a      	ldr	r2, [r3, #4]
 800fbc6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fbca:	18d0      	adds	r0, r2, r3
 800fbcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fbd0:	68ba      	ldr	r2, [r7, #8]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	8b3a      	ldrh	r2, [r7, #24]
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	f004 fce2 	bl	80145a0 <memcpy>
 800fbdc:	e02f      	b.n	800fc3e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fbde:	8a7b      	ldrh	r3, [r7, #18]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d006      	beq.n	800fbf2 <tcp_write+0x3ae>
 800fbe4:	4b80      	ldr	r3, [pc, #512]	; (800fde8 <tcp_write+0x5a4>)
 800fbe6:	f240 2271 	movw	r2, #625	; 0x271
 800fbea:	4982      	ldr	r1, [pc, #520]	; (800fdf4 <tcp_write+0x5b0>)
 800fbec:	4880      	ldr	r0, [pc, #512]	; (800fdf0 <tcp_write+0x5ac>)
 800fbee:	f004 fced 	bl	80145cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800fbf2:	8b3b      	ldrh	r3, [r7, #24]
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	2036      	movs	r0, #54	; 0x36
 800fbfa:	f7fa fd83 	bl	800a704 <pbuf_alloc>
 800fbfe:	6178      	str	r0, [r7, #20]
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f000 814b 	beq.w	800fe9e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800fc08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	441a      	add	r2, r3
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fc14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc1e:	4619      	mov	r1, r3
 800fc20:	2036      	movs	r0, #54	; 0x36
 800fc22:	f7fa fd6f 	bl	800a704 <pbuf_alloc>
 800fc26:	6338      	str	r0, [r7, #48]	; 0x30
 800fc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d103      	bne.n	800fc36 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800fc2e:	6978      	ldr	r0, [r7, #20]
 800fc30:	f7fb f84c 	bl	800accc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800fc34:	e136      	b.n	800fea4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800fc36:	6979      	ldr	r1, [r7, #20]
 800fc38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc3a:	f7fb f915 	bl	800ae68 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800fc3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc40:	f7fb f8d2 	bl	800ade8 <pbuf_clen>
 800fc44:	4603      	mov	r3, r0
 800fc46:	461a      	mov	r2, r3
 800fc48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fc4c:	4413      	add	r3, r2
 800fc4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fc52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fc56:	2b09      	cmp	r3, #9
 800fc58:	d903      	bls.n	800fc62 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800fc5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc5c:	f7fb f836 	bl	800accc <pbuf_free>
      goto memerr;
 800fc60:	e120      	b.n	800fea4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc6a:	441a      	add	r2, r3
 800fc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	4613      	mov	r3, r2
 800fc74:	2200      	movs	r2, #0
 800fc76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f7ff fc51 	bl	800f520 <tcp_create_segment>
 800fc7e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 810d 	beq.w	800fea2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800fc88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d102      	bne.n	800fc94 <tcp_write+0x450>
      queue = seg;
 800fc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc90:	647b      	str	r3, [r7, #68]	; 0x44
 800fc92:	e00c      	b.n	800fcae <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d106      	bne.n	800fca8 <tcp_write+0x464>
 800fc9a:	4b53      	ldr	r3, [pc, #332]	; (800fde8 <tcp_write+0x5a4>)
 800fc9c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fca0:	4955      	ldr	r1, [pc, #340]	; (800fdf8 <tcp_write+0x5b4>)
 800fca2:	4853      	ldr	r0, [pc, #332]	; (800fdf0 <tcp_write+0x5ac>)
 800fca4:	f004 fc92 	bl	80145cc <iprintf>
      prev_seg->next = seg;
 800fca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800fcae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800fcb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fcb6:	8b3b      	ldrh	r3, [r7, #24]
 800fcb8:	4413      	add	r3, r2
 800fcba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800fcbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fcc2:	88fb      	ldrh	r3, [r7, #6]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	f4ff af3d 	bcc.w	800fb44 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800fcca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d02c      	beq.n	800fd2a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800fcd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcd6:	e01e      	b.n	800fd16 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800fcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcda:	891a      	ldrh	r2, [r3, #8]
 800fcdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fcde:	4413      	add	r3, r2
 800fce0:	b29a      	uxth	r2, r3
 800fce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800fce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d110      	bne.n	800fd10 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800fcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcf4:	8952      	ldrh	r2, [r2, #10]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fcfa:	68b9      	ldr	r1, [r7, #8]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f004 fc4f 	bl	80145a0 <memcpy>
        p->len += oversize_used;
 800fd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd04:	895a      	ldrh	r2, [r3, #10]
 800fd06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd08:	4413      	add	r3, r2
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800fd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1dd      	bne.n	800fcd8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800fd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd1e:	891a      	ldrh	r2, [r3, #8]
 800fd20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd22:	4413      	add	r3, r2
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd28:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800fd2a:	8a7a      	ldrh	r2, [r7, #18]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800fd32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d018      	beq.n	800fd6a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800fd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d106      	bne.n	800fd4c <tcp_write+0x508>
 800fd3e:	4b2a      	ldr	r3, [pc, #168]	; (800fde8 <tcp_write+0x5a4>)
 800fd40:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800fd44:	492d      	ldr	r1, [pc, #180]	; (800fdfc <tcp_write+0x5b8>)
 800fd46:	482a      	ldr	r0, [pc, #168]	; (800fdf0 <tcp_write+0x5ac>)
 800fd48:	f004 fc40 	bl	80145cc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800fd4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fb f888 	bl	800ae68 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800fd58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd5a:	891a      	ldrh	r2, [r3, #8]
 800fd5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd5e:	891b      	ldrh	r3, [r3, #8]
 800fd60:	4413      	add	r3, r2
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd66:	811a      	strh	r2, [r3, #8]
 800fd68:	e037      	b.n	800fdda <tcp_write+0x596>
  } else if (extendlen > 0) {
 800fd6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d034      	beq.n	800fdda <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fd70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d003      	beq.n	800fd7e <tcp_write+0x53a>
 800fd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d106      	bne.n	800fd8c <tcp_write+0x548>
 800fd7e:	4b1a      	ldr	r3, [pc, #104]	; (800fde8 <tcp_write+0x5a4>)
 800fd80:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fd84:	491e      	ldr	r1, [pc, #120]	; (800fe00 <tcp_write+0x5bc>)
 800fd86:	481a      	ldr	r0, [pc, #104]	; (800fdf0 <tcp_write+0x5ac>)
 800fd88:	f004 fc20 	bl	80145cc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fd8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd92:	e009      	b.n	800fda8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd96:	891a      	ldrh	r2, [r3, #8]
 800fd98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd9a:	4413      	add	r3, r2
 800fd9c:	b29a      	uxth	r2, r3
 800fd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d1f1      	bne.n	800fd94 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800fdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb2:	891a      	ldrh	r2, [r3, #8]
 800fdb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdb6:	4413      	add	r3, r2
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdbc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	895a      	ldrh	r2, [r3, #10]
 800fdc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdc4:	4413      	add	r3, r2
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800fdcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdce:	891a      	ldrh	r2, [r3, #8]
 800fdd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdd2:	4413      	add	r3, r2
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdd8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800fdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d111      	bne.n	800fe04 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fde4:	66da      	str	r2, [r3, #108]	; 0x6c
 800fde6:	e010      	b.n	800fe0a <tcp_write+0x5c6>
 800fde8:	08017888 	.word	0x08017888
 800fdec:	08017b28 	.word	0x08017b28
 800fdf0:	080178dc 	.word	0x080178dc
 800fdf4:	08017b68 	.word	0x08017b68
 800fdf8:	08017b78 	.word	0x08017b78
 800fdfc:	08017b8c 	.word	0x08017b8c
 800fe00:	08017bc4 	.word	0x08017bc4
  } else {
    last_unsent->next = queue;
 800fe04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe08:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe0e:	88fb      	ldrh	r3, [r7, #6]
 800fe10:	441a      	add	r2, r3
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fe1c:	88fb      	ldrh	r3, [r7, #6]
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fe2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00e      	beq.n	800fe5a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10a      	bne.n	800fe5a <tcp_write+0x616>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d106      	bne.n	800fe5a <tcp_write+0x616>
 800fe4c:	4b2c      	ldr	r3, [pc, #176]	; (800ff00 <tcp_write+0x6bc>)
 800fe4e:	f240 3212 	movw	r2, #786	; 0x312
 800fe52:	492c      	ldr	r1, [pc, #176]	; (800ff04 <tcp_write+0x6c0>)
 800fe54:	482c      	ldr	r0, [pc, #176]	; (800ff08 <tcp_write+0x6c4>)
 800fe56:	f004 fbb9 	bl	80145cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800fe5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d016      	beq.n	800fe8e <tcp_write+0x64a>
 800fe60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d012      	beq.n	800fe8e <tcp_write+0x64a>
 800fe68:	797b      	ldrb	r3, [r7, #5]
 800fe6a:	f003 0302 	and.w	r3, r3, #2
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d10d      	bne.n	800fe8e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800fe72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	899b      	ldrh	r3, [r3, #12]
 800fe78:	b29c      	uxth	r4, r3
 800fe7a:	2008      	movs	r0, #8
 800fe7c:	f7f9 fb7a 	bl	8009574 <lwip_htons>
 800fe80:	4603      	mov	r3, r0
 800fe82:	461a      	mov	r2, r3
 800fe84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	4322      	orrs	r2, r4
 800fe8a:	b292      	uxth	r2, r2
 800fe8c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	e031      	b.n	800fef6 <tcp_write+0x6b2>
          goto memerr;
 800fe92:	bf00      	nop
 800fe94:	e006      	b.n	800fea4 <tcp_write+0x660>
            goto memerr;
 800fe96:	bf00      	nop
 800fe98:	e004      	b.n	800fea4 <tcp_write+0x660>
        goto memerr;
 800fe9a:	bf00      	nop
 800fe9c:	e002      	b.n	800fea4 <tcp_write+0x660>
        goto memerr;
 800fe9e:	bf00      	nop
 800fea0:	e000      	b.n	800fea4 <tcp_write+0x660>
      goto memerr;
 800fea2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	8b5b      	ldrh	r3, [r3, #26]
 800fea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feac:	b29a      	uxth	r2, r3
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800feb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d002      	beq.n	800febe <tcp_write+0x67a>
    pbuf_free(concat_p);
 800feb8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800feba:	f7fa ff07 	bl	800accc <pbuf_free>
  }
  if (queue != NULL) {
 800febe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d002      	beq.n	800feca <tcp_write+0x686>
    tcp_segs_free(queue);
 800fec4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fec6:	f7fc fb6f 	bl	800c5a8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d00e      	beq.n	800fef2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d10a      	bne.n	800fef2 <tcp_write+0x6ae>
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d106      	bne.n	800fef2 <tcp_write+0x6ae>
 800fee4:	4b06      	ldr	r3, [pc, #24]	; (800ff00 <tcp_write+0x6bc>)
 800fee6:	f240 3227 	movw	r2, #807	; 0x327
 800feea:	4906      	ldr	r1, [pc, #24]	; (800ff04 <tcp_write+0x6c0>)
 800feec:	4806      	ldr	r0, [pc, #24]	; (800ff08 <tcp_write+0x6c4>)
 800feee:	f004 fb6d 	bl	80145cc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800fef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	375c      	adds	r7, #92	; 0x5c
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd90      	pop	{r4, r7, pc}
 800fefe:	bf00      	nop
 800ff00:	08017888 	.word	0x08017888
 800ff04:	08017bfc 	.word	0x08017bfc
 800ff08:	080178dc 	.word	0x080178dc

0800ff0c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ff0c:	b590      	push	{r4, r7, lr}
 800ff0e:	b08b      	sub	sp, #44	; 0x2c
 800ff10:	af02      	add	r7, sp, #8
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	460b      	mov	r3, r1
 800ff16:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	61fb      	str	r3, [r7, #28]
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d106      	bne.n	800ff38 <tcp_split_unsent_seg+0x2c>
 800ff2a:	4b95      	ldr	r3, [pc, #596]	; (8010180 <tcp_split_unsent_seg+0x274>)
 800ff2c:	f240 324b 	movw	r2, #843	; 0x34b
 800ff30:	4994      	ldr	r1, [pc, #592]	; (8010184 <tcp_split_unsent_seg+0x278>)
 800ff32:	4895      	ldr	r0, [pc, #596]	; (8010188 <tcp_split_unsent_seg+0x27c>)
 800ff34:	f004 fb4a 	bl	80145cc <iprintf>

  useg = pcb->unsent;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff3c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d102      	bne.n	800ff4a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ff44:	f04f 33ff 	mov.w	r3, #4294967295
 800ff48:	e116      	b.n	8010178 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ff4a:	887b      	ldrh	r3, [r7, #2]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d109      	bne.n	800ff64 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ff50:	4b8b      	ldr	r3, [pc, #556]	; (8010180 <tcp_split_unsent_seg+0x274>)
 800ff52:	f240 3253 	movw	r2, #851	; 0x353
 800ff56:	498d      	ldr	r1, [pc, #564]	; (801018c <tcp_split_unsent_seg+0x280>)
 800ff58:	488b      	ldr	r0, [pc, #556]	; (8010188 <tcp_split_unsent_seg+0x27c>)
 800ff5a:	f004 fb37 	bl	80145cc <iprintf>
    return ERR_VAL;
 800ff5e:	f06f 0305 	mvn.w	r3, #5
 800ff62:	e109      	b.n	8010178 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	891b      	ldrh	r3, [r3, #8]
 800ff68:	887a      	ldrh	r2, [r7, #2]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d301      	bcc.n	800ff72 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	e102      	b.n	8010178 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff76:	887a      	ldrh	r2, [r7, #2]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d906      	bls.n	800ff8a <tcp_split_unsent_seg+0x7e>
 800ff7c:	4b80      	ldr	r3, [pc, #512]	; (8010180 <tcp_split_unsent_seg+0x274>)
 800ff7e:	f240 325b 	movw	r2, #859	; 0x35b
 800ff82:	4983      	ldr	r1, [pc, #524]	; (8010190 <tcp_split_unsent_seg+0x284>)
 800ff84:	4880      	ldr	r0, [pc, #512]	; (8010188 <tcp_split_unsent_seg+0x27c>)
 800ff86:	f004 fb21 	bl	80145cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	891b      	ldrh	r3, [r3, #8]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d106      	bne.n	800ffa0 <tcp_split_unsent_seg+0x94>
 800ff92:	4b7b      	ldr	r3, [pc, #492]	; (8010180 <tcp_split_unsent_seg+0x274>)
 800ff94:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ff98:	497e      	ldr	r1, [pc, #504]	; (8010194 <tcp_split_unsent_seg+0x288>)
 800ff9a:	487b      	ldr	r0, [pc, #492]	; (8010188 <tcp_split_unsent_seg+0x27c>)
 800ff9c:	f004 fb16 	bl	80145cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	7a9b      	ldrb	r3, [r3, #10]
 800ffa4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ffa6:	7bfb      	ldrb	r3, [r7, #15]
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	f003 0304 	and.w	r3, r3, #4
 800ffb0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	891a      	ldrh	r2, [r3, #8]
 800ffb6:	887b      	ldrh	r3, [r7, #2]
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ffbc:	7bbb      	ldrb	r3, [r7, #14]
 800ffbe:	b29a      	uxth	r2, r3
 800ffc0:	89bb      	ldrh	r3, [r7, #12]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ffca:	4619      	mov	r1, r3
 800ffcc:	2036      	movs	r0, #54	; 0x36
 800ffce:	f7fa fb99 	bl	800a704 <pbuf_alloc>
 800ffd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	f000 80b7 	beq.w	801014a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	891a      	ldrh	r2, [r3, #8]
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	891b      	ldrh	r3, [r3, #8]
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	887b      	ldrh	r3, [r7, #2]
 800ffec:	4413      	add	r3, r2
 800ffee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	6858      	ldr	r0, [r3, #4]
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	7bbb      	ldrb	r3, [r7, #14]
 800fffa:	18d1      	adds	r1, r2, r3
 800fffc:	897b      	ldrh	r3, [r7, #10]
 800fffe:	89ba      	ldrh	r2, [r7, #12]
 8010000:	f7fb f85a 	bl	800b0b8 <pbuf_copy_partial>
 8010004:	4603      	mov	r3, r0
 8010006:	461a      	mov	r2, r3
 8010008:	89bb      	ldrh	r3, [r7, #12]
 801000a:	4293      	cmp	r3, r2
 801000c:	f040 809f 	bne.w	801014e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	899b      	ldrh	r3, [r3, #12]
 8010016:	b29b      	uxth	r3, r3
 8010018:	4618      	mov	r0, r3
 801001a:	f7f9 faab 	bl	8009574 <lwip_htons>
 801001e:	4603      	mov	r3, r0
 8010020:	b2db      	uxtb	r3, r3
 8010022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010026:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010028:	2300      	movs	r3, #0
 801002a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801002c:	7efb      	ldrb	r3, [r7, #27]
 801002e:	f003 0308 	and.w	r3, r3, #8
 8010032:	2b00      	cmp	r3, #0
 8010034:	d007      	beq.n	8010046 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010036:	7efb      	ldrb	r3, [r7, #27]
 8010038:	f023 0308 	bic.w	r3, r3, #8
 801003c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801003e:	7ebb      	ldrb	r3, [r7, #26]
 8010040:	f043 0308 	orr.w	r3, r3, #8
 8010044:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010046:	7efb      	ldrb	r3, [r7, #27]
 8010048:	f003 0301 	and.w	r3, r3, #1
 801004c:	2b00      	cmp	r3, #0
 801004e:	d007      	beq.n	8010060 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010050:	7efb      	ldrb	r3, [r7, #27]
 8010052:	f023 0301 	bic.w	r3, r3, #1
 8010056:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010058:	7ebb      	ldrb	r3, [r7, #26]
 801005a:	f043 0301 	orr.w	r3, r3, #1
 801005e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	4618      	mov	r0, r3
 8010068:	f7f9 fa99 	bl	800959e <lwip_htonl>
 801006c:	4602      	mov	r2, r0
 801006e:	887b      	ldrh	r3, [r7, #2]
 8010070:	18d1      	adds	r1, r2, r3
 8010072:	7eba      	ldrb	r2, [r7, #26]
 8010074:	7bfb      	ldrb	r3, [r7, #15]
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	460b      	mov	r3, r1
 801007a:	6939      	ldr	r1, [r7, #16]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7ff fa4f 	bl	800f520 <tcp_create_segment>
 8010082:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d063      	beq.n	8010152 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	4618      	mov	r0, r3
 8010090:	f7fa feaa 	bl	800ade8 <pbuf_clen>
 8010094:	4603      	mov	r3, r0
 8010096:	461a      	mov	r2, r3
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801009e:	1a9b      	subs	r3, r3, r2
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	6858      	ldr	r0, [r3, #4]
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	891a      	ldrh	r2, [r3, #8]
 80100b2:	89bb      	ldrh	r3, [r7, #12]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	4619      	mov	r1, r3
 80100ba:	f7fa fc81 	bl	800a9c0 <pbuf_realloc>
  useg->len -= remainder;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	891a      	ldrh	r2, [r3, #8]
 80100c2:	89bb      	ldrh	r3, [r7, #12]
 80100c4:	1ad3      	subs	r3, r2, r3
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	899b      	ldrh	r3, [r3, #12]
 80100d2:	b29c      	uxth	r4, r3
 80100d4:	7efb      	ldrb	r3, [r7, #27]
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	4618      	mov	r0, r3
 80100da:	f7f9 fa4b 	bl	8009574 <lwip_htons>
 80100de:	4603      	mov	r3, r0
 80100e0:	461a      	mov	r2, r3
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	4322      	orrs	r2, r4
 80100e8:	b292      	uxth	r2, r2
 80100ea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fa fe79 	bl	800ade8 <pbuf_clen>
 80100f6:	4603      	mov	r3, r0
 80100f8:	461a      	mov	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010100:	4413      	add	r3, r2
 8010102:	b29a      	uxth	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	4618      	mov	r0, r3
 8010110:	f7fa fe6a 	bl	800ade8 <pbuf_clen>
 8010114:	4603      	mov	r3, r0
 8010116:	461a      	mov	r2, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801011e:	4413      	add	r3, r2
 8010120:	b29a      	uxth	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	69fa      	ldr	r2, [r7, #28]
 8010134:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d103      	bne.n	8010146 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010146:	2300      	movs	r3, #0
 8010148:	e016      	b.n	8010178 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801014a:	bf00      	nop
 801014c:	e002      	b.n	8010154 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801014e:	bf00      	nop
 8010150:	e000      	b.n	8010154 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010152:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d006      	beq.n	8010168 <tcp_split_unsent_seg+0x25c>
 801015a:	4b09      	ldr	r3, [pc, #36]	; (8010180 <tcp_split_unsent_seg+0x274>)
 801015c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010160:	490d      	ldr	r1, [pc, #52]	; (8010198 <tcp_split_unsent_seg+0x28c>)
 8010162:	4809      	ldr	r0, [pc, #36]	; (8010188 <tcp_split_unsent_seg+0x27c>)
 8010164:	f004 fa32 	bl	80145cc <iprintf>
  if (p != NULL) {
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d002      	beq.n	8010174 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801016e:	6938      	ldr	r0, [r7, #16]
 8010170:	f7fa fdac 	bl	800accc <pbuf_free>
  }

  return ERR_MEM;
 8010174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010178:	4618      	mov	r0, r3
 801017a:	3724      	adds	r7, #36	; 0x24
 801017c:	46bd      	mov	sp, r7
 801017e:	bd90      	pop	{r4, r7, pc}
 8010180:	08017888 	.word	0x08017888
 8010184:	08017c1c 	.word	0x08017c1c
 8010188:	080178dc 	.word	0x080178dc
 801018c:	08017c40 	.word	0x08017c40
 8010190:	08017c64 	.word	0x08017c64
 8010194:	08017c74 	.word	0x08017c74
 8010198:	08017c84 	.word	0x08017c84

0801019c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801019c:	b590      	push	{r4, r7, lr}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d106      	bne.n	80101b8 <tcp_send_fin+0x1c>
 80101aa:	4b21      	ldr	r3, [pc, #132]	; (8010230 <tcp_send_fin+0x94>)
 80101ac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80101b0:	4920      	ldr	r1, [pc, #128]	; (8010234 <tcp_send_fin+0x98>)
 80101b2:	4821      	ldr	r0, [pc, #132]	; (8010238 <tcp_send_fin+0x9c>)
 80101b4:	f004 fa0a 	bl	80145cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d02e      	beq.n	801021e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101c4:	60fb      	str	r3, [r7, #12]
 80101c6:	e002      	b.n	80101ce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1f8      	bne.n	80101c8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	68db      	ldr	r3, [r3, #12]
 80101da:	899b      	ldrh	r3, [r3, #12]
 80101dc:	b29b      	uxth	r3, r3
 80101de:	4618      	mov	r0, r3
 80101e0:	f7f9 f9c8 	bl	8009574 <lwip_htons>
 80101e4:	4603      	mov	r3, r0
 80101e6:	b2db      	uxtb	r3, r3
 80101e8:	f003 0307 	and.w	r3, r3, #7
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d116      	bne.n	801021e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	899b      	ldrh	r3, [r3, #12]
 80101f6:	b29c      	uxth	r4, r3
 80101f8:	2001      	movs	r0, #1
 80101fa:	f7f9 f9bb 	bl	8009574 <lwip_htons>
 80101fe:	4603      	mov	r3, r0
 8010200:	461a      	mov	r2, r3
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	4322      	orrs	r2, r4
 8010208:	b292      	uxth	r2, r2
 801020a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	8b5b      	ldrh	r3, [r3, #26]
 8010210:	f043 0320 	orr.w	r3, r3, #32
 8010214:	b29a      	uxth	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801021a:	2300      	movs	r3, #0
 801021c:	e004      	b.n	8010228 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801021e:	2101      	movs	r1, #1
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 f80b 	bl	801023c <tcp_enqueue_flags>
 8010226:	4603      	mov	r3, r0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3714      	adds	r7, #20
 801022c:	46bd      	mov	sp, r7
 801022e:	bd90      	pop	{r4, r7, pc}
 8010230:	08017888 	.word	0x08017888
 8010234:	08017c90 	.word	0x08017c90
 8010238:	080178dc 	.word	0x080178dc

0801023c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b08a      	sub	sp, #40	; 0x28
 8010240:	af02      	add	r7, sp, #8
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	460b      	mov	r3, r1
 8010246:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010248:	2300      	movs	r3, #0
 801024a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801024c:	2300      	movs	r3, #0
 801024e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010250:	78fb      	ldrb	r3, [r7, #3]
 8010252:	f003 0303 	and.w	r3, r3, #3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d106      	bne.n	8010268 <tcp_enqueue_flags+0x2c>
 801025a:	4b67      	ldr	r3, [pc, #412]	; (80103f8 <tcp_enqueue_flags+0x1bc>)
 801025c:	f240 4211 	movw	r2, #1041	; 0x411
 8010260:	4966      	ldr	r1, [pc, #408]	; (80103fc <tcp_enqueue_flags+0x1c0>)
 8010262:	4867      	ldr	r0, [pc, #412]	; (8010400 <tcp_enqueue_flags+0x1c4>)
 8010264:	f004 f9b2 	bl	80145cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d106      	bne.n	801027c <tcp_enqueue_flags+0x40>
 801026e:	4b62      	ldr	r3, [pc, #392]	; (80103f8 <tcp_enqueue_flags+0x1bc>)
 8010270:	f240 4213 	movw	r2, #1043	; 0x413
 8010274:	4963      	ldr	r1, [pc, #396]	; (8010404 <tcp_enqueue_flags+0x1c8>)
 8010276:	4862      	ldr	r0, [pc, #392]	; (8010400 <tcp_enqueue_flags+0x1c4>)
 8010278:	f004 f9a8 	bl	80145cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801027c:	78fb      	ldrb	r3, [r7, #3]
 801027e:	f003 0302 	and.w	r3, r3, #2
 8010282:	2b00      	cmp	r3, #0
 8010284:	d001      	beq.n	801028a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010286:	2301      	movs	r3, #1
 8010288:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801028a:	7ffb      	ldrb	r3, [r7, #31]
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	b2db      	uxtb	r3, r3
 8010290:	f003 0304 	and.w	r3, r3, #4
 8010294:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010296:	7dfb      	ldrb	r3, [r7, #23]
 8010298:	b29b      	uxth	r3, r3
 801029a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801029e:	4619      	mov	r1, r3
 80102a0:	2036      	movs	r0, #54	; 0x36
 80102a2:	f7fa fa2f 	bl	800a704 <pbuf_alloc>
 80102a6:	6138      	str	r0, [r7, #16]
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d109      	bne.n	80102c2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	8b5b      	ldrh	r3, [r3, #26]
 80102b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80102bc:	f04f 33ff 	mov.w	r3, #4294967295
 80102c0:	e095      	b.n	80103ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	895a      	ldrh	r2, [r3, #10]
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d206      	bcs.n	80102dc <tcp_enqueue_flags+0xa0>
 80102ce:	4b4a      	ldr	r3, [pc, #296]	; (80103f8 <tcp_enqueue_flags+0x1bc>)
 80102d0:	f240 4239 	movw	r2, #1081	; 0x439
 80102d4:	494c      	ldr	r1, [pc, #304]	; (8010408 <tcp_enqueue_flags+0x1cc>)
 80102d6:	484a      	ldr	r0, [pc, #296]	; (8010400 <tcp_enqueue_flags+0x1c4>)
 80102d8:	f004 f978 	bl	80145cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80102e0:	78fa      	ldrb	r2, [r7, #3]
 80102e2:	7ffb      	ldrb	r3, [r7, #31]
 80102e4:	9300      	str	r3, [sp, #0]
 80102e6:	460b      	mov	r3, r1
 80102e8:	6939      	ldr	r1, [r7, #16]
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f7ff f918 	bl	800f520 <tcp_create_segment>
 80102f0:	60f8      	str	r0, [r7, #12]
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d109      	bne.n	801030c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	8b5b      	ldrh	r3, [r3, #26]
 80102fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010300:	b29a      	uxth	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010306:	f04f 33ff 	mov.w	r3, #4294967295
 801030a:	e070      	b.n	80103ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	f003 0303 	and.w	r3, r3, #3
 8010314:	2b00      	cmp	r3, #0
 8010316:	d006      	beq.n	8010326 <tcp_enqueue_flags+0xea>
 8010318:	4b37      	ldr	r3, [pc, #220]	; (80103f8 <tcp_enqueue_flags+0x1bc>)
 801031a:	f240 4242 	movw	r2, #1090	; 0x442
 801031e:	493b      	ldr	r1, [pc, #236]	; (801040c <tcp_enqueue_flags+0x1d0>)
 8010320:	4837      	ldr	r0, [pc, #220]	; (8010400 <tcp_enqueue_flags+0x1c4>)
 8010322:	f004 f953 	bl	80145cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	891b      	ldrh	r3, [r3, #8]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d006      	beq.n	801033c <tcp_enqueue_flags+0x100>
 801032e:	4b32      	ldr	r3, [pc, #200]	; (80103f8 <tcp_enqueue_flags+0x1bc>)
 8010330:	f240 4243 	movw	r2, #1091	; 0x443
 8010334:	4936      	ldr	r1, [pc, #216]	; (8010410 <tcp_enqueue_flags+0x1d4>)
 8010336:	4832      	ldr	r0, [pc, #200]	; (8010400 <tcp_enqueue_flags+0x1c4>)
 8010338:	f004 f948 	bl	80145cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010340:	2b00      	cmp	r3, #0
 8010342:	d103      	bne.n	801034c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	68fa      	ldr	r2, [r7, #12]
 8010348:	66da      	str	r2, [r3, #108]	; 0x6c
 801034a:	e00d      	b.n	8010368 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010350:	61bb      	str	r3, [r7, #24]
 8010352:	e002      	b.n	801035a <tcp_enqueue_flags+0x11e>
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	61bb      	str	r3, [r7, #24]
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1f8      	bne.n	8010354 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010370:	78fb      	ldrb	r3, [r7, #3]
 8010372:	f003 0302 	and.w	r3, r3, #2
 8010376:	2b00      	cmp	r3, #0
 8010378:	d104      	bne.n	8010384 <tcp_enqueue_flags+0x148>
 801037a:	78fb      	ldrb	r3, [r7, #3]
 801037c:	f003 0301 	and.w	r3, r3, #1
 8010380:	2b00      	cmp	r3, #0
 8010382:	d004      	beq.n	801038e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010388:	1c5a      	adds	r2, r3, #1
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801038e:	78fb      	ldrb	r3, [r7, #3]
 8010390:	f003 0301 	and.w	r3, r3, #1
 8010394:	2b00      	cmp	r3, #0
 8010396:	d006      	beq.n	80103a6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	8b5b      	ldrh	r3, [r3, #26]
 801039c:	f043 0320 	orr.w	r3, r3, #32
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fa fd1c 	bl	800ade8 <pbuf_clen>
 80103b0:	4603      	mov	r3, r0
 80103b2:	461a      	mov	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103ba:	4413      	add	r3, r2
 80103bc:	b29a      	uxth	r2, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00e      	beq.n	80103ec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d10a      	bne.n	80103ec <tcp_enqueue_flags+0x1b0>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d106      	bne.n	80103ec <tcp_enqueue_flags+0x1b0>
 80103de:	4b06      	ldr	r3, [pc, #24]	; (80103f8 <tcp_enqueue_flags+0x1bc>)
 80103e0:	f240 4265 	movw	r2, #1125	; 0x465
 80103e4:	490b      	ldr	r1, [pc, #44]	; (8010414 <tcp_enqueue_flags+0x1d8>)
 80103e6:	4806      	ldr	r0, [pc, #24]	; (8010400 <tcp_enqueue_flags+0x1c4>)
 80103e8:	f004 f8f0 	bl	80145cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80103ec:	2300      	movs	r3, #0
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3720      	adds	r7, #32
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	08017888 	.word	0x08017888
 80103fc:	08017cac 	.word	0x08017cac
 8010400:	080178dc 	.word	0x080178dc
 8010404:	08017d04 	.word	0x08017d04
 8010408:	08017d24 	.word	0x08017d24
 801040c:	08017d60 	.word	0x08017d60
 8010410:	08017d78 	.word	0x08017d78
 8010414:	08017da4 	.word	0x08017da4

08010418 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010418:	b5b0      	push	{r4, r5, r7, lr}
 801041a:	b08a      	sub	sp, #40	; 0x28
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d106      	bne.n	8010434 <tcp_output+0x1c>
 8010426:	4b9e      	ldr	r3, [pc, #632]	; (80106a0 <tcp_output+0x288>)
 8010428:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801042c:	499d      	ldr	r1, [pc, #628]	; (80106a4 <tcp_output+0x28c>)
 801042e:	489e      	ldr	r0, [pc, #632]	; (80106a8 <tcp_output+0x290>)
 8010430:	f004 f8cc 	bl	80145cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	7d1b      	ldrb	r3, [r3, #20]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d106      	bne.n	801044a <tcp_output+0x32>
 801043c:	4b98      	ldr	r3, [pc, #608]	; (80106a0 <tcp_output+0x288>)
 801043e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010442:	499a      	ldr	r1, [pc, #616]	; (80106ac <tcp_output+0x294>)
 8010444:	4898      	ldr	r0, [pc, #608]	; (80106a8 <tcp_output+0x290>)
 8010446:	f004 f8c1 	bl	80145cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801044a:	4b99      	ldr	r3, [pc, #612]	; (80106b0 <tcp_output+0x298>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	429a      	cmp	r2, r3
 8010452:	d101      	bne.n	8010458 <tcp_output+0x40>
    return ERR_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	e1ce      	b.n	80107f6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010464:	4293      	cmp	r3, r2
 8010466:	bf28      	it	cs
 8010468:	4613      	movcs	r3, r2
 801046a:	b29b      	uxth	r3, r3
 801046c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010472:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010476:	2b00      	cmp	r3, #0
 8010478:	d10b      	bne.n	8010492 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	8b5b      	ldrh	r3, [r3, #26]
 801047e:	f003 0302 	and.w	r3, r3, #2
 8010482:	2b00      	cmp	r3, #0
 8010484:	f000 81aa 	beq.w	80107dc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 fdcb 	bl	8011024 <tcp_send_empty_ack>
 801048e:	4603      	mov	r3, r0
 8010490:	e1b1      	b.n	80107f6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010492:	6879      	ldr	r1, [r7, #4]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	3304      	adds	r3, #4
 8010498:	461a      	mov	r2, r3
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7ff f824 	bl	800f4e8 <tcp_route>
 80104a0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d102      	bne.n	80104ae <tcp_output+0x96>
    return ERR_RTE;
 80104a8:	f06f 0303 	mvn.w	r3, #3
 80104ac:	e1a3      	b.n	80107f6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d003      	beq.n	80104bc <tcp_output+0xa4>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d111      	bne.n	80104e0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d002      	beq.n	80104c8 <tcp_output+0xb0>
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	3304      	adds	r3, #4
 80104c6:	e000      	b.n	80104ca <tcp_output+0xb2>
 80104c8:	2300      	movs	r3, #0
 80104ca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d102      	bne.n	80104d8 <tcp_output+0xc0>
      return ERR_RTE;
 80104d2:	f06f 0303 	mvn.w	r3, #3
 80104d6:	e18e      	b.n	80107f6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80104e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7f9 f859 	bl	800959e <lwip_htonl>
 80104ec:	4602      	mov	r2, r0
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104f2:	1ad3      	subs	r3, r2, r3
 80104f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104f6:	8912      	ldrh	r2, [r2, #8]
 80104f8:	4413      	add	r3, r2
 80104fa:	69ba      	ldr	r2, [r7, #24]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d227      	bcs.n	8010550 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010506:	461a      	mov	r2, r3
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	4293      	cmp	r3, r2
 801050c:	d114      	bne.n	8010538 <tcp_output+0x120>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010512:	2b00      	cmp	r3, #0
 8010514:	d110      	bne.n	8010538 <tcp_output+0x120>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801051c:	2b00      	cmp	r3, #0
 801051e:	d10b      	bne.n	8010538 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2201      	movs	r2, #1
 801052c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	8b5b      	ldrh	r3, [r3, #26]
 801053c:	f003 0302 	and.w	r3, r3, #2
 8010540:	2b00      	cmp	r3, #0
 8010542:	f000 814d 	beq.w	80107e0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fd6c 	bl	8011024 <tcp_send_empty_ack>
 801054c:	4603      	mov	r3, r0
 801054e:	e152      	b.n	80107f6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2200      	movs	r2, #0
 8010554:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801055c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	2b00      	cmp	r3, #0
 8010562:	f000 811c 	beq.w	801079e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010566:	e002      	b.n	801056e <tcp_output+0x156>
 8010568:	6a3b      	ldr	r3, [r7, #32]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	623b      	str	r3, [r7, #32]
 801056e:	6a3b      	ldr	r3, [r7, #32]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d1f8      	bne.n	8010568 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010576:	e112      	b.n	801079e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	899b      	ldrh	r3, [r3, #12]
 801057e:	b29b      	uxth	r3, r3
 8010580:	4618      	mov	r0, r3
 8010582:	f7f8 fff7 	bl	8009574 <lwip_htons>
 8010586:	4603      	mov	r3, r0
 8010588:	b2db      	uxtb	r3, r3
 801058a:	f003 0304 	and.w	r3, r3, #4
 801058e:	2b00      	cmp	r3, #0
 8010590:	d006      	beq.n	80105a0 <tcp_output+0x188>
 8010592:	4b43      	ldr	r3, [pc, #268]	; (80106a0 <tcp_output+0x288>)
 8010594:	f240 5236 	movw	r2, #1334	; 0x536
 8010598:	4946      	ldr	r1, [pc, #280]	; (80106b4 <tcp_output+0x29c>)
 801059a:	4843      	ldr	r0, [pc, #268]	; (80106a8 <tcp_output+0x290>)
 801059c:	f004 f816 	bl	80145cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d01f      	beq.n	80105e8 <tcp_output+0x1d0>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	8b5b      	ldrh	r3, [r3, #26]
 80105ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d119      	bne.n	80105e8 <tcp_output+0x1d0>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00b      	beq.n	80105d4 <tcp_output+0x1bc>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d110      	bne.n	80105e8 <tcp_output+0x1d0>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105ca:	891a      	ldrh	r2, [r3, #8]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d209      	bcs.n	80105e8 <tcp_output+0x1d0>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d004      	beq.n	80105e8 <tcp_output+0x1d0>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105e4:	2b08      	cmp	r3, #8
 80105e6:	d901      	bls.n	80105ec <tcp_output+0x1d4>
 80105e8:	2301      	movs	r3, #1
 80105ea:	e000      	b.n	80105ee <tcp_output+0x1d6>
 80105ec:	2300      	movs	r3, #0
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d106      	bne.n	8010600 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	8b5b      	ldrh	r3, [r3, #26]
 80105f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 80e4 	beq.w	80107c8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	7d1b      	ldrb	r3, [r3, #20]
 8010604:	2b02      	cmp	r3, #2
 8010606:	d00d      	beq.n	8010624 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060a:	68db      	ldr	r3, [r3, #12]
 801060c:	899b      	ldrh	r3, [r3, #12]
 801060e:	b29c      	uxth	r4, r3
 8010610:	2010      	movs	r0, #16
 8010612:	f7f8 ffaf 	bl	8009574 <lwip_htons>
 8010616:	4603      	mov	r3, r0
 8010618:	461a      	mov	r2, r3
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	4322      	orrs	r2, r4
 8010620:	b292      	uxth	r2, r2
 8010622:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010624:	697a      	ldr	r2, [r7, #20]
 8010626:	6879      	ldr	r1, [r7, #4]
 8010628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801062a:	f000 f909 	bl	8010840 <tcp_output_segment>
 801062e:	4603      	mov	r3, r0
 8010630:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d009      	beq.n	801064e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	8b5b      	ldrh	r3, [r3, #26]
 801063e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010642:	b29a      	uxth	r2, r3
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	835a      	strh	r2, [r3, #26]
      return err;
 8010648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801064c:	e0d3      	b.n	80107f6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010650:	681a      	ldr	r2, [r3, #0]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	7d1b      	ldrb	r3, [r3, #20]
 801065a:	2b02      	cmp	r3, #2
 801065c:	d006      	beq.n	801066c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	8b5b      	ldrh	r3, [r3, #26]
 8010662:	f023 0303 	bic.w	r3, r3, #3
 8010666:	b29a      	uxth	r2, r3
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	4618      	mov	r0, r3
 8010674:	f7f8 ff93 	bl	800959e <lwip_htonl>
 8010678:	4604      	mov	r4, r0
 801067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067c:	891b      	ldrh	r3, [r3, #8]
 801067e:	461d      	mov	r5, r3
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	899b      	ldrh	r3, [r3, #12]
 8010686:	b29b      	uxth	r3, r3
 8010688:	4618      	mov	r0, r3
 801068a:	f7f8 ff73 	bl	8009574 <lwip_htons>
 801068e:	4603      	mov	r3, r0
 8010690:	b2db      	uxtb	r3, r3
 8010692:	f003 0303 	and.w	r3, r3, #3
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00e      	beq.n	80106b8 <tcp_output+0x2a0>
 801069a:	2301      	movs	r3, #1
 801069c:	e00d      	b.n	80106ba <tcp_output+0x2a2>
 801069e:	bf00      	nop
 80106a0:	08017888 	.word	0x08017888
 80106a4:	08017dcc 	.word	0x08017dcc
 80106a8:	080178dc 	.word	0x080178dc
 80106ac:	08017de4 	.word	0x08017de4
 80106b0:	2000aadc 	.word	0x2000aadc
 80106b4:	08017e0c 	.word	0x08017e0c
 80106b8:	2300      	movs	r3, #0
 80106ba:	442b      	add	r3, r5
 80106bc:	4423      	add	r3, r4
 80106be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	1ad3      	subs	r3, r2, r3
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	da02      	bge.n	80106d2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80106d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d4:	891b      	ldrh	r3, [r3, #8]
 80106d6:	461c      	mov	r4, r3
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	899b      	ldrh	r3, [r3, #12]
 80106de:	b29b      	uxth	r3, r3
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7f8 ff47 	bl	8009574 <lwip_htons>
 80106e6:	4603      	mov	r3, r0
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	f003 0303 	and.w	r3, r3, #3
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <tcp_output+0x2de>
 80106f2:	2301      	movs	r3, #1
 80106f4:	e000      	b.n	80106f8 <tcp_output+0x2e0>
 80106f6:	2300      	movs	r3, #0
 80106f8:	4423      	add	r3, r4
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d049      	beq.n	8010792 <tcp_output+0x37a>
      seg->next = NULL;
 80106fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010700:	2200      	movs	r2, #0
 8010702:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010708:	2b00      	cmp	r3, #0
 801070a:	d105      	bne.n	8010718 <tcp_output+0x300>
        pcb->unacked = seg;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010710:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010714:	623b      	str	r3, [r7, #32]
 8010716:	e03f      	b.n	8010798 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	4618      	mov	r0, r3
 8010720:	f7f8 ff3d 	bl	800959e <lwip_htonl>
 8010724:	4604      	mov	r4, r0
 8010726:	6a3b      	ldr	r3, [r7, #32]
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	4618      	mov	r0, r3
 801072e:	f7f8 ff36 	bl	800959e <lwip_htonl>
 8010732:	4603      	mov	r3, r0
 8010734:	1ae3      	subs	r3, r4, r3
 8010736:	2b00      	cmp	r3, #0
 8010738:	da24      	bge.n	8010784 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	3370      	adds	r3, #112	; 0x70
 801073e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010740:	e002      	b.n	8010748 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d011      	beq.n	8010774 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	4618      	mov	r0, r3
 801075a:	f7f8 ff20 	bl	800959e <lwip_htonl>
 801075e:	4604      	mov	r4, r0
 8010760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	4618      	mov	r0, r3
 8010768:	f7f8 ff19 	bl	800959e <lwip_htonl>
 801076c:	4603      	mov	r3, r0
 801076e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010770:	2b00      	cmp	r3, #0
 8010772:	dbe6      	blt.n	8010742 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010780:	601a      	str	r2, [r3, #0]
 8010782:	e009      	b.n	8010798 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010784:	6a3b      	ldr	r3, [r7, #32]
 8010786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010788:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801078a:	6a3b      	ldr	r3, [r7, #32]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	623b      	str	r3, [r7, #32]
 8010790:	e002      	b.n	8010798 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010794:	f7fb ff1d 	bl	800c5d2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801079c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d012      	beq.n	80107ca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7f8 fef7 	bl	800959e <lwip_htonl>
 80107b0:	4602      	mov	r2, r0
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ba:	8912      	ldrh	r2, [r2, #8]
 80107bc:	4413      	add	r3, r2
  while (seg != NULL &&
 80107be:	69ba      	ldr	r2, [r7, #24]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	f4bf aed9 	bcs.w	8010578 <tcp_output+0x160>
 80107c6:	e000      	b.n	80107ca <tcp_output+0x3b2>
      break;
 80107c8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d108      	bne.n	80107e4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80107da:	e004      	b.n	80107e6 <tcp_output+0x3ce>
    goto output_done;
 80107dc:	bf00      	nop
 80107de:	e002      	b.n	80107e6 <tcp_output+0x3ce>
    goto output_done;
 80107e0:	bf00      	nop
 80107e2:	e000      	b.n	80107e6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80107e4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	8b5b      	ldrh	r3, [r3, #26]
 80107ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80107f4:	2300      	movs	r3, #0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3728      	adds	r7, #40	; 0x28
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bdb0      	pop	{r4, r5, r7, pc}
 80107fe:	bf00      	nop

08010800 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d106      	bne.n	801081c <tcp_output_segment_busy+0x1c>
 801080e:	4b09      	ldr	r3, [pc, #36]	; (8010834 <tcp_output_segment_busy+0x34>)
 8010810:	f240 529a 	movw	r2, #1434	; 0x59a
 8010814:	4908      	ldr	r1, [pc, #32]	; (8010838 <tcp_output_segment_busy+0x38>)
 8010816:	4809      	ldr	r0, [pc, #36]	; (801083c <tcp_output_segment_busy+0x3c>)
 8010818:	f003 fed8 	bl	80145cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	7b9b      	ldrb	r3, [r3, #14]
 8010822:	2b01      	cmp	r3, #1
 8010824:	d001      	beq.n	801082a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010826:	2301      	movs	r3, #1
 8010828:	e000      	b.n	801082c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801082a:	2300      	movs	r3, #0
}
 801082c:	4618      	mov	r0, r3
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}
 8010834:	08017888 	.word	0x08017888
 8010838:	08017e24 	.word	0x08017e24
 801083c:	080178dc 	.word	0x080178dc

08010840 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010840:	b5b0      	push	{r4, r5, r7, lr}
 8010842:	b08c      	sub	sp, #48	; 0x30
 8010844:	af04      	add	r7, sp, #16
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d106      	bne.n	8010860 <tcp_output_segment+0x20>
 8010852:	4b63      	ldr	r3, [pc, #396]	; (80109e0 <tcp_output_segment+0x1a0>)
 8010854:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010858:	4962      	ldr	r1, [pc, #392]	; (80109e4 <tcp_output_segment+0x1a4>)
 801085a:	4863      	ldr	r0, [pc, #396]	; (80109e8 <tcp_output_segment+0x1a8>)
 801085c:	f003 feb6 	bl	80145cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d106      	bne.n	8010874 <tcp_output_segment+0x34>
 8010866:	4b5e      	ldr	r3, [pc, #376]	; (80109e0 <tcp_output_segment+0x1a0>)
 8010868:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801086c:	495f      	ldr	r1, [pc, #380]	; (80109ec <tcp_output_segment+0x1ac>)
 801086e:	485e      	ldr	r0, [pc, #376]	; (80109e8 <tcp_output_segment+0x1a8>)
 8010870:	f003 feac 	bl	80145cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d106      	bne.n	8010888 <tcp_output_segment+0x48>
 801087a:	4b59      	ldr	r3, [pc, #356]	; (80109e0 <tcp_output_segment+0x1a0>)
 801087c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010880:	495b      	ldr	r1, [pc, #364]	; (80109f0 <tcp_output_segment+0x1b0>)
 8010882:	4859      	ldr	r0, [pc, #356]	; (80109e8 <tcp_output_segment+0x1a8>)
 8010884:	f003 fea2 	bl	80145cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f7ff ffb9 	bl	8010800 <tcp_output_segment_busy>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d001      	beq.n	8010898 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010894:	2300      	movs	r3, #0
 8010896:	e09f      	b.n	80109d8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	68dc      	ldr	r4, [r3, #12]
 80108a0:	4610      	mov	r0, r2
 80108a2:	f7f8 fe7c 	bl	800959e <lwip_htonl>
 80108a6:	4603      	mov	r3, r0
 80108a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	68dc      	ldr	r4, [r3, #12]
 80108b2:	4610      	mov	r0, r2
 80108b4:	f7f8 fe5e 	bl	8009574 <lwip_htons>
 80108b8:	4603      	mov	r3, r0
 80108ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c0:	68ba      	ldr	r2, [r7, #8]
 80108c2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80108c4:	441a      	add	r2, r3
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	3314      	adds	r3, #20
 80108d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	7a9b      	ldrb	r3, [r3, #10]
 80108d6:	f003 0301 	and.w	r3, r3, #1
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d015      	beq.n	801090a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	3304      	adds	r3, #4
 80108e2:	461a      	mov	r2, r3
 80108e4:	6879      	ldr	r1, [r7, #4]
 80108e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80108ea:	f7fc fa37 	bl	800cd5c <tcp_eff_send_mss_netif>
 80108ee:	4603      	mov	r3, r0
 80108f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80108f2:	8b7b      	ldrh	r3, [r7, #26]
 80108f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7f8 fe50 	bl	800959e <lwip_htonl>
 80108fe:	4602      	mov	r2, r0
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	3304      	adds	r3, #4
 8010908:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010910:	2b00      	cmp	r3, #0
 8010912:	da02      	bge.n	801091a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	2200      	movs	r2, #0
 8010918:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10c      	bne.n	801093c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010922:	4b34      	ldr	r3, [pc, #208]	; (80109f4 <tcp_output_segment+0x1b4>)
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	4618      	mov	r0, r3
 8010932:	f7f8 fe34 	bl	800959e <lwip_htonl>
 8010936:	4602      	mov	r2, r0
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	68da      	ldr	r2, [r3, #12]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	8959      	ldrh	r1, [r3, #10]
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	8b3a      	ldrh	r2, [r7, #24]
 8010956:	1a8a      	subs	r2, r1, r2
 8010958:	b292      	uxth	r2, r2
 801095a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	8919      	ldrh	r1, [r3, #8]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	8b3a      	ldrh	r2, [r7, #24]
 8010968:	1a8a      	subs	r2, r1, r2
 801096a:	b292      	uxth	r2, r2
 801096c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	68fa      	ldr	r2, [r7, #12]
 8010974:	68d2      	ldr	r2, [r2, #12]
 8010976:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	741a      	strb	r2, [r3, #16]
 8010980:	2200      	movs	r2, #0
 8010982:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	f103 0214 	add.w	r2, r3, #20
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	7a9b      	ldrb	r3, [r3, #10]
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	f003 0304 	and.w	r3, r3, #4
 8010996:	4413      	add	r3, r2
 8010998:	69fa      	ldr	r2, [r7, #28]
 801099a:	429a      	cmp	r2, r3
 801099c:	d006      	beq.n	80109ac <tcp_output_segment+0x16c>
 801099e:	4b10      	ldr	r3, [pc, #64]	; (80109e0 <tcp_output_segment+0x1a0>)
 80109a0:	f240 621c 	movw	r2, #1564	; 0x61c
 80109a4:	4914      	ldr	r1, [pc, #80]	; (80109f8 <tcp_output_segment+0x1b8>)
 80109a6:	4810      	ldr	r0, [pc, #64]	; (80109e8 <tcp_output_segment+0x1a8>)
 80109a8:	f003 fe10 	bl	80145cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	6858      	ldr	r0, [r3, #4]
 80109b0:	68b9      	ldr	r1, [r7, #8]
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	1d1c      	adds	r4, r3, #4
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	7add      	ldrb	r5, [r3, #11]
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	7a9b      	ldrb	r3, [r3, #10]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	9202      	str	r2, [sp, #8]
 80109c2:	2206      	movs	r2, #6
 80109c4:	9201      	str	r2, [sp, #4]
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	462b      	mov	r3, r5
 80109ca:	4622      	mov	r2, r4
 80109cc:	f002 fbac 	bl	8013128 <ip4_output_if>
 80109d0:	4603      	mov	r3, r0
 80109d2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80109d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3720      	adds	r7, #32
 80109dc:	46bd      	mov	sp, r7
 80109de:	bdb0      	pop	{r4, r5, r7, pc}
 80109e0:	08017888 	.word	0x08017888
 80109e4:	08017e4c 	.word	0x08017e4c
 80109e8:	080178dc 	.word	0x080178dc
 80109ec:	08017e6c 	.word	0x08017e6c
 80109f0:	08017e8c 	.word	0x08017e8c
 80109f4:	2000aacc 	.word	0x2000aacc
 80109f8:	08017eb0 	.word	0x08017eb0

080109fc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80109fc:	b5b0      	push	{r4, r5, r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d106      	bne.n	8010a18 <tcp_rexmit_rto_prepare+0x1c>
 8010a0a:	4b31      	ldr	r3, [pc, #196]	; (8010ad0 <tcp_rexmit_rto_prepare+0xd4>)
 8010a0c:	f240 6263 	movw	r2, #1635	; 0x663
 8010a10:	4930      	ldr	r1, [pc, #192]	; (8010ad4 <tcp_rexmit_rto_prepare+0xd8>)
 8010a12:	4831      	ldr	r0, [pc, #196]	; (8010ad8 <tcp_rexmit_rto_prepare+0xdc>)
 8010a14:	f003 fdda 	bl	80145cc <iprintf>

  if (pcb->unacked == NULL) {
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d102      	bne.n	8010a26 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010a20:	f06f 0305 	mvn.w	r3, #5
 8010a24:	e050      	b.n	8010ac8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a2a:	60fb      	str	r3, [r7, #12]
 8010a2c:	e00b      	b.n	8010a46 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010a2e:	68f8      	ldr	r0, [r7, #12]
 8010a30:	f7ff fee6 	bl	8010800 <tcp_output_segment_busy>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d002      	beq.n	8010a40 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010a3a:	f06f 0305 	mvn.w	r3, #5
 8010a3e:	e043      	b.n	8010ac8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	60fb      	str	r3, [r7, #12]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d1ef      	bne.n	8010a2e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f7ff fed6 	bl	8010800 <tcp_output_segment_busy>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d002      	beq.n	8010a60 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010a5a:	f06f 0305 	mvn.w	r3, #5
 8010a5e:	e033      	b.n	8010ac8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2200      	movs	r2, #0
 8010a74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	8b5b      	ldrh	r3, [r3, #26]
 8010a7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010a7e:	b29a      	uxth	r2, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7f8 fd87 	bl	800959e <lwip_htonl>
 8010a90:	4604      	mov	r4, r0
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	891b      	ldrh	r3, [r3, #8]
 8010a96:	461d      	mov	r5, r3
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	68db      	ldr	r3, [r3, #12]
 8010a9c:	899b      	ldrh	r3, [r3, #12]
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7f8 fd67 	bl	8009574 <lwip_htons>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	f003 0303 	and.w	r3, r3, #3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d001      	beq.n	8010ab6 <tcp_rexmit_rto_prepare+0xba>
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e000      	b.n	8010ab8 <tcp_rexmit_rto_prepare+0xbc>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	442b      	add	r3, r5
 8010aba:	18e2      	adds	r2, r4, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010ac6:	2300      	movs	r3, #0
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3710      	adds	r7, #16
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bdb0      	pop	{r4, r5, r7, pc}
 8010ad0:	08017888 	.word	0x08017888
 8010ad4:	08017ec4 	.word	0x08017ec4
 8010ad8:	080178dc 	.word	0x080178dc

08010adc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <tcp_rexmit_rto_commit+0x1c>
 8010aea:	4b0d      	ldr	r3, [pc, #52]	; (8010b20 <tcp_rexmit_rto_commit+0x44>)
 8010aec:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010af0:	490c      	ldr	r1, [pc, #48]	; (8010b24 <tcp_rexmit_rto_commit+0x48>)
 8010af2:	480d      	ldr	r0, [pc, #52]	; (8010b28 <tcp_rexmit_rto_commit+0x4c>)
 8010af4:	f003 fd6a 	bl	80145cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010afe:	2bff      	cmp	r3, #255	; 0xff
 8010b00:	d007      	beq.n	8010b12 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b08:	3301      	adds	r3, #1
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7ff fc80 	bl	8010418 <tcp_output>
}
 8010b18:	bf00      	nop
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	08017888 	.word	0x08017888
 8010b24:	08017ee8 	.word	0x08017ee8
 8010b28:	080178dc 	.word	0x080178dc

08010b2c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d106      	bne.n	8010b48 <tcp_rexmit_rto+0x1c>
 8010b3a:	4b0a      	ldr	r3, [pc, #40]	; (8010b64 <tcp_rexmit_rto+0x38>)
 8010b3c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010b40:	4909      	ldr	r1, [pc, #36]	; (8010b68 <tcp_rexmit_rto+0x3c>)
 8010b42:	480a      	ldr	r0, [pc, #40]	; (8010b6c <tcp_rexmit_rto+0x40>)
 8010b44:	f003 fd42 	bl	80145cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7ff ff57 	bl	80109fc <tcp_rexmit_rto_prepare>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d102      	bne.n	8010b5a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7ff ffc1 	bl	8010adc <tcp_rexmit_rto_commit>
  }
}
 8010b5a:	bf00      	nop
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	08017888 	.word	0x08017888
 8010b68:	08017f0c 	.word	0x08017f0c
 8010b6c:	080178dc 	.word	0x080178dc

08010b70 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010b70:	b590      	push	{r4, r7, lr}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d106      	bne.n	8010b8c <tcp_rexmit+0x1c>
 8010b7e:	4b2f      	ldr	r3, [pc, #188]	; (8010c3c <tcp_rexmit+0xcc>)
 8010b80:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010b84:	492e      	ldr	r1, [pc, #184]	; (8010c40 <tcp_rexmit+0xd0>)
 8010b86:	482f      	ldr	r0, [pc, #188]	; (8010c44 <tcp_rexmit+0xd4>)
 8010b88:	f003 fd20 	bl	80145cc <iprintf>

  if (pcb->unacked == NULL) {
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d102      	bne.n	8010b9a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010b94:	f06f 0305 	mvn.w	r3, #5
 8010b98:	e04c      	b.n	8010c34 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b9e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010ba0:	68b8      	ldr	r0, [r7, #8]
 8010ba2:	f7ff fe2d 	bl	8010800 <tcp_output_segment_busy>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d002      	beq.n	8010bb2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010bac:	f06f 0305 	mvn.w	r3, #5
 8010bb0:	e040      	b.n	8010c34 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	681a      	ldr	r2, [r3, #0]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	336c      	adds	r3, #108	; 0x6c
 8010bbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010bc0:	e002      	b.n	8010bc8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d011      	beq.n	8010bf4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7f8 fce0 	bl	800959e <lwip_htonl>
 8010bde:	4604      	mov	r4, r0
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7f8 fcd9 	bl	800959e <lwip_htonl>
 8010bec:	4603      	mov	r3, r0
 8010bee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	dbe6      	blt.n	8010bc2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	68ba      	ldr	r2, [r7, #8]
 8010c00:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d103      	bne.n	8010c12 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c18:	2bff      	cmp	r3, #255	; 0xff
 8010c1a:	d007      	beq.n	8010c2c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c22:	3301      	adds	r3, #1
 8010c24:	b2da      	uxtb	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010c32:	2300      	movs	r3, #0
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3714      	adds	r7, #20
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd90      	pop	{r4, r7, pc}
 8010c3c:	08017888 	.word	0x08017888
 8010c40:	08017f28 	.word	0x08017f28
 8010c44:	080178dc 	.word	0x080178dc

08010c48 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d106      	bne.n	8010c64 <tcp_rexmit_fast+0x1c>
 8010c56:	4b2a      	ldr	r3, [pc, #168]	; (8010d00 <tcp_rexmit_fast+0xb8>)
 8010c58:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010c5c:	4929      	ldr	r1, [pc, #164]	; (8010d04 <tcp_rexmit_fast+0xbc>)
 8010c5e:	482a      	ldr	r0, [pc, #168]	; (8010d08 <tcp_rexmit_fast+0xc0>)
 8010c60:	f003 fcb4 	bl	80145cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d045      	beq.n	8010cf8 <tcp_rexmit_fast+0xb0>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	8b5b      	ldrh	r3, [r3, #26]
 8010c70:	f003 0304 	and.w	r3, r3, #4
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d13f      	bne.n	8010cf8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f7ff ff79 	bl	8010b70 <tcp_rexmit>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d139      	bne.n	8010cf8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c90:	4293      	cmp	r3, r2
 8010c92:	bf28      	it	cs
 8010c94:	4613      	movcs	r3, r2
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	da00      	bge.n	8010c9e <tcp_rexmit_fast+0x56>
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	105b      	asrs	r3, r3, #1
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010cae:	461a      	mov	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d206      	bcs.n	8010cc8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cbe:	005b      	lsls	r3, r3, #1
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	0049      	lsls	r1, r1, #1
 8010cd6:	440b      	add	r3, r1
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	4413      	add	r3, r2
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	8b5b      	ldrh	r3, [r3, #26]
 8010ce8:	f043 0304 	orr.w	r3, r3, #4
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010cf8:	bf00      	nop
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	08017888 	.word	0x08017888
 8010d04:	08017f40 	.word	0x08017f40
 8010d08:	080178dc 	.word	0x080178dc

08010d0c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b086      	sub	sp, #24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	607b      	str	r3, [r7, #4]
 8010d16:	460b      	mov	r3, r1
 8010d18:	817b      	strh	r3, [r7, #10]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010d1e:	897a      	ldrh	r2, [r7, #10]
 8010d20:	893b      	ldrh	r3, [r7, #8]
 8010d22:	4413      	add	r3, r2
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	3314      	adds	r3, #20
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d2e:	4619      	mov	r1, r3
 8010d30:	2022      	movs	r0, #34	; 0x22
 8010d32:	f7f9 fce7 	bl	800a704 <pbuf_alloc>
 8010d36:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d04d      	beq.n	8010dda <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010d3e:	897b      	ldrh	r3, [r7, #10]
 8010d40:	3313      	adds	r3, #19
 8010d42:	697a      	ldr	r2, [r7, #20]
 8010d44:	8952      	ldrh	r2, [r2, #10]
 8010d46:	4293      	cmp	r3, r2
 8010d48:	db06      	blt.n	8010d58 <tcp_output_alloc_header_common+0x4c>
 8010d4a:	4b26      	ldr	r3, [pc, #152]	; (8010de4 <tcp_output_alloc_header_common+0xd8>)
 8010d4c:	f240 7223 	movw	r2, #1827	; 0x723
 8010d50:	4925      	ldr	r1, [pc, #148]	; (8010de8 <tcp_output_alloc_header_common+0xdc>)
 8010d52:	4826      	ldr	r0, [pc, #152]	; (8010dec <tcp_output_alloc_header_common+0xe0>)
 8010d54:	f003 fc3a 	bl	80145cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010d5e:	8c3b      	ldrh	r3, [r7, #32]
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7f8 fc07 	bl	8009574 <lwip_htons>
 8010d66:	4603      	mov	r3, r0
 8010d68:	461a      	mov	r2, r3
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7f8 fbff 	bl	8009574 <lwip_htons>
 8010d76:	4603      	mov	r3, r0
 8010d78:	461a      	mov	r2, r3
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f7f8 fc0a 	bl	800959e <lwip_htonl>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010d90:	897b      	ldrh	r3, [r7, #10]
 8010d92:	089b      	lsrs	r3, r3, #2
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	3305      	adds	r3, #5
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	031b      	lsls	r3, r3, #12
 8010d9c:	b29a      	uxth	r2, r3
 8010d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	4313      	orrs	r3, r2
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7f8 fbe3 	bl	8009574 <lwip_htons>
 8010dae:	4603      	mov	r3, r0
 8010db0:	461a      	mov	r2, r3
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010db6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7f8 fbdb 	bl	8009574 <lwip_htons>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	741a      	strb	r2, [r3, #16]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	749a      	strb	r2, [r3, #18]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010dda:	697b      	ldr	r3, [r7, #20]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3718      	adds	r7, #24
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	08017888 	.word	0x08017888
 8010de8:	08017f60 	.word	0x08017f60
 8010dec:	080178dc 	.word	0x080178dc

08010df0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010df0:	b5b0      	push	{r4, r5, r7, lr}
 8010df2:	b08a      	sub	sp, #40	; 0x28
 8010df4:	af04      	add	r7, sp, #16
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	607b      	str	r3, [r7, #4]
 8010dfa:	460b      	mov	r3, r1
 8010dfc:	817b      	strh	r3, [r7, #10]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d106      	bne.n	8010e16 <tcp_output_alloc_header+0x26>
 8010e08:	4b15      	ldr	r3, [pc, #84]	; (8010e60 <tcp_output_alloc_header+0x70>)
 8010e0a:	f240 7242 	movw	r2, #1858	; 0x742
 8010e0e:	4915      	ldr	r1, [pc, #84]	; (8010e64 <tcp_output_alloc_header+0x74>)
 8010e10:	4815      	ldr	r0, [pc, #84]	; (8010e68 <tcp_output_alloc_header+0x78>)
 8010e12:	f003 fbdb 	bl	80145cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	8adb      	ldrh	r3, [r3, #22]
 8010e1e:	68fa      	ldr	r2, [r7, #12]
 8010e20:	8b12      	ldrh	r2, [r2, #24]
 8010e22:	68f9      	ldr	r1, [r7, #12]
 8010e24:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010e26:	893d      	ldrh	r5, [r7, #8]
 8010e28:	897c      	ldrh	r4, [r7, #10]
 8010e2a:	9103      	str	r1, [sp, #12]
 8010e2c:	2110      	movs	r1, #16
 8010e2e:	9102      	str	r1, [sp, #8]
 8010e30:	9201      	str	r2, [sp, #4]
 8010e32:	9300      	str	r3, [sp, #0]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	462a      	mov	r2, r5
 8010e38:	4621      	mov	r1, r4
 8010e3a:	f7ff ff67 	bl	8010d0c <tcp_output_alloc_header_common>
 8010e3e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d006      	beq.n	8010e54 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e4a:	68fa      	ldr	r2, [r7, #12]
 8010e4c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010e4e:	441a      	add	r2, r3
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010e54:	697b      	ldr	r3, [r7, #20]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3718      	adds	r7, #24
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	08017888 	.word	0x08017888
 8010e64:	08017f90 	.word	0x08017f90
 8010e68:	080178dc 	.word	0x080178dc

08010e6c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b088      	sub	sp, #32
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	4611      	mov	r1, r2
 8010e78:	461a      	mov	r2, r3
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	71fb      	strb	r3, [r7, #7]
 8010e7e:	4613      	mov	r3, r2
 8010e80:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010e82:	2300      	movs	r3, #0
 8010e84:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d106      	bne.n	8010e9a <tcp_output_fill_options+0x2e>
 8010e8c:	4b13      	ldr	r3, [pc, #76]	; (8010edc <tcp_output_fill_options+0x70>)
 8010e8e:	f240 7256 	movw	r2, #1878	; 0x756
 8010e92:	4913      	ldr	r1, [pc, #76]	; (8010ee0 <tcp_output_fill_options+0x74>)
 8010e94:	4813      	ldr	r0, [pc, #76]	; (8010ee4 <tcp_output_fill_options+0x78>)
 8010e96:	f003 fb99 	bl	80145cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	3314      	adds	r3, #20
 8010ea4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	f103 0214 	add.w	r2, r3, #20
 8010eac:	8bfb      	ldrh	r3, [r7, #30]
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	009b      	lsls	r3, r3, #2
 8010eb6:	f003 0304 	and.w	r3, r3, #4
 8010eba:	440b      	add	r3, r1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	697a      	ldr	r2, [r7, #20]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d006      	beq.n	8010ed2 <tcp_output_fill_options+0x66>
 8010ec4:	4b05      	ldr	r3, [pc, #20]	; (8010edc <tcp_output_fill_options+0x70>)
 8010ec6:	f240 7275 	movw	r2, #1909	; 0x775
 8010eca:	4907      	ldr	r1, [pc, #28]	; (8010ee8 <tcp_output_fill_options+0x7c>)
 8010ecc:	4805      	ldr	r0, [pc, #20]	; (8010ee4 <tcp_output_fill_options+0x78>)
 8010ece:	f003 fb7d 	bl	80145cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010ed2:	bf00      	nop
 8010ed4:	3720      	adds	r7, #32
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	08017888 	.word	0x08017888
 8010ee0:	08017fb8 	.word	0x08017fb8
 8010ee4:	080178dc 	.word	0x080178dc
 8010ee8:	08017eb0 	.word	0x08017eb0

08010eec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08a      	sub	sp, #40	; 0x28
 8010ef0:	af04      	add	r7, sp, #16
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
 8010ef8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d106      	bne.n	8010f0e <tcp_output_control_segment+0x22>
 8010f00:	4b1c      	ldr	r3, [pc, #112]	; (8010f74 <tcp_output_control_segment+0x88>)
 8010f02:	f240 7287 	movw	r2, #1927	; 0x787
 8010f06:	491c      	ldr	r1, [pc, #112]	; (8010f78 <tcp_output_control_segment+0x8c>)
 8010f08:	481c      	ldr	r0, [pc, #112]	; (8010f7c <tcp_output_control_segment+0x90>)
 8010f0a:	f003 fb5f 	bl	80145cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010f0e:	683a      	ldr	r2, [r7, #0]
 8010f10:	6879      	ldr	r1, [r7, #4]
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	f7fe fae8 	bl	800f4e8 <tcp_route>
 8010f18:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d102      	bne.n	8010f26 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010f20:	23fc      	movs	r3, #252	; 0xfc
 8010f22:	75fb      	strb	r3, [r7, #23]
 8010f24:	e01c      	b.n	8010f60 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d006      	beq.n	8010f3a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	7adb      	ldrb	r3, [r3, #11]
 8010f30:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	7a9b      	ldrb	r3, [r3, #10]
 8010f36:	757b      	strb	r3, [r7, #21]
 8010f38:	e003      	b.n	8010f42 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010f3a:	23ff      	movs	r3, #255	; 0xff
 8010f3c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010f42:	7dba      	ldrb	r2, [r7, #22]
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	9302      	str	r3, [sp, #8]
 8010f48:	2306      	movs	r3, #6
 8010f4a:	9301      	str	r3, [sp, #4]
 8010f4c:	7d7b      	ldrb	r3, [r7, #21]
 8010f4e:	9300      	str	r3, [sp, #0]
 8010f50:	4613      	mov	r3, r2
 8010f52:	683a      	ldr	r2, [r7, #0]
 8010f54:	6879      	ldr	r1, [r7, #4]
 8010f56:	68b8      	ldr	r0, [r7, #8]
 8010f58:	f002 f8e6 	bl	8013128 <ip4_output_if>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010f60:	68b8      	ldr	r0, [r7, #8]
 8010f62:	f7f9 feb3 	bl	800accc <pbuf_free>
  return err;
 8010f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3718      	adds	r7, #24
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	08017888 	.word	0x08017888
 8010f78:	08017fe0 	.word	0x08017fe0
 8010f7c:	080178dc 	.word	0x080178dc

08010f80 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010f80:	b590      	push	{r4, r7, lr}
 8010f82:	b08b      	sub	sp, #44	; 0x2c
 8010f84:	af04      	add	r7, sp, #16
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	607a      	str	r2, [r7, #4]
 8010f8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d106      	bne.n	8010fa2 <tcp_rst+0x22>
 8010f94:	4b1f      	ldr	r3, [pc, #124]	; (8011014 <tcp_rst+0x94>)
 8010f96:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010f9a:	491f      	ldr	r1, [pc, #124]	; (8011018 <tcp_rst+0x98>)
 8010f9c:	481f      	ldr	r0, [pc, #124]	; (801101c <tcp_rst+0x9c>)
 8010f9e:	f003 fb15 	bl	80145cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d106      	bne.n	8010fb6 <tcp_rst+0x36>
 8010fa8:	4b1a      	ldr	r3, [pc, #104]	; (8011014 <tcp_rst+0x94>)
 8010faa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010fae:	491c      	ldr	r1, [pc, #112]	; (8011020 <tcp_rst+0xa0>)
 8010fb0:	481a      	ldr	r0, [pc, #104]	; (801101c <tcp_rst+0x9c>)
 8010fb2:	f003 fb0b 	bl	80145cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010fba:	f246 0308 	movw	r3, #24584	; 0x6008
 8010fbe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010fc0:	7dfb      	ldrb	r3, [r7, #23]
 8010fc2:	b29c      	uxth	r4, r3
 8010fc4:	68b8      	ldr	r0, [r7, #8]
 8010fc6:	f7f8 faea 	bl	800959e <lwip_htonl>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	8abb      	ldrh	r3, [r7, #20]
 8010fce:	9303      	str	r3, [sp, #12]
 8010fd0:	2314      	movs	r3, #20
 8010fd2:	9302      	str	r3, [sp, #8]
 8010fd4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010fd6:	9301      	str	r3, [sp, #4]
 8010fd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	4613      	mov	r3, r2
 8010fde:	2200      	movs	r2, #0
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f7ff fe92 	bl	8010d0c <tcp_output_alloc_header_common>
 8010fe8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00c      	beq.n	801100a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ff0:	7dfb      	ldrb	r3, [r7, #23]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	6939      	ldr	r1, [r7, #16]
 8010ff6:	68f8      	ldr	r0, [r7, #12]
 8010ff8:	f7ff ff38 	bl	8010e6c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	6939      	ldr	r1, [r7, #16]
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f7ff ff72 	bl	8010eec <tcp_output_control_segment>
 8011008:	e000      	b.n	801100c <tcp_rst+0x8c>
    return;
 801100a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801100c:	371c      	adds	r7, #28
 801100e:	46bd      	mov	sp, r7
 8011010:	bd90      	pop	{r4, r7, pc}
 8011012:	bf00      	nop
 8011014:	08017888 	.word	0x08017888
 8011018:	0801800c 	.word	0x0801800c
 801101c:	080178dc 	.word	0x080178dc
 8011020:	08018028 	.word	0x08018028

08011024 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011024:	b590      	push	{r4, r7, lr}
 8011026:	b087      	sub	sp, #28
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801102c:	2300      	movs	r3, #0
 801102e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011030:	2300      	movs	r3, #0
 8011032:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_send_empty_ack+0x24>
 801103a:	4b28      	ldr	r3, [pc, #160]	; (80110dc <tcp_send_empty_ack+0xb8>)
 801103c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011040:	4927      	ldr	r1, [pc, #156]	; (80110e0 <tcp_send_empty_ack+0xbc>)
 8011042:	4828      	ldr	r0, [pc, #160]	; (80110e4 <tcp_send_empty_ack+0xc0>)
 8011044:	f003 fac2 	bl	80145cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011048:	7dfb      	ldrb	r3, [r7, #23]
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	b2db      	uxtb	r3, r3
 801104e:	f003 0304 	and.w	r3, r3, #4
 8011052:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011054:	7d7b      	ldrb	r3, [r7, #21]
 8011056:	b29c      	uxth	r4, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801105c:	4618      	mov	r0, r3
 801105e:	f7f8 fa9e 	bl	800959e <lwip_htonl>
 8011062:	4603      	mov	r3, r0
 8011064:	2200      	movs	r2, #0
 8011066:	4621      	mov	r1, r4
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff fec1 	bl	8010df0 <tcp_output_alloc_header>
 801106e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d109      	bne.n	801108a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	8b5b      	ldrh	r3, [r3, #26]
 801107a:	f043 0303 	orr.w	r3, r3, #3
 801107e:	b29a      	uxth	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011084:	f06f 0301 	mvn.w	r3, #1
 8011088:	e023      	b.n	80110d2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801108a:	7dbb      	ldrb	r3, [r7, #22]
 801108c:	7dfa      	ldrb	r2, [r7, #23]
 801108e:	6939      	ldr	r1, [r7, #16]
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f7ff feeb 	bl	8010e6c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	3304      	adds	r3, #4
 801109c:	6939      	ldr	r1, [r7, #16]
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7ff ff24 	bl	8010eec <tcp_output_control_segment>
 80110a4:	4603      	mov	r3, r0
 80110a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80110a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d007      	beq.n	80110c0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	8b5b      	ldrh	r3, [r3, #26]
 80110b4:	f043 0303 	orr.w	r3, r3, #3
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	835a      	strh	r2, [r3, #26]
 80110be:	e006      	b.n	80110ce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	8b5b      	ldrh	r3, [r3, #26]
 80110c4:	f023 0303 	bic.w	r3, r3, #3
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80110ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	371c      	adds	r7, #28
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd90      	pop	{r4, r7, pc}
 80110da:	bf00      	nop
 80110dc:	08017888 	.word	0x08017888
 80110e0:	08018044 	.word	0x08018044
 80110e4:	080178dc 	.word	0x080178dc

080110e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80110e8:	b590      	push	{r4, r7, lr}
 80110ea:	b087      	sub	sp, #28
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80110f0:	2300      	movs	r3, #0
 80110f2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d106      	bne.n	8011108 <tcp_keepalive+0x20>
 80110fa:	4b18      	ldr	r3, [pc, #96]	; (801115c <tcp_keepalive+0x74>)
 80110fc:	f640 0224 	movw	r2, #2084	; 0x824
 8011100:	4917      	ldr	r1, [pc, #92]	; (8011160 <tcp_keepalive+0x78>)
 8011102:	4818      	ldr	r0, [pc, #96]	; (8011164 <tcp_keepalive+0x7c>)
 8011104:	f003 fa62 	bl	80145cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011108:	7dfb      	ldrb	r3, [r7, #23]
 801110a:	b29c      	uxth	r4, r3
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011110:	3b01      	subs	r3, #1
 8011112:	4618      	mov	r0, r3
 8011114:	f7f8 fa43 	bl	800959e <lwip_htonl>
 8011118:	4603      	mov	r3, r0
 801111a:	2200      	movs	r2, #0
 801111c:	4621      	mov	r1, r4
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7ff fe66 	bl	8010df0 <tcp_output_alloc_header>
 8011124:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d102      	bne.n	8011132 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801112c:	f04f 33ff 	mov.w	r3, #4294967295
 8011130:	e010      	b.n	8011154 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011132:	7dfb      	ldrb	r3, [r7, #23]
 8011134:	2200      	movs	r2, #0
 8011136:	6939      	ldr	r1, [r7, #16]
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f7ff fe97 	bl	8010e6c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	3304      	adds	r3, #4
 8011144:	6939      	ldr	r1, [r7, #16]
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f7ff fed0 	bl	8010eec <tcp_output_control_segment>
 801114c:	4603      	mov	r3, r0
 801114e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011154:	4618      	mov	r0, r3
 8011156:	371c      	adds	r7, #28
 8011158:	46bd      	mov	sp, r7
 801115a:	bd90      	pop	{r4, r7, pc}
 801115c:	08017888 	.word	0x08017888
 8011160:	08018064 	.word	0x08018064
 8011164:	080178dc 	.word	0x080178dc

08011168 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011168:	b590      	push	{r4, r7, lr}
 801116a:	b08b      	sub	sp, #44	; 0x2c
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011170:	2300      	movs	r3, #0
 8011172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d106      	bne.n	801118a <tcp_zero_window_probe+0x22>
 801117c:	4b4c      	ldr	r3, [pc, #304]	; (80112b0 <tcp_zero_window_probe+0x148>)
 801117e:	f640 024f 	movw	r2, #2127	; 0x84f
 8011182:	494c      	ldr	r1, [pc, #304]	; (80112b4 <tcp_zero_window_probe+0x14c>)
 8011184:	484c      	ldr	r0, [pc, #304]	; (80112b8 <tcp_zero_window_probe+0x150>)
 8011186:	f003 fa21 	bl	80145cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801118e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011190:	6a3b      	ldr	r3, [r7, #32]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d101      	bne.n	801119a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011196:	2300      	movs	r3, #0
 8011198:	e086      	b.n	80112a8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80111a0:	2bff      	cmp	r3, #255	; 0xff
 80111a2:	d007      	beq.n	80111b4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80111aa:	3301      	adds	r3, #1
 80111ac:	b2da      	uxtb	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	899b      	ldrh	r3, [r3, #12]
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	4618      	mov	r0, r3
 80111be:	f7f8 f9d9 	bl	8009574 <lwip_htons>
 80111c2:	4603      	mov	r3, r0
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	f003 0301 	and.w	r3, r3, #1
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d005      	beq.n	80111da <tcp_zero_window_probe+0x72>
 80111ce:	6a3b      	ldr	r3, [r7, #32]
 80111d0:	891b      	ldrh	r3, [r3, #8]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d101      	bne.n	80111da <tcp_zero_window_probe+0x72>
 80111d6:	2301      	movs	r3, #1
 80111d8:	e000      	b.n	80111dc <tcp_zero_window_probe+0x74>
 80111da:	2300      	movs	r3, #0
 80111dc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80111de:	7ffb      	ldrb	r3, [r7, #31]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	bf0c      	ite	eq
 80111e4:	2301      	moveq	r3, #1
 80111e6:	2300      	movne	r3, #0
 80111e8:	b2db      	uxtb	r3, r3
 80111ea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80111ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f0:	b299      	uxth	r1, r3
 80111f2:	6a3b      	ldr	r3, [r7, #32]
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	8bba      	ldrh	r2, [r7, #28]
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7ff fdf8 	bl	8010df0 <tcp_output_alloc_header>
 8011200:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d102      	bne.n	801120e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011208:	f04f 33ff 	mov.w	r3, #4294967295
 801120c:	e04c      	b.n	80112a8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011214:	7ffb      	ldrb	r3, [r7, #31]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d011      	beq.n	801123e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	899b      	ldrh	r3, [r3, #12]
 801121e:	b29b      	uxth	r3, r3
 8011220:	b21b      	sxth	r3, r3
 8011222:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011226:	b21c      	sxth	r4, r3
 8011228:	2011      	movs	r0, #17
 801122a:	f7f8 f9a3 	bl	8009574 <lwip_htons>
 801122e:	4603      	mov	r3, r0
 8011230:	b21b      	sxth	r3, r3
 8011232:	4323      	orrs	r3, r4
 8011234:	b21b      	sxth	r3, r3
 8011236:	b29a      	uxth	r2, r3
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	819a      	strh	r2, [r3, #12]
 801123c:	e010      	b.n	8011260 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	3314      	adds	r3, #20
 8011244:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011246:	6a3b      	ldr	r3, [r7, #32]
 8011248:	6858      	ldr	r0, [r3, #4]
 801124a:	6a3b      	ldr	r3, [r7, #32]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	891a      	ldrh	r2, [r3, #8]
 8011250:	6a3b      	ldr	r3, [r7, #32]
 8011252:	891b      	ldrh	r3, [r3, #8]
 8011254:	1ad3      	subs	r3, r2, r3
 8011256:	b29b      	uxth	r3, r3
 8011258:	2201      	movs	r2, #1
 801125a:	6939      	ldr	r1, [r7, #16]
 801125c:	f7f9 ff2c 	bl	800b0b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011260:	6a3b      	ldr	r3, [r7, #32]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	4618      	mov	r0, r3
 8011268:	f7f8 f999 	bl	800959e <lwip_htonl>
 801126c:	4603      	mov	r3, r0
 801126e:	3301      	adds	r3, #1
 8011270:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	2b00      	cmp	r3, #0
 801127c:	da02      	bge.n	8011284 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011288:	2200      	movs	r2, #0
 801128a:	69b9      	ldr	r1, [r7, #24]
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7ff fded 	bl	8010e6c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	3304      	adds	r3, #4
 8011298:	69b9      	ldr	r1, [r7, #24]
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7ff fe26 	bl	8010eec <tcp_output_control_segment>
 80112a0:	4603      	mov	r3, r0
 80112a2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80112a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	372c      	adds	r7, #44	; 0x2c
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd90      	pop	{r4, r7, pc}
 80112b0:	08017888 	.word	0x08017888
 80112b4:	08018080 	.word	0x08018080
 80112b8:	080178dc 	.word	0x080178dc

080112bc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80112c4:	f7f9 ffe6 	bl	800b294 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80112c8:	4b0a      	ldr	r3, [pc, #40]	; (80112f4 <tcpip_tcp_timer+0x38>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d103      	bne.n	80112d8 <tcpip_tcp_timer+0x1c>
 80112d0:	4b09      	ldr	r3, [pc, #36]	; (80112f8 <tcpip_tcp_timer+0x3c>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d005      	beq.n	80112e4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80112d8:	2200      	movs	r2, #0
 80112da:	4908      	ldr	r1, [pc, #32]	; (80112fc <tcpip_tcp_timer+0x40>)
 80112dc:	20fa      	movs	r0, #250	; 0xfa
 80112de:	f000 f8f3 	bl	80114c8 <sys_timeout>
 80112e2:	e003      	b.n	80112ec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80112e4:	4b06      	ldr	r3, [pc, #24]	; (8011300 <tcpip_tcp_timer+0x44>)
 80112e6:	2200      	movs	r2, #0
 80112e8:	601a      	str	r2, [r3, #0]
  }
}
 80112ea:	bf00      	nop
 80112ec:	bf00      	nop
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}
 80112f4:	2000aac8 	.word	0x2000aac8
 80112f8:	2000aad8 	.word	0x2000aad8
 80112fc:	080112bd 	.word	0x080112bd
 8011300:	200040d8 	.word	0x200040d8

08011304 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011308:	4b0a      	ldr	r3, [pc, #40]	; (8011334 <tcp_timer_needed+0x30>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d10f      	bne.n	8011330 <tcp_timer_needed+0x2c>
 8011310:	4b09      	ldr	r3, [pc, #36]	; (8011338 <tcp_timer_needed+0x34>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d103      	bne.n	8011320 <tcp_timer_needed+0x1c>
 8011318:	4b08      	ldr	r3, [pc, #32]	; (801133c <tcp_timer_needed+0x38>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d007      	beq.n	8011330 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011320:	4b04      	ldr	r3, [pc, #16]	; (8011334 <tcp_timer_needed+0x30>)
 8011322:	2201      	movs	r2, #1
 8011324:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011326:	2200      	movs	r2, #0
 8011328:	4905      	ldr	r1, [pc, #20]	; (8011340 <tcp_timer_needed+0x3c>)
 801132a:	20fa      	movs	r0, #250	; 0xfa
 801132c:	f000 f8cc 	bl	80114c8 <sys_timeout>
  }
}
 8011330:	bf00      	nop
 8011332:	bd80      	pop	{r7, pc}
 8011334:	200040d8 	.word	0x200040d8
 8011338:	2000aac8 	.word	0x2000aac8
 801133c:	2000aad8 	.word	0x2000aad8
 8011340:	080112bd 	.word	0x080112bd

08011344 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b086      	sub	sp, #24
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011350:	200a      	movs	r0, #10
 8011352:	f7f8 fdc5 	bl	8009ee0 <memp_malloc>
 8011356:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d109      	bne.n	8011372 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d151      	bne.n	8011408 <sys_timeout_abs+0xc4>
 8011364:	4b2a      	ldr	r3, [pc, #168]	; (8011410 <sys_timeout_abs+0xcc>)
 8011366:	22be      	movs	r2, #190	; 0xbe
 8011368:	492a      	ldr	r1, [pc, #168]	; (8011414 <sys_timeout_abs+0xd0>)
 801136a:	482b      	ldr	r0, [pc, #172]	; (8011418 <sys_timeout_abs+0xd4>)
 801136c:	f003 f92e 	bl	80145cc <iprintf>
    return;
 8011370:	e04a      	b.n	8011408 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	2200      	movs	r2, #0
 8011376:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	68ba      	ldr	r2, [r7, #8]
 801137c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801138a:	4b24      	ldr	r3, [pc, #144]	; (801141c <sys_timeout_abs+0xd8>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d103      	bne.n	801139a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011392:	4a22      	ldr	r2, [pc, #136]	; (801141c <sys_timeout_abs+0xd8>)
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	6013      	str	r3, [r2, #0]
    return;
 8011398:	e037      	b.n	801140a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	685a      	ldr	r2, [r3, #4]
 801139e:	4b1f      	ldr	r3, [pc, #124]	; (801141c <sys_timeout_abs+0xd8>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	1ad3      	subs	r3, r2, r3
 80113a6:	0fdb      	lsrs	r3, r3, #31
 80113a8:	f003 0301 	and.w	r3, r3, #1
 80113ac:	b2db      	uxtb	r3, r3
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d007      	beq.n	80113c2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80113b2:	4b1a      	ldr	r3, [pc, #104]	; (801141c <sys_timeout_abs+0xd8>)
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80113ba:	4a18      	ldr	r2, [pc, #96]	; (801141c <sys_timeout_abs+0xd8>)
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	6013      	str	r3, [r2, #0]
 80113c0:	e023      	b.n	801140a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80113c2:	4b16      	ldr	r3, [pc, #88]	; (801141c <sys_timeout_abs+0xd8>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	617b      	str	r3, [r7, #20]
 80113c8:	e01a      	b.n	8011400 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00b      	beq.n	80113ea <sys_timeout_abs+0xa6>
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	685a      	ldr	r2, [r3, #4]
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	1ad3      	subs	r3, r2, r3
 80113de:	0fdb      	lsrs	r3, r3, #31
 80113e0:	f003 0301 	and.w	r3, r3, #1
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d007      	beq.n	80113fa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	693a      	ldr	r2, [r7, #16]
 80113f6:	601a      	str	r2, [r3, #0]
        break;
 80113f8:	e007      	b.n	801140a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	617b      	str	r3, [r7, #20]
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d1e1      	bne.n	80113ca <sys_timeout_abs+0x86>
 8011406:	e000      	b.n	801140a <sys_timeout_abs+0xc6>
    return;
 8011408:	bf00      	nop
      }
    }
  }
}
 801140a:	3718      	adds	r7, #24
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	080180a4 	.word	0x080180a4
 8011414:	080180d8 	.word	0x080180d8
 8011418:	08018118 	.word	0x08018118
 801141c:	200040d0 	.word	0x200040d0

08011420 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b086      	sub	sp, #24
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	4798      	blx	r3

  now = sys_now();
 8011432:	f7f2 fc95 	bl	8003d60 <sys_now>
 8011436:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	4b0f      	ldr	r3, [pc, #60]	; (801147c <lwip_cyclic_timer+0x5c>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4413      	add	r3, r2
 8011442:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	1ad3      	subs	r3, r2, r3
 801144a:	0fdb      	lsrs	r3, r3, #31
 801144c:	f003 0301 	and.w	r3, r3, #1
 8011450:	b2db      	uxtb	r3, r3
 8011452:	2b00      	cmp	r3, #0
 8011454:	d009      	beq.n	801146a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	4413      	add	r3, r2
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	4907      	ldr	r1, [pc, #28]	; (8011480 <lwip_cyclic_timer+0x60>)
 8011462:	4618      	mov	r0, r3
 8011464:	f7ff ff6e 	bl	8011344 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011468:	e004      	b.n	8011474 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	4904      	ldr	r1, [pc, #16]	; (8011480 <lwip_cyclic_timer+0x60>)
 801146e:	68f8      	ldr	r0, [r7, #12]
 8011470:	f7ff ff68 	bl	8011344 <sys_timeout_abs>
}
 8011474:	bf00      	nop
 8011476:	3718      	adds	r7, #24
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	200040d4 	.word	0x200040d4
 8011480:	08011421 	.word	0x08011421

08011484 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801148a:	2301      	movs	r3, #1
 801148c:	607b      	str	r3, [r7, #4]
 801148e:	e00e      	b.n	80114ae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011490:	4a0b      	ldr	r2, [pc, #44]	; (80114c0 <sys_timeouts_init+0x3c>)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	00db      	lsls	r3, r3, #3
 801149c:	4a08      	ldr	r2, [pc, #32]	; (80114c0 <sys_timeouts_init+0x3c>)
 801149e:	4413      	add	r3, r2
 80114a0:	461a      	mov	r2, r3
 80114a2:	4908      	ldr	r1, [pc, #32]	; (80114c4 <sys_timeouts_init+0x40>)
 80114a4:	f000 f810 	bl	80114c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	3301      	adds	r3, #1
 80114ac:	607b      	str	r3, [r7, #4]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d9ed      	bls.n	8011490 <sys_timeouts_init+0xc>
  }
}
 80114b4:	bf00      	nop
 80114b6:	bf00      	nop
 80114b8:	3708      	adds	r7, #8
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	08018cc8 	.word	0x08018cc8
 80114c4:	08011421 	.word	0x08011421

080114c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b086      	sub	sp, #24
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80114da:	d306      	bcc.n	80114ea <sys_timeout+0x22>
 80114dc:	4b0a      	ldr	r3, [pc, #40]	; (8011508 <sys_timeout+0x40>)
 80114de:	f240 1229 	movw	r2, #297	; 0x129
 80114e2:	490a      	ldr	r1, [pc, #40]	; (801150c <sys_timeout+0x44>)
 80114e4:	480a      	ldr	r0, [pc, #40]	; (8011510 <sys_timeout+0x48>)
 80114e6:	f003 f871 	bl	80145cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80114ea:	f7f2 fc39 	bl	8003d60 <sys_now>
 80114ee:	4602      	mov	r2, r0
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4413      	add	r3, r2
 80114f4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	68b9      	ldr	r1, [r7, #8]
 80114fa:	6978      	ldr	r0, [r7, #20]
 80114fc:	f7ff ff22 	bl	8011344 <sys_timeout_abs>
#endif
}
 8011500:	bf00      	nop
 8011502:	3718      	adds	r7, #24
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	080180a4 	.word	0x080180a4
 801150c:	08018140 	.word	0x08018140
 8011510:	08018118 	.word	0x08018118

08011514 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801151a:	f7f2 fc21 	bl	8003d60 <sys_now>
 801151e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011520:	4b17      	ldr	r3, [pc, #92]	; (8011580 <sys_check_timeouts+0x6c>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d022      	beq.n	8011572 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	68fa      	ldr	r2, [r7, #12]
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	0fdb      	lsrs	r3, r3, #31
 8011536:	f003 0301 	and.w	r3, r3, #1
 801153a:	b2db      	uxtb	r3, r3
 801153c:	2b00      	cmp	r3, #0
 801153e:	d11a      	bne.n	8011576 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4a0e      	ldr	r2, [pc, #56]	; (8011580 <sys_check_timeouts+0x6c>)
 8011546:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	68db      	ldr	r3, [r3, #12]
 8011552:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	4a0a      	ldr	r2, [pc, #40]	; (8011584 <sys_check_timeouts+0x70>)
 801155a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801155c:	68b9      	ldr	r1, [r7, #8]
 801155e:	200a      	movs	r0, #10
 8011560:	f7f8 fd10 	bl	8009f84 <memp_free>
    if (handler != NULL) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d0da      	beq.n	8011520 <sys_check_timeouts+0xc>
      handler(arg);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6838      	ldr	r0, [r7, #0]
 801156e:	4798      	blx	r3
  do {
 8011570:	e7d6      	b.n	8011520 <sys_check_timeouts+0xc>
      return;
 8011572:	bf00      	nop
 8011574:	e000      	b.n	8011578 <sys_check_timeouts+0x64>
      return;
 8011576:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011578:	3710      	adds	r7, #16
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	200040d0 	.word	0x200040d0
 8011584:	200040d4 	.word	0x200040d4

08011588 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801158e:	4b16      	ldr	r3, [pc, #88]	; (80115e8 <sys_timeouts_sleeptime+0x60>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d102      	bne.n	801159c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011596:	f04f 33ff 	mov.w	r3, #4294967295
 801159a:	e020      	b.n	80115de <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801159c:	f7f2 fbe0 	bl	8003d60 <sys_now>
 80115a0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80115a2:	4b11      	ldr	r3, [pc, #68]	; (80115e8 <sys_timeouts_sleeptime+0x60>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	685a      	ldr	r2, [r3, #4]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	1ad3      	subs	r3, r2, r3
 80115ac:	0fdb      	lsrs	r3, r3, #31
 80115ae:	f003 0301 	and.w	r3, r3, #1
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d001      	beq.n	80115bc <sys_timeouts_sleeptime+0x34>
    return 0;
 80115b8:	2300      	movs	r3, #0
 80115ba:	e010      	b.n	80115de <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80115bc:	4b0a      	ldr	r3, [pc, #40]	; (80115e8 <sys_timeouts_sleeptime+0x60>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	685a      	ldr	r2, [r3, #4]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	da06      	bge.n	80115dc <sys_timeouts_sleeptime+0x54>
 80115ce:	4b07      	ldr	r3, [pc, #28]	; (80115ec <sys_timeouts_sleeptime+0x64>)
 80115d0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80115d4:	4906      	ldr	r1, [pc, #24]	; (80115f0 <sys_timeouts_sleeptime+0x68>)
 80115d6:	4807      	ldr	r0, [pc, #28]	; (80115f4 <sys_timeouts_sleeptime+0x6c>)
 80115d8:	f002 fff8 	bl	80145cc <iprintf>
    return ret;
 80115dc:	683b      	ldr	r3, [r7, #0]
  }
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3708      	adds	r7, #8
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	200040d0 	.word	0x200040d0
 80115ec:	080180a4 	.word	0x080180a4
 80115f0:	08018178 	.word	0x08018178
 80115f4:	08018118 	.word	0x08018118

080115f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80115fc:	f002 fffe 	bl	80145fc <rand>
 8011600:	4603      	mov	r3, r0
 8011602:	b29b      	uxth	r3, r3
 8011604:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011608:	b29b      	uxth	r3, r3
 801160a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801160e:	b29a      	uxth	r2, r3
 8011610:	4b01      	ldr	r3, [pc, #4]	; (8011618 <udp_init+0x20>)
 8011612:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011614:	bf00      	nop
 8011616:	bd80      	pop	{r7, pc}
 8011618:	20000018 	.word	0x20000018

0801161c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801161c:	b480      	push	{r7}
 801161e:	b083      	sub	sp, #12
 8011620:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011622:	2300      	movs	r3, #0
 8011624:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011626:	4b17      	ldr	r3, [pc, #92]	; (8011684 <udp_new_port+0x68>)
 8011628:	881b      	ldrh	r3, [r3, #0]
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	b291      	uxth	r1, r2
 801162e:	4a15      	ldr	r2, [pc, #84]	; (8011684 <udp_new_port+0x68>)
 8011630:	8011      	strh	r1, [r2, #0]
 8011632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011636:	4293      	cmp	r3, r2
 8011638:	d103      	bne.n	8011642 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801163a:	4b12      	ldr	r3, [pc, #72]	; (8011684 <udp_new_port+0x68>)
 801163c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011640:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011642:	4b11      	ldr	r3, [pc, #68]	; (8011688 <udp_new_port+0x6c>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	603b      	str	r3, [r7, #0]
 8011648:	e011      	b.n	801166e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	8a5a      	ldrh	r2, [r3, #18]
 801164e:	4b0d      	ldr	r3, [pc, #52]	; (8011684 <udp_new_port+0x68>)
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	429a      	cmp	r2, r3
 8011654:	d108      	bne.n	8011668 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011656:	88fb      	ldrh	r3, [r7, #6]
 8011658:	3301      	adds	r3, #1
 801165a:	80fb      	strh	r3, [r7, #6]
 801165c:	88fb      	ldrh	r3, [r7, #6]
 801165e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011662:	d3e0      	bcc.n	8011626 <udp_new_port+0xa>
        return 0;
 8011664:	2300      	movs	r3, #0
 8011666:	e007      	b.n	8011678 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	603b      	str	r3, [r7, #0]
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d1ea      	bne.n	801164a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011674:	4b03      	ldr	r3, [pc, #12]	; (8011684 <udp_new_port+0x68>)
 8011676:	881b      	ldrh	r3, [r3, #0]
}
 8011678:	4618      	mov	r0, r3
 801167a:	370c      	adds	r7, #12
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr
 8011684:	20000018 	.word	0x20000018
 8011688:	2000aae0 	.word	0x2000aae0

0801168c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	4613      	mov	r3, r2
 8011698:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d105      	bne.n	80116ac <udp_input_local_match+0x20>
 80116a0:	4b27      	ldr	r3, [pc, #156]	; (8011740 <udp_input_local_match+0xb4>)
 80116a2:	2287      	movs	r2, #135	; 0x87
 80116a4:	4927      	ldr	r1, [pc, #156]	; (8011744 <udp_input_local_match+0xb8>)
 80116a6:	4828      	ldr	r0, [pc, #160]	; (8011748 <udp_input_local_match+0xbc>)
 80116a8:	f002 ff90 	bl	80145cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d105      	bne.n	80116be <udp_input_local_match+0x32>
 80116b2:	4b23      	ldr	r3, [pc, #140]	; (8011740 <udp_input_local_match+0xb4>)
 80116b4:	2288      	movs	r2, #136	; 0x88
 80116b6:	4925      	ldr	r1, [pc, #148]	; (801174c <udp_input_local_match+0xc0>)
 80116b8:	4823      	ldr	r0, [pc, #140]	; (8011748 <udp_input_local_match+0xbc>)
 80116ba:	f002 ff87 	bl	80145cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	7a1b      	ldrb	r3, [r3, #8]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00b      	beq.n	80116de <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	7a1a      	ldrb	r2, [r3, #8]
 80116ca:	4b21      	ldr	r3, [pc, #132]	; (8011750 <udp_input_local_match+0xc4>)
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116d2:	3301      	adds	r3, #1
 80116d4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116d6:	429a      	cmp	r2, r3
 80116d8:	d001      	beq.n	80116de <udp_input_local_match+0x52>
    return 0;
 80116da:	2300      	movs	r3, #0
 80116dc:	e02b      	b.n	8011736 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80116de:	79fb      	ldrb	r3, [r7, #7]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d018      	beq.n	8011716 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d013      	beq.n	8011712 <udp_input_local_match+0x86>
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00f      	beq.n	8011712 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80116f2:	4b17      	ldr	r3, [pc, #92]	; (8011750 <udp_input_local_match+0xc4>)
 80116f4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80116f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fa:	d00a      	beq.n	8011712 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	4b13      	ldr	r3, [pc, #76]	; (8011750 <udp_input_local_match+0xc4>)
 8011702:	695b      	ldr	r3, [r3, #20]
 8011704:	405a      	eors	r2, r3
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	3308      	adds	r3, #8
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801170e:	2b00      	cmp	r3, #0
 8011710:	d110      	bne.n	8011734 <udp_input_local_match+0xa8>
          return 1;
 8011712:	2301      	movs	r3, #1
 8011714:	e00f      	b.n	8011736 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d009      	beq.n	8011730 <udp_input_local_match+0xa4>
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d005      	beq.n	8011730 <udp_input_local_match+0xa4>
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	4b09      	ldr	r3, [pc, #36]	; (8011750 <udp_input_local_match+0xc4>)
 801172a:	695b      	ldr	r3, [r3, #20]
 801172c:	429a      	cmp	r2, r3
 801172e:	d101      	bne.n	8011734 <udp_input_local_match+0xa8>
        return 1;
 8011730:	2301      	movs	r3, #1
 8011732:	e000      	b.n	8011736 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	0801818c 	.word	0x0801818c
 8011744:	080181bc 	.word	0x080181bc
 8011748:	080181e0 	.word	0x080181e0
 801174c:	08018208 	.word	0x08018208
 8011750:	200073b4 	.word	0x200073b4

08011754 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011754:	b590      	push	{r4, r7, lr}
 8011756:	b08d      	sub	sp, #52	; 0x34
 8011758:	af02      	add	r7, sp, #8
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801175e:	2300      	movs	r3, #0
 8011760:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d105      	bne.n	8011774 <udp_input+0x20>
 8011768:	4b7c      	ldr	r3, [pc, #496]	; (801195c <udp_input+0x208>)
 801176a:	22cf      	movs	r2, #207	; 0xcf
 801176c:	497c      	ldr	r1, [pc, #496]	; (8011960 <udp_input+0x20c>)
 801176e:	487d      	ldr	r0, [pc, #500]	; (8011964 <udp_input+0x210>)
 8011770:	f002 ff2c 	bl	80145cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d105      	bne.n	8011786 <udp_input+0x32>
 801177a:	4b78      	ldr	r3, [pc, #480]	; (801195c <udp_input+0x208>)
 801177c:	22d0      	movs	r2, #208	; 0xd0
 801177e:	497a      	ldr	r1, [pc, #488]	; (8011968 <udp_input+0x214>)
 8011780:	4878      	ldr	r0, [pc, #480]	; (8011964 <udp_input+0x210>)
 8011782:	f002 ff23 	bl	80145cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	895b      	ldrh	r3, [r3, #10]
 801178a:	2b07      	cmp	r3, #7
 801178c:	d803      	bhi.n	8011796 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f7f9 fa9c 	bl	800accc <pbuf_free>
    goto end;
 8011794:	e0de      	b.n	8011954 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801179c:	4b73      	ldr	r3, [pc, #460]	; (801196c <udp_input+0x218>)
 801179e:	695b      	ldr	r3, [r3, #20]
 80117a0:	4a72      	ldr	r2, [pc, #456]	; (801196c <udp_input+0x218>)
 80117a2:	6812      	ldr	r2, [r2, #0]
 80117a4:	4611      	mov	r1, r2
 80117a6:	4618      	mov	r0, r3
 80117a8:	f001 fd96 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 80117ac:	4603      	mov	r3, r0
 80117ae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	881b      	ldrh	r3, [r3, #0]
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7f7 fedc 	bl	8009574 <lwip_htons>
 80117bc:	4603      	mov	r3, r0
 80117be:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	885b      	ldrh	r3, [r3, #2]
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7f7 fed4 	bl	8009574 <lwip_htons>
 80117cc:	4603      	mov	r3, r0
 80117ce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80117d0:	2300      	movs	r3, #0
 80117d2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80117d4:	2300      	movs	r3, #0
 80117d6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80117d8:	2300      	movs	r3, #0
 80117da:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117dc:	4b64      	ldr	r3, [pc, #400]	; (8011970 <udp_input+0x21c>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	627b      	str	r3, [r7, #36]	; 0x24
 80117e2:	e054      	b.n	801188e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80117e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e6:	8a5b      	ldrh	r3, [r3, #18]
 80117e8:	89fa      	ldrh	r2, [r7, #14]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d14a      	bne.n	8011884 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80117ee:	7cfb      	ldrb	r3, [r7, #19]
 80117f0:	461a      	mov	r2, r3
 80117f2:	6839      	ldr	r1, [r7, #0]
 80117f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117f6:	f7ff ff49 	bl	801168c <udp_input_local_match>
 80117fa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d041      	beq.n	8011884 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011802:	7c1b      	ldrb	r3, [r3, #16]
 8011804:	f003 0304 	and.w	r3, r3, #4
 8011808:	2b00      	cmp	r3, #0
 801180a:	d11d      	bne.n	8011848 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d102      	bne.n	8011818 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011814:	61fb      	str	r3, [r7, #28]
 8011816:	e017      	b.n	8011848 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011818:	7cfb      	ldrb	r3, [r7, #19]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d014      	beq.n	8011848 <udp_input+0xf4>
 801181e:	4b53      	ldr	r3, [pc, #332]	; (801196c <udp_input+0x218>)
 8011820:	695b      	ldr	r3, [r3, #20]
 8011822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011826:	d10f      	bne.n	8011848 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	3304      	adds	r3, #4
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	429a      	cmp	r2, r3
 8011834:	d008      	beq.n	8011848 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	3304      	adds	r3, #4
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	429a      	cmp	r2, r3
 8011842:	d101      	bne.n	8011848 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184a:	8a9b      	ldrh	r3, [r3, #20]
 801184c:	8a3a      	ldrh	r2, [r7, #16]
 801184e:	429a      	cmp	r2, r3
 8011850:	d118      	bne.n	8011884 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011854:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011856:	2b00      	cmp	r3, #0
 8011858:	d005      	beq.n	8011866 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185c:	685a      	ldr	r2, [r3, #4]
 801185e:	4b43      	ldr	r3, [pc, #268]	; (801196c <udp_input+0x218>)
 8011860:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011862:	429a      	cmp	r2, r3
 8011864:	d10e      	bne.n	8011884 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011866:	6a3b      	ldr	r3, [r7, #32]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d014      	beq.n	8011896 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	68da      	ldr	r2, [r3, #12]
 8011870:	6a3b      	ldr	r3, [r7, #32]
 8011872:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011874:	4b3e      	ldr	r3, [pc, #248]	; (8011970 <udp_input+0x21c>)
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801187c:	4a3c      	ldr	r2, [pc, #240]	; (8011970 <udp_input+0x21c>)
 801187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011880:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011882:	e008      	b.n	8011896 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011886:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	627b      	str	r3, [r7, #36]	; 0x24
 801188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1a7      	bne.n	80117e4 <udp_input+0x90>
 8011894:	e000      	b.n	8011898 <udp_input+0x144>
        break;
 8011896:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189a:	2b00      	cmp	r3, #0
 801189c:	d101      	bne.n	80118a2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80118a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d002      	beq.n	80118ae <udp_input+0x15a>
    for_us = 1;
 80118a8:	2301      	movs	r3, #1
 80118aa:	76fb      	strb	r3, [r7, #27]
 80118ac:	e00a      	b.n	80118c4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	3304      	adds	r3, #4
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	4b2d      	ldr	r3, [pc, #180]	; (801196c <udp_input+0x218>)
 80118b6:	695b      	ldr	r3, [r3, #20]
 80118b8:	429a      	cmp	r2, r3
 80118ba:	bf0c      	ite	eq
 80118bc:	2301      	moveq	r3, #1
 80118be:	2300      	movne	r3, #0
 80118c0:	b2db      	uxtb	r3, r3
 80118c2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80118c4:	7efb      	ldrb	r3, [r7, #27]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d041      	beq.n	801194e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80118ca:	2108      	movs	r1, #8
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f7f9 f977 	bl	800abc0 <pbuf_remove_header>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00a      	beq.n	80118ee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80118d8:	4b20      	ldr	r3, [pc, #128]	; (801195c <udp_input+0x208>)
 80118da:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80118de:	4925      	ldr	r1, [pc, #148]	; (8011974 <udp_input+0x220>)
 80118e0:	4820      	ldr	r0, [pc, #128]	; (8011964 <udp_input+0x210>)
 80118e2:	f002 fe73 	bl	80145cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7f9 f9f0 	bl	800accc <pbuf_free>
      goto end;
 80118ec:	e032      	b.n	8011954 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80118ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d012      	beq.n	801191a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80118f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d00a      	beq.n	8011912 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80118fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fe:	699c      	ldr	r4, [r3, #24]
 8011900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011902:	69d8      	ldr	r0, [r3, #28]
 8011904:	8a3b      	ldrh	r3, [r7, #16]
 8011906:	9300      	str	r3, [sp, #0]
 8011908:	4b1b      	ldr	r3, [pc, #108]	; (8011978 <udp_input+0x224>)
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801190e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011910:	e021      	b.n	8011956 <udp_input+0x202>
        pbuf_free(p);
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f7f9 f9da 	bl	800accc <pbuf_free>
        goto end;
 8011918:	e01c      	b.n	8011954 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801191a:	7cfb      	ldrb	r3, [r7, #19]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d112      	bne.n	8011946 <udp_input+0x1f2>
 8011920:	4b12      	ldr	r3, [pc, #72]	; (801196c <udp_input+0x218>)
 8011922:	695b      	ldr	r3, [r3, #20]
 8011924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011928:	2be0      	cmp	r3, #224	; 0xe0
 801192a:	d00c      	beq.n	8011946 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801192c:	4b0f      	ldr	r3, [pc, #60]	; (801196c <udp_input+0x218>)
 801192e:	899b      	ldrh	r3, [r3, #12]
 8011930:	3308      	adds	r3, #8
 8011932:	b29b      	uxth	r3, r3
 8011934:	b21b      	sxth	r3, r3
 8011936:	4619      	mov	r1, r3
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7f9 f9b4 	bl	800aca6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801193e:	2103      	movs	r1, #3
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f001 f9a9 	bl	8012c98 <icmp_dest_unreach>
      pbuf_free(p);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f7f9 f9c0 	bl	800accc <pbuf_free>
  return;
 801194c:	e003      	b.n	8011956 <udp_input+0x202>
    pbuf_free(p);
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f7f9 f9bc 	bl	800accc <pbuf_free>
  return;
 8011954:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011956:	372c      	adds	r7, #44	; 0x2c
 8011958:	46bd      	mov	sp, r7
 801195a:	bd90      	pop	{r4, r7, pc}
 801195c:	0801818c 	.word	0x0801818c
 8011960:	08018230 	.word	0x08018230
 8011964:	080181e0 	.word	0x080181e0
 8011968:	08018248 	.word	0x08018248
 801196c:	200073b4 	.word	0x200073b4
 8011970:	2000aae0 	.word	0x2000aae0
 8011974:	08018264 	.word	0x08018264
 8011978:	200073c4 	.word	0x200073c4

0801197c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b086      	sub	sp, #24
 8011980:	af00      	add	r7, sp, #0
 8011982:	60f8      	str	r0, [r7, #12]
 8011984:	60b9      	str	r1, [r7, #8]
 8011986:	4613      	mov	r3, r2
 8011988:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d101      	bne.n	8011994 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011990:	4b39      	ldr	r3, [pc, #228]	; (8011a78 <udp_bind+0xfc>)
 8011992:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d109      	bne.n	80119ae <udp_bind+0x32>
 801199a:	4b38      	ldr	r3, [pc, #224]	; (8011a7c <udp_bind+0x100>)
 801199c:	f240 32b7 	movw	r2, #951	; 0x3b7
 80119a0:	4937      	ldr	r1, [pc, #220]	; (8011a80 <udp_bind+0x104>)
 80119a2:	4838      	ldr	r0, [pc, #224]	; (8011a84 <udp_bind+0x108>)
 80119a4:	f002 fe12 	bl	80145cc <iprintf>
 80119a8:	f06f 030f 	mvn.w	r3, #15
 80119ac:	e060      	b.n	8011a70 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80119ae:	2300      	movs	r3, #0
 80119b0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80119b2:	4b35      	ldr	r3, [pc, #212]	; (8011a88 <udp_bind+0x10c>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	617b      	str	r3, [r7, #20]
 80119b8:	e009      	b.n	80119ce <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80119ba:	68fa      	ldr	r2, [r7, #12]
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d102      	bne.n	80119c8 <udp_bind+0x4c>
      rebind = 1;
 80119c2:	2301      	movs	r3, #1
 80119c4:	74fb      	strb	r3, [r7, #19]
      break;
 80119c6:	e005      	b.n	80119d4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	617b      	str	r3, [r7, #20]
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d1f2      	bne.n	80119ba <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80119d4:	88fb      	ldrh	r3, [r7, #6]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d109      	bne.n	80119ee <udp_bind+0x72>
    port = udp_new_port();
 80119da:	f7ff fe1f 	bl	801161c <udp_new_port>
 80119de:	4603      	mov	r3, r0
 80119e0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80119e2:	88fb      	ldrh	r3, [r7, #6]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d12c      	bne.n	8011a42 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80119e8:	f06f 0307 	mvn.w	r3, #7
 80119ec:	e040      	b.n	8011a70 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80119ee:	4b26      	ldr	r3, [pc, #152]	; (8011a88 <udp_bind+0x10c>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	617b      	str	r3, [r7, #20]
 80119f4:	e022      	b.n	8011a3c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80119f6:	68fa      	ldr	r2, [r7, #12]
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d01b      	beq.n	8011a36 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	8a5b      	ldrh	r3, [r3, #18]
 8011a02:	88fa      	ldrh	r2, [r7, #6]
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d116      	bne.n	8011a36 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	681a      	ldr	r2, [r3, #0]
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d00d      	beq.n	8011a30 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011a14:	68bb      	ldr	r3, [r7, #8]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00a      	beq.n	8011a30 <udp_bind+0xb4>
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d006      	beq.n	8011a30 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011a22:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d003      	beq.n	8011a30 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d102      	bne.n	8011a36 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011a30:	f06f 0307 	mvn.w	r3, #7
 8011a34:	e01c      	b.n	8011a70 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	617b      	str	r3, [r7, #20]
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d1d9      	bne.n	80119f6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d002      	beq.n	8011a4e <udp_bind+0xd2>
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	e000      	b.n	8011a50 <udp_bind+0xd4>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	68fa      	ldr	r2, [r7, #12]
 8011a52:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	88fa      	ldrh	r2, [r7, #6]
 8011a58:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011a5a:	7cfb      	ldrb	r3, [r7, #19]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d106      	bne.n	8011a6e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011a60:	4b09      	ldr	r3, [pc, #36]	; (8011a88 <udp_bind+0x10c>)
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011a68:	4a07      	ldr	r2, [pc, #28]	; (8011a88 <udp_bind+0x10c>)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011a6e:	2300      	movs	r3, #0
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3718      	adds	r7, #24
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	08018ce0 	.word	0x08018ce0
 8011a7c:	0801818c 	.word	0x0801818c
 8011a80:	08018454 	.word	0x08018454
 8011a84:	080181e0 	.word	0x080181e0
 8011a88:	2000aae0 	.word	0x2000aae0

08011a8c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d107      	bne.n	8011aae <udp_recv+0x22>
 8011a9e:	4b08      	ldr	r3, [pc, #32]	; (8011ac0 <udp_recv+0x34>)
 8011aa0:	f240 428a 	movw	r2, #1162	; 0x48a
 8011aa4:	4907      	ldr	r1, [pc, #28]	; (8011ac4 <udp_recv+0x38>)
 8011aa6:	4808      	ldr	r0, [pc, #32]	; (8011ac8 <udp_recv+0x3c>)
 8011aa8:	f002 fd90 	bl	80145cc <iprintf>
 8011aac:	e005      	b.n	8011aba <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	68ba      	ldr	r2, [r7, #8]
 8011ab2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	61da      	str	r2, [r3, #28]
}
 8011aba:	3710      	adds	r7, #16
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	0801818c 	.word	0x0801818c
 8011ac4:	080184c0 	.word	0x080184c0
 8011ac8:	080181e0 	.word	0x080181e0

08011acc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d107      	bne.n	8011aea <udp_remove+0x1e>
 8011ada:	4b19      	ldr	r3, [pc, #100]	; (8011b40 <udp_remove+0x74>)
 8011adc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011ae0:	4918      	ldr	r1, [pc, #96]	; (8011b44 <udp_remove+0x78>)
 8011ae2:	4819      	ldr	r0, [pc, #100]	; (8011b48 <udp_remove+0x7c>)
 8011ae4:	f002 fd72 	bl	80145cc <iprintf>
 8011ae8:	e026      	b.n	8011b38 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011aea:	4b18      	ldr	r3, [pc, #96]	; (8011b4c <udp_remove+0x80>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d105      	bne.n	8011b00 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011af4:	4b15      	ldr	r3, [pc, #84]	; (8011b4c <udp_remove+0x80>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	4a14      	ldr	r2, [pc, #80]	; (8011b4c <udp_remove+0x80>)
 8011afc:	6013      	str	r3, [r2, #0]
 8011afe:	e017      	b.n	8011b30 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011b00:	4b12      	ldr	r3, [pc, #72]	; (8011b4c <udp_remove+0x80>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	60fb      	str	r3, [r7, #12]
 8011b06:	e010      	b.n	8011b2a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	68db      	ldr	r3, [r3, #12]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d009      	beq.n	8011b24 <udp_remove+0x58>
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d104      	bne.n	8011b24 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	68da      	ldr	r2, [r3, #12]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	60da      	str	r2, [r3, #12]
        break;
 8011b22:	e005      	b.n	8011b30 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	68db      	ldr	r3, [r3, #12]
 8011b28:	60fb      	str	r3, [r7, #12]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d1eb      	bne.n	8011b08 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011b30:	6879      	ldr	r1, [r7, #4]
 8011b32:	2000      	movs	r0, #0
 8011b34:	f7f8 fa26 	bl	8009f84 <memp_free>
}
 8011b38:	3710      	adds	r7, #16
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	0801818c 	.word	0x0801818c
 8011b44:	080184d8 	.word	0x080184d8
 8011b48:	080181e0 	.word	0x080181e0
 8011b4c:	2000aae0 	.word	0x2000aae0

08011b50 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011b56:	2000      	movs	r0, #0
 8011b58:	f7f8 f9c2 	bl	8009ee0 <memp_malloc>
 8011b5c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d007      	beq.n	8011b74 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011b64:	2220      	movs	r2, #32
 8011b66:	2100      	movs	r1, #0
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f002 fd27 	bl	80145bc <memset>
    pcb->ttl = UDP_TTL;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	22ff      	movs	r2, #255	; 0xff
 8011b72:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011b74:	687b      	ldr	r3, [r7, #4]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}

08011b7e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8011b7e:	b580      	push	{r7, lr}
 8011b80:	b084      	sub	sp, #16
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	4603      	mov	r3, r0
 8011b86:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8011b88:	f7ff ffe2 	bl	8011b50 <udp_new>
 8011b8c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3710      	adds	r7, #16
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d01e      	beq.n	8011be6 <udp_netif_ip_addr_changed+0x4e>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d01a      	beq.n	8011be6 <udp_netif_ip_addr_changed+0x4e>
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d017      	beq.n	8011be6 <udp_netif_ip_addr_changed+0x4e>
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d013      	beq.n	8011be6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011bbe:	4b0d      	ldr	r3, [pc, #52]	; (8011bf4 <udp_netif_ip_addr_changed+0x5c>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	60fb      	str	r3, [r7, #12]
 8011bc4:	e00c      	b.n	8011be0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d103      	bne.n	8011bda <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	68db      	ldr	r3, [r3, #12]
 8011bde:	60fb      	str	r3, [r7, #12]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1ef      	bne.n	8011bc6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011be6:	bf00      	nop
 8011be8:	3714      	adds	r7, #20
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	2000aae0 	.word	0x2000aae0

08011bf8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011c00:	4915      	ldr	r1, [pc, #84]	; (8011c58 <etharp_free_entry+0x60>)
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	4613      	mov	r3, r2
 8011c06:	005b      	lsls	r3, r3, #1
 8011c08:	4413      	add	r3, r2
 8011c0a:	00db      	lsls	r3, r3, #3
 8011c0c:	440b      	add	r3, r1
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d013      	beq.n	8011c3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011c14:	4910      	ldr	r1, [pc, #64]	; (8011c58 <etharp_free_entry+0x60>)
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	4613      	mov	r3, r2
 8011c1a:	005b      	lsls	r3, r3, #1
 8011c1c:	4413      	add	r3, r2
 8011c1e:	00db      	lsls	r3, r3, #3
 8011c20:	440b      	add	r3, r1
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7f9 f851 	bl	800accc <pbuf_free>
    arp_table[i].q = NULL;
 8011c2a:	490b      	ldr	r1, [pc, #44]	; (8011c58 <etharp_free_entry+0x60>)
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	4413      	add	r3, r2
 8011c34:	00db      	lsls	r3, r3, #3
 8011c36:	440b      	add	r3, r1
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011c3c:	4906      	ldr	r1, [pc, #24]	; (8011c58 <etharp_free_entry+0x60>)
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	4613      	mov	r3, r2
 8011c42:	005b      	lsls	r3, r3, #1
 8011c44:	4413      	add	r3, r2
 8011c46:	00db      	lsls	r3, r3, #3
 8011c48:	440b      	add	r3, r1
 8011c4a:	3314      	adds	r3, #20
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011c50:	bf00      	nop
 8011c52:	3708      	adds	r7, #8
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	200040dc 	.word	0x200040dc

08011c5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c62:	2300      	movs	r3, #0
 8011c64:	607b      	str	r3, [r7, #4]
 8011c66:	e096      	b.n	8011d96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011c68:	494f      	ldr	r1, [pc, #316]	; (8011da8 <etharp_tmr+0x14c>)
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	005b      	lsls	r3, r3, #1
 8011c70:	4413      	add	r3, r2
 8011c72:	00db      	lsls	r3, r3, #3
 8011c74:	440b      	add	r3, r1
 8011c76:	3314      	adds	r3, #20
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011c7c:	78fb      	ldrb	r3, [r7, #3]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f000 8086 	beq.w	8011d90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011c84:	4948      	ldr	r1, [pc, #288]	; (8011da8 <etharp_tmr+0x14c>)
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	4613      	mov	r3, r2
 8011c8a:	005b      	lsls	r3, r3, #1
 8011c8c:	4413      	add	r3, r2
 8011c8e:	00db      	lsls	r3, r3, #3
 8011c90:	440b      	add	r3, r1
 8011c92:	3312      	adds	r3, #18
 8011c94:	881b      	ldrh	r3, [r3, #0]
 8011c96:	3301      	adds	r3, #1
 8011c98:	b298      	uxth	r0, r3
 8011c9a:	4943      	ldr	r1, [pc, #268]	; (8011da8 <etharp_tmr+0x14c>)
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	005b      	lsls	r3, r3, #1
 8011ca2:	4413      	add	r3, r2
 8011ca4:	00db      	lsls	r3, r3, #3
 8011ca6:	440b      	add	r3, r1
 8011ca8:	3312      	adds	r3, #18
 8011caa:	4602      	mov	r2, r0
 8011cac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011cae:	493e      	ldr	r1, [pc, #248]	; (8011da8 <etharp_tmr+0x14c>)
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	005b      	lsls	r3, r3, #1
 8011cb6:	4413      	add	r3, r2
 8011cb8:	00db      	lsls	r3, r3, #3
 8011cba:	440b      	add	r3, r1
 8011cbc:	3312      	adds	r3, #18
 8011cbe:	881b      	ldrh	r3, [r3, #0]
 8011cc0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011cc4:	d215      	bcs.n	8011cf2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011cc6:	4938      	ldr	r1, [pc, #224]	; (8011da8 <etharp_tmr+0x14c>)
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	4613      	mov	r3, r2
 8011ccc:	005b      	lsls	r3, r3, #1
 8011cce:	4413      	add	r3, r2
 8011cd0:	00db      	lsls	r3, r3, #3
 8011cd2:	440b      	add	r3, r1
 8011cd4:	3314      	adds	r3, #20
 8011cd6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d10e      	bne.n	8011cfa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011cdc:	4932      	ldr	r1, [pc, #200]	; (8011da8 <etharp_tmr+0x14c>)
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	005b      	lsls	r3, r3, #1
 8011ce4:	4413      	add	r3, r2
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	440b      	add	r3, r1
 8011cea:	3312      	adds	r3, #18
 8011cec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011cee:	2b04      	cmp	r3, #4
 8011cf0:	d903      	bls.n	8011cfa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff ff80 	bl	8011bf8 <etharp_free_entry>
 8011cf8:	e04a      	b.n	8011d90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011cfa:	492b      	ldr	r1, [pc, #172]	; (8011da8 <etharp_tmr+0x14c>)
 8011cfc:	687a      	ldr	r2, [r7, #4]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	005b      	lsls	r3, r3, #1
 8011d02:	4413      	add	r3, r2
 8011d04:	00db      	lsls	r3, r3, #3
 8011d06:	440b      	add	r3, r1
 8011d08:	3314      	adds	r3, #20
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	2b03      	cmp	r3, #3
 8011d0e:	d10a      	bne.n	8011d26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011d10:	4925      	ldr	r1, [pc, #148]	; (8011da8 <etharp_tmr+0x14c>)
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	4613      	mov	r3, r2
 8011d16:	005b      	lsls	r3, r3, #1
 8011d18:	4413      	add	r3, r2
 8011d1a:	00db      	lsls	r3, r3, #3
 8011d1c:	440b      	add	r3, r1
 8011d1e:	3314      	adds	r3, #20
 8011d20:	2204      	movs	r2, #4
 8011d22:	701a      	strb	r2, [r3, #0]
 8011d24:	e034      	b.n	8011d90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011d26:	4920      	ldr	r1, [pc, #128]	; (8011da8 <etharp_tmr+0x14c>)
 8011d28:	687a      	ldr	r2, [r7, #4]
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	005b      	lsls	r3, r3, #1
 8011d2e:	4413      	add	r3, r2
 8011d30:	00db      	lsls	r3, r3, #3
 8011d32:	440b      	add	r3, r1
 8011d34:	3314      	adds	r3, #20
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	2b04      	cmp	r3, #4
 8011d3a:	d10a      	bne.n	8011d52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011d3c:	491a      	ldr	r1, [pc, #104]	; (8011da8 <etharp_tmr+0x14c>)
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	4613      	mov	r3, r2
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	4413      	add	r3, r2
 8011d46:	00db      	lsls	r3, r3, #3
 8011d48:	440b      	add	r3, r1
 8011d4a:	3314      	adds	r3, #20
 8011d4c:	2202      	movs	r2, #2
 8011d4e:	701a      	strb	r2, [r3, #0]
 8011d50:	e01e      	b.n	8011d90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011d52:	4915      	ldr	r1, [pc, #84]	; (8011da8 <etharp_tmr+0x14c>)
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	4613      	mov	r3, r2
 8011d58:	005b      	lsls	r3, r3, #1
 8011d5a:	4413      	add	r3, r2
 8011d5c:	00db      	lsls	r3, r3, #3
 8011d5e:	440b      	add	r3, r1
 8011d60:	3314      	adds	r3, #20
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d113      	bne.n	8011d90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011d68:	490f      	ldr	r1, [pc, #60]	; (8011da8 <etharp_tmr+0x14c>)
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	005b      	lsls	r3, r3, #1
 8011d70:	4413      	add	r3, r2
 8011d72:	00db      	lsls	r3, r3, #3
 8011d74:	440b      	add	r3, r1
 8011d76:	3308      	adds	r3, #8
 8011d78:	6818      	ldr	r0, [r3, #0]
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	4613      	mov	r3, r2
 8011d7e:	005b      	lsls	r3, r3, #1
 8011d80:	4413      	add	r3, r2
 8011d82:	00db      	lsls	r3, r3, #3
 8011d84:	4a08      	ldr	r2, [pc, #32]	; (8011da8 <etharp_tmr+0x14c>)
 8011d86:	4413      	add	r3, r2
 8011d88:	3304      	adds	r3, #4
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	f000 fe6e 	bl	8012a6c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	3301      	adds	r3, #1
 8011d94:	607b      	str	r3, [r7, #4]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2b09      	cmp	r3, #9
 8011d9a:	f77f af65 	ble.w	8011c68 <etharp_tmr+0xc>
      }
    }
  }
}
 8011d9e:	bf00      	nop
 8011da0:	bf00      	nop
 8011da2:	3708      	adds	r7, #8
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	200040dc 	.word	0x200040dc

08011dac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b08a      	sub	sp, #40	; 0x28
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	460b      	mov	r3, r1
 8011db6:	607a      	str	r2, [r7, #4]
 8011db8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011dba:	230a      	movs	r3, #10
 8011dbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011dbe:	230a      	movs	r3, #10
 8011dc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011dc2:	230a      	movs	r3, #10
 8011dc4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011dca:	230a      	movs	r3, #10
 8011dcc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	83bb      	strh	r3, [r7, #28]
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	837b      	strh	r3, [r7, #26]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011dda:	2300      	movs	r3, #0
 8011ddc:	843b      	strh	r3, [r7, #32]
 8011dde:	e0ae      	b.n	8011f3e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011de0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011de4:	49a6      	ldr	r1, [pc, #664]	; (8012080 <etharp_find_entry+0x2d4>)
 8011de6:	4613      	mov	r3, r2
 8011de8:	005b      	lsls	r3, r3, #1
 8011dea:	4413      	add	r3, r2
 8011dec:	00db      	lsls	r3, r3, #3
 8011dee:	440b      	add	r3, r1
 8011df0:	3314      	adds	r3, #20
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011df6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011dfa:	2b0a      	cmp	r3, #10
 8011dfc:	d105      	bne.n	8011e0a <etharp_find_entry+0x5e>
 8011dfe:	7dfb      	ldrb	r3, [r7, #23]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d102      	bne.n	8011e0a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011e04:	8c3b      	ldrh	r3, [r7, #32]
 8011e06:	847b      	strh	r3, [r7, #34]	; 0x22
 8011e08:	e095      	b.n	8011f36 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011e0a:	7dfb      	ldrb	r3, [r7, #23]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	f000 8092 	beq.w	8011f36 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011e12:	7dfb      	ldrb	r3, [r7, #23]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d009      	beq.n	8011e2c <etharp_find_entry+0x80>
 8011e18:	7dfb      	ldrb	r3, [r7, #23]
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	d806      	bhi.n	8011e2c <etharp_find_entry+0x80>
 8011e1e:	4b99      	ldr	r3, [pc, #612]	; (8012084 <etharp_find_entry+0x2d8>)
 8011e20:	f240 1223 	movw	r2, #291	; 0x123
 8011e24:	4998      	ldr	r1, [pc, #608]	; (8012088 <etharp_find_entry+0x2dc>)
 8011e26:	4899      	ldr	r0, [pc, #612]	; (801208c <etharp_find_entry+0x2e0>)
 8011e28:	f002 fbd0 	bl	80145cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d020      	beq.n	8011e74 <etharp_find_entry+0xc8>
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	6819      	ldr	r1, [r3, #0]
 8011e36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e3a:	4891      	ldr	r0, [pc, #580]	; (8012080 <etharp_find_entry+0x2d4>)
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	005b      	lsls	r3, r3, #1
 8011e40:	4413      	add	r3, r2
 8011e42:	00db      	lsls	r3, r3, #3
 8011e44:	4403      	add	r3, r0
 8011e46:	3304      	adds	r3, #4
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	4299      	cmp	r1, r3
 8011e4c:	d112      	bne.n	8011e74 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d00c      	beq.n	8011e6e <etharp_find_entry+0xc2>
 8011e54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e58:	4989      	ldr	r1, [pc, #548]	; (8012080 <etharp_find_entry+0x2d4>)
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	005b      	lsls	r3, r3, #1
 8011e5e:	4413      	add	r3, r2
 8011e60:	00db      	lsls	r3, r3, #3
 8011e62:	440b      	add	r3, r1
 8011e64:	3308      	adds	r3, #8
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d102      	bne.n	8011e74 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011e6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011e72:	e100      	b.n	8012076 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011e74:	7dfb      	ldrb	r3, [r7, #23]
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d140      	bne.n	8011efc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011e7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e7e:	4980      	ldr	r1, [pc, #512]	; (8012080 <etharp_find_entry+0x2d4>)
 8011e80:	4613      	mov	r3, r2
 8011e82:	005b      	lsls	r3, r3, #1
 8011e84:	4413      	add	r3, r2
 8011e86:	00db      	lsls	r3, r3, #3
 8011e88:	440b      	add	r3, r1
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d01a      	beq.n	8011ec6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011e90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e94:	497a      	ldr	r1, [pc, #488]	; (8012080 <etharp_find_entry+0x2d4>)
 8011e96:	4613      	mov	r3, r2
 8011e98:	005b      	lsls	r3, r3, #1
 8011e9a:	4413      	add	r3, r2
 8011e9c:	00db      	lsls	r3, r3, #3
 8011e9e:	440b      	add	r3, r1
 8011ea0:	3312      	adds	r3, #18
 8011ea2:	881b      	ldrh	r3, [r3, #0]
 8011ea4:	8bba      	ldrh	r2, [r7, #28]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d845      	bhi.n	8011f36 <etharp_find_entry+0x18a>
            old_queue = i;
 8011eaa:	8c3b      	ldrh	r3, [r7, #32]
 8011eac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011eae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011eb2:	4973      	ldr	r1, [pc, #460]	; (8012080 <etharp_find_entry+0x2d4>)
 8011eb4:	4613      	mov	r3, r2
 8011eb6:	005b      	lsls	r3, r3, #1
 8011eb8:	4413      	add	r3, r2
 8011eba:	00db      	lsls	r3, r3, #3
 8011ebc:	440b      	add	r3, r1
 8011ebe:	3312      	adds	r3, #18
 8011ec0:	881b      	ldrh	r3, [r3, #0]
 8011ec2:	83bb      	strh	r3, [r7, #28]
 8011ec4:	e037      	b.n	8011f36 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011ec6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011eca:	496d      	ldr	r1, [pc, #436]	; (8012080 <etharp_find_entry+0x2d4>)
 8011ecc:	4613      	mov	r3, r2
 8011ece:	005b      	lsls	r3, r3, #1
 8011ed0:	4413      	add	r3, r2
 8011ed2:	00db      	lsls	r3, r3, #3
 8011ed4:	440b      	add	r3, r1
 8011ed6:	3312      	adds	r3, #18
 8011ed8:	881b      	ldrh	r3, [r3, #0]
 8011eda:	8b7a      	ldrh	r2, [r7, #26]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d82a      	bhi.n	8011f36 <etharp_find_entry+0x18a>
            old_pending = i;
 8011ee0:	8c3b      	ldrh	r3, [r7, #32]
 8011ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011ee4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ee8:	4965      	ldr	r1, [pc, #404]	; (8012080 <etharp_find_entry+0x2d4>)
 8011eea:	4613      	mov	r3, r2
 8011eec:	005b      	lsls	r3, r3, #1
 8011eee:	4413      	add	r3, r2
 8011ef0:	00db      	lsls	r3, r3, #3
 8011ef2:	440b      	add	r3, r1
 8011ef4:	3312      	adds	r3, #18
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	837b      	strh	r3, [r7, #26]
 8011efa:	e01c      	b.n	8011f36 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011efc:	7dfb      	ldrb	r3, [r7, #23]
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d919      	bls.n	8011f36 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011f02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f06:	495e      	ldr	r1, [pc, #376]	; (8012080 <etharp_find_entry+0x2d4>)
 8011f08:	4613      	mov	r3, r2
 8011f0a:	005b      	lsls	r3, r3, #1
 8011f0c:	4413      	add	r3, r2
 8011f0e:	00db      	lsls	r3, r3, #3
 8011f10:	440b      	add	r3, r1
 8011f12:	3312      	adds	r3, #18
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	8b3a      	ldrh	r2, [r7, #24]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d80c      	bhi.n	8011f36 <etharp_find_entry+0x18a>
            old_stable = i;
 8011f1c:	8c3b      	ldrh	r3, [r7, #32]
 8011f1e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011f20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f24:	4956      	ldr	r1, [pc, #344]	; (8012080 <etharp_find_entry+0x2d4>)
 8011f26:	4613      	mov	r3, r2
 8011f28:	005b      	lsls	r3, r3, #1
 8011f2a:	4413      	add	r3, r2
 8011f2c:	00db      	lsls	r3, r3, #3
 8011f2e:	440b      	add	r3, r1
 8011f30:	3312      	adds	r3, #18
 8011f32:	881b      	ldrh	r3, [r3, #0]
 8011f34:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011f36:	8c3b      	ldrh	r3, [r7, #32]
 8011f38:	3301      	adds	r3, #1
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	843b      	strh	r3, [r7, #32]
 8011f3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011f42:	2b09      	cmp	r3, #9
 8011f44:	f77f af4c 	ble.w	8011de0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011f48:	7afb      	ldrb	r3, [r7, #11]
 8011f4a:	f003 0302 	and.w	r3, r3, #2
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d108      	bne.n	8011f64 <etharp_find_entry+0x1b8>
 8011f52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011f56:	2b0a      	cmp	r3, #10
 8011f58:	d107      	bne.n	8011f6a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011f5a:	7afb      	ldrb	r3, [r7, #11]
 8011f5c:	f003 0301 	and.w	r3, r3, #1
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d102      	bne.n	8011f6a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011f64:	f04f 33ff 	mov.w	r3, #4294967295
 8011f68:	e085      	b.n	8012076 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011f6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011f6e:	2b09      	cmp	r3, #9
 8011f70:	dc02      	bgt.n	8011f78 <etharp_find_entry+0x1cc>
    i = empty;
 8011f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f74:	843b      	strh	r3, [r7, #32]
 8011f76:	e039      	b.n	8011fec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011f78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011f7c:	2b09      	cmp	r3, #9
 8011f7e:	dc14      	bgt.n	8011faa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f82:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011f84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f88:	493d      	ldr	r1, [pc, #244]	; (8012080 <etharp_find_entry+0x2d4>)
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	005b      	lsls	r3, r3, #1
 8011f8e:	4413      	add	r3, r2
 8011f90:	00db      	lsls	r3, r3, #3
 8011f92:	440b      	add	r3, r1
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d018      	beq.n	8011fcc <etharp_find_entry+0x220>
 8011f9a:	4b3a      	ldr	r3, [pc, #232]	; (8012084 <etharp_find_entry+0x2d8>)
 8011f9c:	f240 126d 	movw	r2, #365	; 0x16d
 8011fa0:	493b      	ldr	r1, [pc, #236]	; (8012090 <etharp_find_entry+0x2e4>)
 8011fa2:	483a      	ldr	r0, [pc, #232]	; (801208c <etharp_find_entry+0x2e0>)
 8011fa4:	f002 fb12 	bl	80145cc <iprintf>
 8011fa8:	e010      	b.n	8011fcc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011faa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011fae:	2b09      	cmp	r3, #9
 8011fb0:	dc02      	bgt.n	8011fb8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011fb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011fb4:	843b      	strh	r3, [r7, #32]
 8011fb6:	e009      	b.n	8011fcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011fb8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011fbc:	2b09      	cmp	r3, #9
 8011fbe:	dc02      	bgt.n	8011fc6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011fc0:	8bfb      	ldrh	r3, [r7, #30]
 8011fc2:	843b      	strh	r3, [r7, #32]
 8011fc4:	e002      	b.n	8011fcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8011fca:	e054      	b.n	8012076 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011fcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011fd0:	2b09      	cmp	r3, #9
 8011fd2:	dd06      	ble.n	8011fe2 <etharp_find_entry+0x236>
 8011fd4:	4b2b      	ldr	r3, [pc, #172]	; (8012084 <etharp_find_entry+0x2d8>)
 8011fd6:	f240 127f 	movw	r2, #383	; 0x17f
 8011fda:	492e      	ldr	r1, [pc, #184]	; (8012094 <etharp_find_entry+0x2e8>)
 8011fdc:	482b      	ldr	r0, [pc, #172]	; (801208c <etharp_find_entry+0x2e0>)
 8011fde:	f002 faf5 	bl	80145cc <iprintf>
    etharp_free_entry(i);
 8011fe2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7ff fe06 	bl	8011bf8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011fec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ff0:	2b09      	cmp	r3, #9
 8011ff2:	dd06      	ble.n	8012002 <etharp_find_entry+0x256>
 8011ff4:	4b23      	ldr	r3, [pc, #140]	; (8012084 <etharp_find_entry+0x2d8>)
 8011ff6:	f240 1283 	movw	r2, #387	; 0x183
 8011ffa:	4926      	ldr	r1, [pc, #152]	; (8012094 <etharp_find_entry+0x2e8>)
 8011ffc:	4823      	ldr	r0, [pc, #140]	; (801208c <etharp_find_entry+0x2e0>)
 8011ffe:	f002 fae5 	bl	80145cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012002:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012006:	491e      	ldr	r1, [pc, #120]	; (8012080 <etharp_find_entry+0x2d4>)
 8012008:	4613      	mov	r3, r2
 801200a:	005b      	lsls	r3, r3, #1
 801200c:	4413      	add	r3, r2
 801200e:	00db      	lsls	r3, r3, #3
 8012010:	440b      	add	r3, r1
 8012012:	3314      	adds	r3, #20
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d006      	beq.n	8012028 <etharp_find_entry+0x27c>
 801201a:	4b1a      	ldr	r3, [pc, #104]	; (8012084 <etharp_find_entry+0x2d8>)
 801201c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012020:	491d      	ldr	r1, [pc, #116]	; (8012098 <etharp_find_entry+0x2ec>)
 8012022:	481a      	ldr	r0, [pc, #104]	; (801208c <etharp_find_entry+0x2e0>)
 8012024:	f002 fad2 	bl	80145cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d00b      	beq.n	8012046 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801202e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6819      	ldr	r1, [r3, #0]
 8012036:	4812      	ldr	r0, [pc, #72]	; (8012080 <etharp_find_entry+0x2d4>)
 8012038:	4613      	mov	r3, r2
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	4413      	add	r3, r2
 801203e:	00db      	lsls	r3, r3, #3
 8012040:	4403      	add	r3, r0
 8012042:	3304      	adds	r3, #4
 8012044:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012046:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801204a:	490d      	ldr	r1, [pc, #52]	; (8012080 <etharp_find_entry+0x2d4>)
 801204c:	4613      	mov	r3, r2
 801204e:	005b      	lsls	r3, r3, #1
 8012050:	4413      	add	r3, r2
 8012052:	00db      	lsls	r3, r3, #3
 8012054:	440b      	add	r3, r1
 8012056:	3312      	adds	r3, #18
 8012058:	2200      	movs	r2, #0
 801205a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801205c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012060:	4907      	ldr	r1, [pc, #28]	; (8012080 <etharp_find_entry+0x2d4>)
 8012062:	4613      	mov	r3, r2
 8012064:	005b      	lsls	r3, r3, #1
 8012066:	4413      	add	r3, r2
 8012068:	00db      	lsls	r3, r3, #3
 801206a:	440b      	add	r3, r1
 801206c:	3308      	adds	r3, #8
 801206e:	687a      	ldr	r2, [r7, #4]
 8012070:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012072:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012076:	4618      	mov	r0, r3
 8012078:	3728      	adds	r7, #40	; 0x28
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	200040dc 	.word	0x200040dc
 8012084:	080184f0 	.word	0x080184f0
 8012088:	08018528 	.word	0x08018528
 801208c:	08018568 	.word	0x08018568
 8012090:	08018590 	.word	0x08018590
 8012094:	080185a8 	.word	0x080185a8
 8012098:	080185bc 	.word	0x080185bc

0801209c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b088      	sub	sp, #32
 80120a0:	af02      	add	r7, sp, #8
 80120a2:	60f8      	str	r0, [r7, #12]
 80120a4:	60b9      	str	r1, [r7, #8]
 80120a6:	607a      	str	r2, [r7, #4]
 80120a8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80120b0:	2b06      	cmp	r3, #6
 80120b2:	d006      	beq.n	80120c2 <etharp_update_arp_entry+0x26>
 80120b4:	4b48      	ldr	r3, [pc, #288]	; (80121d8 <etharp_update_arp_entry+0x13c>)
 80120b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80120ba:	4948      	ldr	r1, [pc, #288]	; (80121dc <etharp_update_arp_entry+0x140>)
 80120bc:	4848      	ldr	r0, [pc, #288]	; (80121e0 <etharp_update_arp_entry+0x144>)
 80120be:	f002 fa85 	bl	80145cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d012      	beq.n	80120ee <etharp_update_arp_entry+0x52>
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00e      	beq.n	80120ee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	68f9      	ldr	r1, [r7, #12]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f001 f8fe 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 80120dc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d105      	bne.n	80120ee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80120ea:	2be0      	cmp	r3, #224	; 0xe0
 80120ec:	d102      	bne.n	80120f4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80120ee:	f06f 030f 	mvn.w	r3, #15
 80120f2:	e06c      	b.n	80121ce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80120f4:	78fb      	ldrb	r3, [r7, #3]
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	4619      	mov	r1, r3
 80120fa:	68b8      	ldr	r0, [r7, #8]
 80120fc:	f7ff fe56 	bl	8011dac <etharp_find_entry>
 8012100:	4603      	mov	r3, r0
 8012102:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012104:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012108:	2b00      	cmp	r3, #0
 801210a:	da02      	bge.n	8012112 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801210c:	8afb      	ldrh	r3, [r7, #22]
 801210e:	b25b      	sxtb	r3, r3
 8012110:	e05d      	b.n	80121ce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012112:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012116:	4933      	ldr	r1, [pc, #204]	; (80121e4 <etharp_update_arp_entry+0x148>)
 8012118:	4613      	mov	r3, r2
 801211a:	005b      	lsls	r3, r3, #1
 801211c:	4413      	add	r3, r2
 801211e:	00db      	lsls	r3, r3, #3
 8012120:	440b      	add	r3, r1
 8012122:	3314      	adds	r3, #20
 8012124:	2202      	movs	r2, #2
 8012126:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012128:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801212c:	492d      	ldr	r1, [pc, #180]	; (80121e4 <etharp_update_arp_entry+0x148>)
 801212e:	4613      	mov	r3, r2
 8012130:	005b      	lsls	r3, r3, #1
 8012132:	4413      	add	r3, r2
 8012134:	00db      	lsls	r3, r3, #3
 8012136:	440b      	add	r3, r1
 8012138:	3308      	adds	r3, #8
 801213a:	68fa      	ldr	r2, [r7, #12]
 801213c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801213e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012142:	4613      	mov	r3, r2
 8012144:	005b      	lsls	r3, r3, #1
 8012146:	4413      	add	r3, r2
 8012148:	00db      	lsls	r3, r3, #3
 801214a:	3308      	adds	r3, #8
 801214c:	4a25      	ldr	r2, [pc, #148]	; (80121e4 <etharp_update_arp_entry+0x148>)
 801214e:	4413      	add	r3, r2
 8012150:	3304      	adds	r3, #4
 8012152:	2206      	movs	r2, #6
 8012154:	6879      	ldr	r1, [r7, #4]
 8012156:	4618      	mov	r0, r3
 8012158:	f002 fa22 	bl	80145a0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801215c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012160:	4920      	ldr	r1, [pc, #128]	; (80121e4 <etharp_update_arp_entry+0x148>)
 8012162:	4613      	mov	r3, r2
 8012164:	005b      	lsls	r3, r3, #1
 8012166:	4413      	add	r3, r2
 8012168:	00db      	lsls	r3, r3, #3
 801216a:	440b      	add	r3, r1
 801216c:	3312      	adds	r3, #18
 801216e:	2200      	movs	r2, #0
 8012170:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012172:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012176:	491b      	ldr	r1, [pc, #108]	; (80121e4 <etharp_update_arp_entry+0x148>)
 8012178:	4613      	mov	r3, r2
 801217a:	005b      	lsls	r3, r3, #1
 801217c:	4413      	add	r3, r2
 801217e:	00db      	lsls	r3, r3, #3
 8012180:	440b      	add	r3, r1
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d021      	beq.n	80121cc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012188:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801218c:	4915      	ldr	r1, [pc, #84]	; (80121e4 <etharp_update_arp_entry+0x148>)
 801218e:	4613      	mov	r3, r2
 8012190:	005b      	lsls	r3, r3, #1
 8012192:	4413      	add	r3, r2
 8012194:	00db      	lsls	r3, r3, #3
 8012196:	440b      	add	r3, r1
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801219c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80121a0:	4910      	ldr	r1, [pc, #64]	; (80121e4 <etharp_update_arp_entry+0x148>)
 80121a2:	4613      	mov	r3, r2
 80121a4:	005b      	lsls	r3, r3, #1
 80121a6:	4413      	add	r3, r2
 80121a8:	00db      	lsls	r3, r3, #3
 80121aa:	440b      	add	r3, r1
 80121ac:	2200      	movs	r2, #0
 80121ae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80121b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80121ba:	9300      	str	r3, [sp, #0]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6939      	ldr	r1, [r7, #16]
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f001 ff91 	bl	80140e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80121c6:	6938      	ldr	r0, [r7, #16]
 80121c8:	f7f8 fd80 	bl	800accc <pbuf_free>
  }
  return ERR_OK;
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3718      	adds	r7, #24
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	080184f0 	.word	0x080184f0
 80121dc:	080185e8 	.word	0x080185e8
 80121e0:	08018568 	.word	0x08018568
 80121e4:	200040dc 	.word	0x200040dc

080121e8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80121f0:	2300      	movs	r3, #0
 80121f2:	60fb      	str	r3, [r7, #12]
 80121f4:	e01e      	b.n	8012234 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80121f6:	4913      	ldr	r1, [pc, #76]	; (8012244 <etharp_cleanup_netif+0x5c>)
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	4613      	mov	r3, r2
 80121fc:	005b      	lsls	r3, r3, #1
 80121fe:	4413      	add	r3, r2
 8012200:	00db      	lsls	r3, r3, #3
 8012202:	440b      	add	r3, r1
 8012204:	3314      	adds	r3, #20
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801220a:	7afb      	ldrb	r3, [r7, #11]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d00e      	beq.n	801222e <etharp_cleanup_netif+0x46>
 8012210:	490c      	ldr	r1, [pc, #48]	; (8012244 <etharp_cleanup_netif+0x5c>)
 8012212:	68fa      	ldr	r2, [r7, #12]
 8012214:	4613      	mov	r3, r2
 8012216:	005b      	lsls	r3, r3, #1
 8012218:	4413      	add	r3, r2
 801221a:	00db      	lsls	r3, r3, #3
 801221c:	440b      	add	r3, r1
 801221e:	3308      	adds	r3, #8
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	429a      	cmp	r2, r3
 8012226:	d102      	bne.n	801222e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012228:	68f8      	ldr	r0, [r7, #12]
 801222a:	f7ff fce5 	bl	8011bf8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	3301      	adds	r3, #1
 8012232:	60fb      	str	r3, [r7, #12]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2b09      	cmp	r3, #9
 8012238:	dddd      	ble.n	80121f6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801223a:	bf00      	nop
 801223c:	bf00      	nop
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	200040dc 	.word	0x200040dc

08012248 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012248:	b5b0      	push	{r4, r5, r7, lr}
 801224a:	b08a      	sub	sp, #40	; 0x28
 801224c:	af04      	add	r7, sp, #16
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d107      	bne.n	8012268 <etharp_input+0x20>
 8012258:	4b3d      	ldr	r3, [pc, #244]	; (8012350 <etharp_input+0x108>)
 801225a:	f240 228a 	movw	r2, #650	; 0x28a
 801225e:	493d      	ldr	r1, [pc, #244]	; (8012354 <etharp_input+0x10c>)
 8012260:	483d      	ldr	r0, [pc, #244]	; (8012358 <etharp_input+0x110>)
 8012262:	f002 f9b3 	bl	80145cc <iprintf>
 8012266:	e06f      	b.n	8012348 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	881b      	ldrh	r3, [r3, #0]
 8012272:	b29b      	uxth	r3, r3
 8012274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012278:	d10c      	bne.n	8012294 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801227e:	2b06      	cmp	r3, #6
 8012280:	d108      	bne.n	8012294 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012286:	2b04      	cmp	r3, #4
 8012288:	d104      	bne.n	8012294 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	885b      	ldrh	r3, [r3, #2]
 801228e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012290:	2b08      	cmp	r3, #8
 8012292:	d003      	beq.n	801229c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f7f8 fd19 	bl	800accc <pbuf_free>
    return;
 801229a:	e055      	b.n	8012348 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	330e      	adds	r3, #14
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	3318      	adds	r3, #24
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	3304      	adds	r3, #4
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d102      	bne.n	80122bc <etharp_input+0x74>
    for_us = 0;
 80122b6:	2300      	movs	r3, #0
 80122b8:	75fb      	strb	r3, [r7, #23]
 80122ba:	e009      	b.n	80122d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80122bc:	68ba      	ldr	r2, [r7, #8]
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	3304      	adds	r3, #4
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	429a      	cmp	r2, r3
 80122c6:	bf0c      	ite	eq
 80122c8:	2301      	moveq	r3, #1
 80122ca:	2300      	movne	r3, #0
 80122cc:	b2db      	uxtb	r3, r3
 80122ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	f103 0208 	add.w	r2, r3, #8
 80122d6:	7dfb      	ldrb	r3, [r7, #23]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d001      	beq.n	80122e0 <etharp_input+0x98>
 80122dc:	2301      	movs	r3, #1
 80122de:	e000      	b.n	80122e2 <etharp_input+0x9a>
 80122e0:	2302      	movs	r3, #2
 80122e2:	f107 010c 	add.w	r1, r7, #12
 80122e6:	6838      	ldr	r0, [r7, #0]
 80122e8:	f7ff fed8 	bl	801209c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	88db      	ldrh	r3, [r3, #6]
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122f6:	d003      	beq.n	8012300 <etharp_input+0xb8>
 80122f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122fc:	d01e      	beq.n	801233c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80122fe:	e020      	b.n	8012342 <etharp_input+0xfa>
      if (for_us) {
 8012300:	7dfb      	ldrb	r3, [r7, #23]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d01c      	beq.n	8012340 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801231c:	693a      	ldr	r2, [r7, #16]
 801231e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012320:	2102      	movs	r1, #2
 8012322:	9103      	str	r1, [sp, #12]
 8012324:	f107 010c 	add.w	r1, r7, #12
 8012328:	9102      	str	r1, [sp, #8]
 801232a:	9201      	str	r2, [sp, #4]
 801232c:	9300      	str	r3, [sp, #0]
 801232e:	462b      	mov	r3, r5
 8012330:	4622      	mov	r2, r4
 8012332:	4601      	mov	r1, r0
 8012334:	6838      	ldr	r0, [r7, #0]
 8012336:	f000 faeb 	bl	8012910 <etharp_raw>
      break;
 801233a:	e001      	b.n	8012340 <etharp_input+0xf8>
      break;
 801233c:	bf00      	nop
 801233e:	e000      	b.n	8012342 <etharp_input+0xfa>
      break;
 8012340:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f7f8 fcc2 	bl	800accc <pbuf_free>
}
 8012348:	3718      	adds	r7, #24
 801234a:	46bd      	mov	sp, r7
 801234c:	bdb0      	pop	{r4, r5, r7, pc}
 801234e:	bf00      	nop
 8012350:	080184f0 	.word	0x080184f0
 8012354:	08018640 	.word	0x08018640
 8012358:	08018568 	.word	0x08018568

0801235c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af02      	add	r7, sp, #8
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	4613      	mov	r3, r2
 8012368:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801236a:	79fa      	ldrb	r2, [r7, #7]
 801236c:	4944      	ldr	r1, [pc, #272]	; (8012480 <etharp_output_to_arp_index+0x124>)
 801236e:	4613      	mov	r3, r2
 8012370:	005b      	lsls	r3, r3, #1
 8012372:	4413      	add	r3, r2
 8012374:	00db      	lsls	r3, r3, #3
 8012376:	440b      	add	r3, r1
 8012378:	3314      	adds	r3, #20
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	2b01      	cmp	r3, #1
 801237e:	d806      	bhi.n	801238e <etharp_output_to_arp_index+0x32>
 8012380:	4b40      	ldr	r3, [pc, #256]	; (8012484 <etharp_output_to_arp_index+0x128>)
 8012382:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012386:	4940      	ldr	r1, [pc, #256]	; (8012488 <etharp_output_to_arp_index+0x12c>)
 8012388:	4840      	ldr	r0, [pc, #256]	; (801248c <etharp_output_to_arp_index+0x130>)
 801238a:	f002 f91f 	bl	80145cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801238e:	79fa      	ldrb	r2, [r7, #7]
 8012390:	493b      	ldr	r1, [pc, #236]	; (8012480 <etharp_output_to_arp_index+0x124>)
 8012392:	4613      	mov	r3, r2
 8012394:	005b      	lsls	r3, r3, #1
 8012396:	4413      	add	r3, r2
 8012398:	00db      	lsls	r3, r3, #3
 801239a:	440b      	add	r3, r1
 801239c:	3314      	adds	r3, #20
 801239e:	781b      	ldrb	r3, [r3, #0]
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d153      	bne.n	801244c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80123a4:	79fa      	ldrb	r2, [r7, #7]
 80123a6:	4936      	ldr	r1, [pc, #216]	; (8012480 <etharp_output_to_arp_index+0x124>)
 80123a8:	4613      	mov	r3, r2
 80123aa:	005b      	lsls	r3, r3, #1
 80123ac:	4413      	add	r3, r2
 80123ae:	00db      	lsls	r3, r3, #3
 80123b0:	440b      	add	r3, r1
 80123b2:	3312      	adds	r3, #18
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80123ba:	d919      	bls.n	80123f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80123bc:	79fa      	ldrb	r2, [r7, #7]
 80123be:	4613      	mov	r3, r2
 80123c0:	005b      	lsls	r3, r3, #1
 80123c2:	4413      	add	r3, r2
 80123c4:	00db      	lsls	r3, r3, #3
 80123c6:	4a2e      	ldr	r2, [pc, #184]	; (8012480 <etharp_output_to_arp_index+0x124>)
 80123c8:	4413      	add	r3, r2
 80123ca:	3304      	adds	r3, #4
 80123cc:	4619      	mov	r1, r3
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f000 fb4c 	bl	8012a6c <etharp_request>
 80123d4:	4603      	mov	r3, r0
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d138      	bne.n	801244c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80123da:	79fa      	ldrb	r2, [r7, #7]
 80123dc:	4928      	ldr	r1, [pc, #160]	; (8012480 <etharp_output_to_arp_index+0x124>)
 80123de:	4613      	mov	r3, r2
 80123e0:	005b      	lsls	r3, r3, #1
 80123e2:	4413      	add	r3, r2
 80123e4:	00db      	lsls	r3, r3, #3
 80123e6:	440b      	add	r3, r1
 80123e8:	3314      	adds	r3, #20
 80123ea:	2203      	movs	r2, #3
 80123ec:	701a      	strb	r2, [r3, #0]
 80123ee:	e02d      	b.n	801244c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80123f0:	79fa      	ldrb	r2, [r7, #7]
 80123f2:	4923      	ldr	r1, [pc, #140]	; (8012480 <etharp_output_to_arp_index+0x124>)
 80123f4:	4613      	mov	r3, r2
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	4413      	add	r3, r2
 80123fa:	00db      	lsls	r3, r3, #3
 80123fc:	440b      	add	r3, r1
 80123fe:	3312      	adds	r3, #18
 8012400:	881b      	ldrh	r3, [r3, #0]
 8012402:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012406:	d321      	bcc.n	801244c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012408:	79fa      	ldrb	r2, [r7, #7]
 801240a:	4613      	mov	r3, r2
 801240c:	005b      	lsls	r3, r3, #1
 801240e:	4413      	add	r3, r2
 8012410:	00db      	lsls	r3, r3, #3
 8012412:	4a1b      	ldr	r2, [pc, #108]	; (8012480 <etharp_output_to_arp_index+0x124>)
 8012414:	4413      	add	r3, r2
 8012416:	1d19      	adds	r1, r3, #4
 8012418:	79fa      	ldrb	r2, [r7, #7]
 801241a:	4613      	mov	r3, r2
 801241c:	005b      	lsls	r3, r3, #1
 801241e:	4413      	add	r3, r2
 8012420:	00db      	lsls	r3, r3, #3
 8012422:	3308      	adds	r3, #8
 8012424:	4a16      	ldr	r2, [pc, #88]	; (8012480 <etharp_output_to_arp_index+0x124>)
 8012426:	4413      	add	r3, r2
 8012428:	3304      	adds	r3, #4
 801242a:	461a      	mov	r2, r3
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f000 fafb 	bl	8012a28 <etharp_request_dst>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d109      	bne.n	801244c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012438:	79fa      	ldrb	r2, [r7, #7]
 801243a:	4911      	ldr	r1, [pc, #68]	; (8012480 <etharp_output_to_arp_index+0x124>)
 801243c:	4613      	mov	r3, r2
 801243e:	005b      	lsls	r3, r3, #1
 8012440:	4413      	add	r3, r2
 8012442:	00db      	lsls	r3, r3, #3
 8012444:	440b      	add	r3, r1
 8012446:	3314      	adds	r3, #20
 8012448:	2203      	movs	r2, #3
 801244a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012452:	79fa      	ldrb	r2, [r7, #7]
 8012454:	4613      	mov	r3, r2
 8012456:	005b      	lsls	r3, r3, #1
 8012458:	4413      	add	r3, r2
 801245a:	00db      	lsls	r3, r3, #3
 801245c:	3308      	adds	r3, #8
 801245e:	4a08      	ldr	r2, [pc, #32]	; (8012480 <etharp_output_to_arp_index+0x124>)
 8012460:	4413      	add	r3, r2
 8012462:	3304      	adds	r3, #4
 8012464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012468:	9200      	str	r2, [sp, #0]
 801246a:	460a      	mov	r2, r1
 801246c:	68b9      	ldr	r1, [r7, #8]
 801246e:	68f8      	ldr	r0, [r7, #12]
 8012470:	f001 fe3a 	bl	80140e8 <ethernet_output>
 8012474:	4603      	mov	r3, r0
}
 8012476:	4618      	mov	r0, r3
 8012478:	3710      	adds	r7, #16
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	200040dc 	.word	0x200040dc
 8012484:	080184f0 	.word	0x080184f0
 8012488:	08018660 	.word	0x08018660
 801248c:	08018568 	.word	0x08018568

08012490 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b08a      	sub	sp, #40	; 0x28
 8012494:	af02      	add	r7, sp, #8
 8012496:	60f8      	str	r0, [r7, #12]
 8012498:	60b9      	str	r1, [r7, #8]
 801249a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d106      	bne.n	80124b4 <etharp_output+0x24>
 80124a6:	4b73      	ldr	r3, [pc, #460]	; (8012674 <etharp_output+0x1e4>)
 80124a8:	f240 321e 	movw	r2, #798	; 0x31e
 80124ac:	4972      	ldr	r1, [pc, #456]	; (8012678 <etharp_output+0x1e8>)
 80124ae:	4873      	ldr	r0, [pc, #460]	; (801267c <etharp_output+0x1ec>)
 80124b0:	f002 f88c 	bl	80145cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d106      	bne.n	80124c8 <etharp_output+0x38>
 80124ba:	4b6e      	ldr	r3, [pc, #440]	; (8012674 <etharp_output+0x1e4>)
 80124bc:	f240 321f 	movw	r2, #799	; 0x31f
 80124c0:	496f      	ldr	r1, [pc, #444]	; (8012680 <etharp_output+0x1f0>)
 80124c2:	486e      	ldr	r0, [pc, #440]	; (801267c <etharp_output+0x1ec>)
 80124c4:	f002 f882 	bl	80145cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d106      	bne.n	80124dc <etharp_output+0x4c>
 80124ce:	4b69      	ldr	r3, [pc, #420]	; (8012674 <etharp_output+0x1e4>)
 80124d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80124d4:	496b      	ldr	r1, [pc, #428]	; (8012684 <etharp_output+0x1f4>)
 80124d6:	4869      	ldr	r0, [pc, #420]	; (801267c <etharp_output+0x1ec>)
 80124d8:	f002 f878 	bl	80145cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	68f9      	ldr	r1, [r7, #12]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f000 fef8 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d002      	beq.n	80124f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80124ee:	4b66      	ldr	r3, [pc, #408]	; (8012688 <etharp_output+0x1f8>)
 80124f0:	61fb      	str	r3, [r7, #28]
 80124f2:	e0af      	b.n	8012654 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80124fc:	2be0      	cmp	r3, #224	; 0xe0
 80124fe:	d118      	bne.n	8012532 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012500:	2301      	movs	r3, #1
 8012502:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012504:	2300      	movs	r3, #0
 8012506:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012508:	235e      	movs	r3, #94	; 0x5e
 801250a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	3301      	adds	r3, #1
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012516:	b2db      	uxtb	r3, r3
 8012518:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	3302      	adds	r3, #2
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	3303      	adds	r3, #3
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801252a:	f107 0310 	add.w	r3, r7, #16
 801252e:	61fb      	str	r3, [r7, #28]
 8012530:	e090      	b.n	8012654 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	3304      	adds	r3, #4
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	405a      	eors	r2, r3
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	3308      	adds	r3, #8
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	4013      	ands	r3, r2
 8012546:	2b00      	cmp	r3, #0
 8012548:	d012      	beq.n	8012570 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012550:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012554:	4293      	cmp	r3, r2
 8012556:	d00b      	beq.n	8012570 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	330c      	adds	r3, #12
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d003      	beq.n	801256a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	330c      	adds	r3, #12
 8012566:	61bb      	str	r3, [r7, #24]
 8012568:	e002      	b.n	8012570 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801256a:	f06f 0303 	mvn.w	r3, #3
 801256e:	e07d      	b.n	801266c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012570:	4b46      	ldr	r3, [pc, #280]	; (801268c <etharp_output+0x1fc>)
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	4619      	mov	r1, r3
 8012576:	4a46      	ldr	r2, [pc, #280]	; (8012690 <etharp_output+0x200>)
 8012578:	460b      	mov	r3, r1
 801257a:	005b      	lsls	r3, r3, #1
 801257c:	440b      	add	r3, r1
 801257e:	00db      	lsls	r3, r3, #3
 8012580:	4413      	add	r3, r2
 8012582:	3314      	adds	r3, #20
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b01      	cmp	r3, #1
 8012588:	d925      	bls.n	80125d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801258a:	4b40      	ldr	r3, [pc, #256]	; (801268c <etharp_output+0x1fc>)
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	4619      	mov	r1, r3
 8012590:	4a3f      	ldr	r2, [pc, #252]	; (8012690 <etharp_output+0x200>)
 8012592:	460b      	mov	r3, r1
 8012594:	005b      	lsls	r3, r3, #1
 8012596:	440b      	add	r3, r1
 8012598:	00db      	lsls	r3, r3, #3
 801259a:	4413      	add	r3, r2
 801259c:	3308      	adds	r3, #8
 801259e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80125a0:	68fa      	ldr	r2, [r7, #12]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d117      	bne.n	80125d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	681a      	ldr	r2, [r3, #0]
 80125aa:	4b38      	ldr	r3, [pc, #224]	; (801268c <etharp_output+0x1fc>)
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	4618      	mov	r0, r3
 80125b0:	4937      	ldr	r1, [pc, #220]	; (8012690 <etharp_output+0x200>)
 80125b2:	4603      	mov	r3, r0
 80125b4:	005b      	lsls	r3, r3, #1
 80125b6:	4403      	add	r3, r0
 80125b8:	00db      	lsls	r3, r3, #3
 80125ba:	440b      	add	r3, r1
 80125bc:	3304      	adds	r3, #4
 80125be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d108      	bne.n	80125d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80125c4:	4b31      	ldr	r3, [pc, #196]	; (801268c <etharp_output+0x1fc>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	461a      	mov	r2, r3
 80125ca:	68b9      	ldr	r1, [r7, #8]
 80125cc:	68f8      	ldr	r0, [r7, #12]
 80125ce:	f7ff fec5 	bl	801235c <etharp_output_to_arp_index>
 80125d2:	4603      	mov	r3, r0
 80125d4:	e04a      	b.n	801266c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80125d6:	2300      	movs	r3, #0
 80125d8:	75fb      	strb	r3, [r7, #23]
 80125da:	e031      	b.n	8012640 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80125dc:	7dfa      	ldrb	r2, [r7, #23]
 80125de:	492c      	ldr	r1, [pc, #176]	; (8012690 <etharp_output+0x200>)
 80125e0:	4613      	mov	r3, r2
 80125e2:	005b      	lsls	r3, r3, #1
 80125e4:	4413      	add	r3, r2
 80125e6:	00db      	lsls	r3, r3, #3
 80125e8:	440b      	add	r3, r1
 80125ea:	3314      	adds	r3, #20
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	2b01      	cmp	r3, #1
 80125f0:	d923      	bls.n	801263a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80125f2:	7dfa      	ldrb	r2, [r7, #23]
 80125f4:	4926      	ldr	r1, [pc, #152]	; (8012690 <etharp_output+0x200>)
 80125f6:	4613      	mov	r3, r2
 80125f8:	005b      	lsls	r3, r3, #1
 80125fa:	4413      	add	r3, r2
 80125fc:	00db      	lsls	r3, r3, #3
 80125fe:	440b      	add	r3, r1
 8012600:	3308      	adds	r3, #8
 8012602:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012604:	68fa      	ldr	r2, [r7, #12]
 8012606:	429a      	cmp	r2, r3
 8012608:	d117      	bne.n	801263a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	6819      	ldr	r1, [r3, #0]
 801260e:	7dfa      	ldrb	r2, [r7, #23]
 8012610:	481f      	ldr	r0, [pc, #124]	; (8012690 <etharp_output+0x200>)
 8012612:	4613      	mov	r3, r2
 8012614:	005b      	lsls	r3, r3, #1
 8012616:	4413      	add	r3, r2
 8012618:	00db      	lsls	r3, r3, #3
 801261a:	4403      	add	r3, r0
 801261c:	3304      	adds	r3, #4
 801261e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012620:	4299      	cmp	r1, r3
 8012622:	d10a      	bne.n	801263a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012624:	4a19      	ldr	r2, [pc, #100]	; (801268c <etharp_output+0x1fc>)
 8012626:	7dfb      	ldrb	r3, [r7, #23]
 8012628:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801262a:	7dfb      	ldrb	r3, [r7, #23]
 801262c:	461a      	mov	r2, r3
 801262e:	68b9      	ldr	r1, [r7, #8]
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f7ff fe93 	bl	801235c <etharp_output_to_arp_index>
 8012636:	4603      	mov	r3, r0
 8012638:	e018      	b.n	801266c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801263a:	7dfb      	ldrb	r3, [r7, #23]
 801263c:	3301      	adds	r3, #1
 801263e:	75fb      	strb	r3, [r7, #23]
 8012640:	7dfb      	ldrb	r3, [r7, #23]
 8012642:	2b09      	cmp	r3, #9
 8012644:	d9ca      	bls.n	80125dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012646:	68ba      	ldr	r2, [r7, #8]
 8012648:	69b9      	ldr	r1, [r7, #24]
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f000 f822 	bl	8012694 <etharp_query>
 8012650:	4603      	mov	r3, r0
 8012652:	e00b      	b.n	801266c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801265a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801265e:	9300      	str	r3, [sp, #0]
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	68b9      	ldr	r1, [r7, #8]
 8012664:	68f8      	ldr	r0, [r7, #12]
 8012666:	f001 fd3f 	bl	80140e8 <ethernet_output>
 801266a:	4603      	mov	r3, r0
}
 801266c:	4618      	mov	r0, r3
 801266e:	3720      	adds	r7, #32
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	080184f0 	.word	0x080184f0
 8012678:	08018640 	.word	0x08018640
 801267c:	08018568 	.word	0x08018568
 8012680:	08018690 	.word	0x08018690
 8012684:	08018630 	.word	0x08018630
 8012688:	08018ce4 	.word	0x08018ce4
 801268c:	200041cc 	.word	0x200041cc
 8012690:	200040dc 	.word	0x200040dc

08012694 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b08c      	sub	sp, #48	; 0x30
 8012698:	af02      	add	r7, sp, #8
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	3326      	adds	r3, #38	; 0x26
 80126a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80126a6:	23ff      	movs	r3, #255	; 0xff
 80126a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80126ac:	2300      	movs	r3, #0
 80126ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	68f9      	ldr	r1, [r7, #12]
 80126b6:	4618      	mov	r0, r3
 80126b8:	f000 fe0e 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 80126bc:	4603      	mov	r3, r0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d10c      	bne.n	80126dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80126ca:	2be0      	cmp	r3, #224	; 0xe0
 80126cc:	d006      	beq.n	80126dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d003      	beq.n	80126dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d102      	bne.n	80126e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80126dc:	f06f 030f 	mvn.w	r3, #15
 80126e0:	e101      	b.n	80128e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80126e2:	68fa      	ldr	r2, [r7, #12]
 80126e4:	2101      	movs	r1, #1
 80126e6:	68b8      	ldr	r0, [r7, #8]
 80126e8:	f7ff fb60 	bl	8011dac <etharp_find_entry>
 80126ec:	4603      	mov	r3, r0
 80126ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80126f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	da02      	bge.n	80126fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80126f8:	8a7b      	ldrh	r3, [r7, #18]
 80126fa:	b25b      	sxtb	r3, r3
 80126fc:	e0f3      	b.n	80128e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80126fe:	8a7b      	ldrh	r3, [r7, #18]
 8012700:	2b7e      	cmp	r3, #126	; 0x7e
 8012702:	d906      	bls.n	8012712 <etharp_query+0x7e>
 8012704:	4b7a      	ldr	r3, [pc, #488]	; (80128f0 <etharp_query+0x25c>)
 8012706:	f240 32c1 	movw	r2, #961	; 0x3c1
 801270a:	497a      	ldr	r1, [pc, #488]	; (80128f4 <etharp_query+0x260>)
 801270c:	487a      	ldr	r0, [pc, #488]	; (80128f8 <etharp_query+0x264>)
 801270e:	f001 ff5d 	bl	80145cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012712:	8a7b      	ldrh	r3, [r7, #18]
 8012714:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012716:	7c7a      	ldrb	r2, [r7, #17]
 8012718:	4978      	ldr	r1, [pc, #480]	; (80128fc <etharp_query+0x268>)
 801271a:	4613      	mov	r3, r2
 801271c:	005b      	lsls	r3, r3, #1
 801271e:	4413      	add	r3, r2
 8012720:	00db      	lsls	r3, r3, #3
 8012722:	440b      	add	r3, r1
 8012724:	3314      	adds	r3, #20
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d115      	bne.n	8012758 <etharp_query+0xc4>
    is_new_entry = 1;
 801272c:	2301      	movs	r3, #1
 801272e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012730:	7c7a      	ldrb	r2, [r7, #17]
 8012732:	4972      	ldr	r1, [pc, #456]	; (80128fc <etharp_query+0x268>)
 8012734:	4613      	mov	r3, r2
 8012736:	005b      	lsls	r3, r3, #1
 8012738:	4413      	add	r3, r2
 801273a:	00db      	lsls	r3, r3, #3
 801273c:	440b      	add	r3, r1
 801273e:	3314      	adds	r3, #20
 8012740:	2201      	movs	r2, #1
 8012742:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012744:	7c7a      	ldrb	r2, [r7, #17]
 8012746:	496d      	ldr	r1, [pc, #436]	; (80128fc <etharp_query+0x268>)
 8012748:	4613      	mov	r3, r2
 801274a:	005b      	lsls	r3, r3, #1
 801274c:	4413      	add	r3, r2
 801274e:	00db      	lsls	r3, r3, #3
 8012750:	440b      	add	r3, r1
 8012752:	3308      	adds	r3, #8
 8012754:	68fa      	ldr	r2, [r7, #12]
 8012756:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012758:	7c7a      	ldrb	r2, [r7, #17]
 801275a:	4968      	ldr	r1, [pc, #416]	; (80128fc <etharp_query+0x268>)
 801275c:	4613      	mov	r3, r2
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	4413      	add	r3, r2
 8012762:	00db      	lsls	r3, r3, #3
 8012764:	440b      	add	r3, r1
 8012766:	3314      	adds	r3, #20
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	2b01      	cmp	r3, #1
 801276c:	d011      	beq.n	8012792 <etharp_query+0xfe>
 801276e:	7c7a      	ldrb	r2, [r7, #17]
 8012770:	4962      	ldr	r1, [pc, #392]	; (80128fc <etharp_query+0x268>)
 8012772:	4613      	mov	r3, r2
 8012774:	005b      	lsls	r3, r3, #1
 8012776:	4413      	add	r3, r2
 8012778:	00db      	lsls	r3, r3, #3
 801277a:	440b      	add	r3, r1
 801277c:	3314      	adds	r3, #20
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d806      	bhi.n	8012792 <etharp_query+0xfe>
 8012784:	4b5a      	ldr	r3, [pc, #360]	; (80128f0 <etharp_query+0x25c>)
 8012786:	f240 32cd 	movw	r2, #973	; 0x3cd
 801278a:	495d      	ldr	r1, [pc, #372]	; (8012900 <etharp_query+0x26c>)
 801278c:	485a      	ldr	r0, [pc, #360]	; (80128f8 <etharp_query+0x264>)
 801278e:	f001 ff1d 	bl	80145cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012792:	6a3b      	ldr	r3, [r7, #32]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d102      	bne.n	801279e <etharp_query+0x10a>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d10c      	bne.n	80127b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801279e:	68b9      	ldr	r1, [r7, #8]
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f000 f963 	bl	8012a6c <etharp_request>
 80127a6:	4603      	mov	r3, r0
 80127a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d102      	bne.n	80127b8 <etharp_query+0x124>
      return result;
 80127b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80127b6:	e096      	b.n	80128e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <etharp_query+0x138>
 80127be:	4b4c      	ldr	r3, [pc, #304]	; (80128f0 <etharp_query+0x25c>)
 80127c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80127c4:	494f      	ldr	r1, [pc, #316]	; (8012904 <etharp_query+0x270>)
 80127c6:	484c      	ldr	r0, [pc, #304]	; (80128f8 <etharp_query+0x264>)
 80127c8:	f001 ff00 	bl	80145cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80127cc:	7c7a      	ldrb	r2, [r7, #17]
 80127ce:	494b      	ldr	r1, [pc, #300]	; (80128fc <etharp_query+0x268>)
 80127d0:	4613      	mov	r3, r2
 80127d2:	005b      	lsls	r3, r3, #1
 80127d4:	4413      	add	r3, r2
 80127d6:	00db      	lsls	r3, r3, #3
 80127d8:	440b      	add	r3, r1
 80127da:	3314      	adds	r3, #20
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	2b01      	cmp	r3, #1
 80127e0:	d917      	bls.n	8012812 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80127e2:	4a49      	ldr	r2, [pc, #292]	; (8012908 <etharp_query+0x274>)
 80127e4:	7c7b      	ldrb	r3, [r7, #17]
 80127e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80127e8:	7c7a      	ldrb	r2, [r7, #17]
 80127ea:	4613      	mov	r3, r2
 80127ec:	005b      	lsls	r3, r3, #1
 80127ee:	4413      	add	r3, r2
 80127f0:	00db      	lsls	r3, r3, #3
 80127f2:	3308      	adds	r3, #8
 80127f4:	4a41      	ldr	r2, [pc, #260]	; (80128fc <etharp_query+0x268>)
 80127f6:	4413      	add	r3, r2
 80127f8:	3304      	adds	r3, #4
 80127fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80127fe:	9200      	str	r2, [sp, #0]
 8012800:	697a      	ldr	r2, [r7, #20]
 8012802:	6879      	ldr	r1, [r7, #4]
 8012804:	68f8      	ldr	r0, [r7, #12]
 8012806:	f001 fc6f 	bl	80140e8 <ethernet_output>
 801280a:	4603      	mov	r3, r0
 801280c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012810:	e067      	b.n	80128e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012812:	7c7a      	ldrb	r2, [r7, #17]
 8012814:	4939      	ldr	r1, [pc, #228]	; (80128fc <etharp_query+0x268>)
 8012816:	4613      	mov	r3, r2
 8012818:	005b      	lsls	r3, r3, #1
 801281a:	4413      	add	r3, r2
 801281c:	00db      	lsls	r3, r3, #3
 801281e:	440b      	add	r3, r1
 8012820:	3314      	adds	r3, #20
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	2b01      	cmp	r3, #1
 8012826:	d15c      	bne.n	80128e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012828:	2300      	movs	r3, #0
 801282a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012830:	e01c      	b.n	801286c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012832:	69fb      	ldr	r3, [r7, #28]
 8012834:	895a      	ldrh	r2, [r3, #10]
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	891b      	ldrh	r3, [r3, #8]
 801283a:	429a      	cmp	r2, r3
 801283c:	d10a      	bne.n	8012854 <etharp_query+0x1c0>
 801283e:	69fb      	ldr	r3, [r7, #28]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d006      	beq.n	8012854 <etharp_query+0x1c0>
 8012846:	4b2a      	ldr	r3, [pc, #168]	; (80128f0 <etharp_query+0x25c>)
 8012848:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801284c:	492f      	ldr	r1, [pc, #188]	; (801290c <etharp_query+0x278>)
 801284e:	482a      	ldr	r0, [pc, #168]	; (80128f8 <etharp_query+0x264>)
 8012850:	f001 febc 	bl	80145cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	7b1b      	ldrb	r3, [r3, #12]
 8012858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801285c:	2b00      	cmp	r3, #0
 801285e:	d002      	beq.n	8012866 <etharp_query+0x1d2>
        copy_needed = 1;
 8012860:	2301      	movs	r3, #1
 8012862:	61bb      	str	r3, [r7, #24]
        break;
 8012864:	e005      	b.n	8012872 <etharp_query+0x1de>
      }
      p = p->next;
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1df      	bne.n	8012832 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d007      	beq.n	8012888 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801287e:	200e      	movs	r0, #14
 8012880:	f7f8 fc8c 	bl	800b19c <pbuf_clone>
 8012884:	61f8      	str	r0, [r7, #28]
 8012886:	e004      	b.n	8012892 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801288c:	69f8      	ldr	r0, [r7, #28]
 801288e:	f7f8 fac3 	bl	800ae18 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d021      	beq.n	80128dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012898:	7c7a      	ldrb	r2, [r7, #17]
 801289a:	4918      	ldr	r1, [pc, #96]	; (80128fc <etharp_query+0x268>)
 801289c:	4613      	mov	r3, r2
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	4413      	add	r3, r2
 80128a2:	00db      	lsls	r3, r3, #3
 80128a4:	440b      	add	r3, r1
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d00a      	beq.n	80128c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80128ac:	7c7a      	ldrb	r2, [r7, #17]
 80128ae:	4913      	ldr	r1, [pc, #76]	; (80128fc <etharp_query+0x268>)
 80128b0:	4613      	mov	r3, r2
 80128b2:	005b      	lsls	r3, r3, #1
 80128b4:	4413      	add	r3, r2
 80128b6:	00db      	lsls	r3, r3, #3
 80128b8:	440b      	add	r3, r1
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4618      	mov	r0, r3
 80128be:	f7f8 fa05 	bl	800accc <pbuf_free>
      }
      arp_table[i].q = p;
 80128c2:	7c7a      	ldrb	r2, [r7, #17]
 80128c4:	490d      	ldr	r1, [pc, #52]	; (80128fc <etharp_query+0x268>)
 80128c6:	4613      	mov	r3, r2
 80128c8:	005b      	lsls	r3, r3, #1
 80128ca:	4413      	add	r3, r2
 80128cc:	00db      	lsls	r3, r3, #3
 80128ce:	440b      	add	r3, r1
 80128d0:	69fa      	ldr	r2, [r7, #28]
 80128d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80128d4:	2300      	movs	r3, #0
 80128d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80128da:	e002      	b.n	80128e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80128dc:	23ff      	movs	r3, #255	; 0xff
 80128de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80128e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3728      	adds	r7, #40	; 0x28
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	080184f0 	.word	0x080184f0
 80128f4:	0801869c 	.word	0x0801869c
 80128f8:	08018568 	.word	0x08018568
 80128fc:	200040dc 	.word	0x200040dc
 8012900:	080186ac 	.word	0x080186ac
 8012904:	08018690 	.word	0x08018690
 8012908:	200041cc 	.word	0x200041cc
 801290c:	080186d4 	.word	0x080186d4

08012910 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b08a      	sub	sp, #40	; 0x28
 8012914:	af02      	add	r7, sp, #8
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
 801291c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801291e:	2300      	movs	r3, #0
 8012920:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d106      	bne.n	8012936 <etharp_raw+0x26>
 8012928:	4b3a      	ldr	r3, [pc, #232]	; (8012a14 <etharp_raw+0x104>)
 801292a:	f240 4257 	movw	r2, #1111	; 0x457
 801292e:	493a      	ldr	r1, [pc, #232]	; (8012a18 <etharp_raw+0x108>)
 8012930:	483a      	ldr	r0, [pc, #232]	; (8012a1c <etharp_raw+0x10c>)
 8012932:	f001 fe4b 	bl	80145cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012936:	f44f 7220 	mov.w	r2, #640	; 0x280
 801293a:	211c      	movs	r1, #28
 801293c:	200e      	movs	r0, #14
 801293e:	f7f7 fee1 	bl	800a704 <pbuf_alloc>
 8012942:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d102      	bne.n	8012950 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801294a:	f04f 33ff 	mov.w	r3, #4294967295
 801294e:	e05d      	b.n	8012a0c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012950:	69bb      	ldr	r3, [r7, #24]
 8012952:	895b      	ldrh	r3, [r3, #10]
 8012954:	2b1b      	cmp	r3, #27
 8012956:	d806      	bhi.n	8012966 <etharp_raw+0x56>
 8012958:	4b2e      	ldr	r3, [pc, #184]	; (8012a14 <etharp_raw+0x104>)
 801295a:	f240 4262 	movw	r2, #1122	; 0x462
 801295e:	4930      	ldr	r1, [pc, #192]	; (8012a20 <etharp_raw+0x110>)
 8012960:	482e      	ldr	r0, [pc, #184]	; (8012a1c <etharp_raw+0x10c>)
 8012962:	f001 fe33 	bl	80145cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801296c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801296e:	4618      	mov	r0, r3
 8012970:	f7f6 fe00 	bl	8009574 <lwip_htons>
 8012974:	4603      	mov	r3, r0
 8012976:	461a      	mov	r2, r3
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012982:	2b06      	cmp	r3, #6
 8012984:	d006      	beq.n	8012994 <etharp_raw+0x84>
 8012986:	4b23      	ldr	r3, [pc, #140]	; (8012a14 <etharp_raw+0x104>)
 8012988:	f240 4269 	movw	r2, #1129	; 0x469
 801298c:	4925      	ldr	r1, [pc, #148]	; (8012a24 <etharp_raw+0x114>)
 801298e:	4823      	ldr	r0, [pc, #140]	; (8012a1c <etharp_raw+0x10c>)
 8012990:	f001 fe1c 	bl	80145cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	3308      	adds	r3, #8
 8012998:	2206      	movs	r2, #6
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	4618      	mov	r0, r3
 801299e:	f001 fdff 	bl	80145a0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	3312      	adds	r3, #18
 80129a6:	2206      	movs	r2, #6
 80129a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129aa:	4618      	mov	r0, r3
 80129ac:	f001 fdf8 	bl	80145a0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	330e      	adds	r3, #14
 80129b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129b6:	6812      	ldr	r2, [r2, #0]
 80129b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	3318      	adds	r3, #24
 80129be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129c0:	6812      	ldr	r2, [r2, #0]
 80129c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	2200      	movs	r2, #0
 80129c8:	701a      	strb	r2, [r3, #0]
 80129ca:	2200      	movs	r2, #0
 80129cc:	f042 0201 	orr.w	r2, r2, #1
 80129d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	2200      	movs	r2, #0
 80129d6:	f042 0208 	orr.w	r2, r2, #8
 80129da:	709a      	strb	r2, [r3, #2]
 80129dc:	2200      	movs	r2, #0
 80129de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	2206      	movs	r2, #6
 80129e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	2204      	movs	r2, #4
 80129ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80129ec:	f640 0306 	movw	r3, #2054	; 0x806
 80129f0:	9300      	str	r3, [sp, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	68ba      	ldr	r2, [r7, #8]
 80129f6:	69b9      	ldr	r1, [r7, #24]
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f001 fb75 	bl	80140e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80129fe:	69b8      	ldr	r0, [r7, #24]
 8012a00:	f7f8 f964 	bl	800accc <pbuf_free>
  p = NULL;
 8012a04:	2300      	movs	r3, #0
 8012a06:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012a08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3720      	adds	r7, #32
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	080184f0 	.word	0x080184f0
 8012a18:	08018640 	.word	0x08018640
 8012a1c:	08018568 	.word	0x08018568
 8012a20:	080186f0 	.word	0x080186f0
 8012a24:	08018724 	.word	0x08018724

08012a28 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b088      	sub	sp, #32
 8012a2c:	af04      	add	r7, sp, #16
 8012a2e:	60f8      	str	r0, [r7, #12]
 8012a30:	60b9      	str	r1, [r7, #8]
 8012a32:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012a44:	2201      	movs	r2, #1
 8012a46:	9203      	str	r2, [sp, #12]
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	9202      	str	r2, [sp, #8]
 8012a4c:	4a06      	ldr	r2, [pc, #24]	; (8012a68 <etharp_request_dst+0x40>)
 8012a4e:	9201      	str	r2, [sp, #4]
 8012a50:	9300      	str	r3, [sp, #0]
 8012a52:	4603      	mov	r3, r0
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	68f8      	ldr	r0, [r7, #12]
 8012a58:	f7ff ff5a 	bl	8012910 <etharp_raw>
 8012a5c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3710      	adds	r7, #16
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	08018cec 	.word	0x08018cec

08012a6c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012a76:	4a05      	ldr	r2, [pc, #20]	; (8012a8c <etharp_request+0x20>)
 8012a78:	6839      	ldr	r1, [r7, #0]
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff ffd4 	bl	8012a28 <etharp_request_dst>
 8012a80:	4603      	mov	r3, r0
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	08018ce4 	.word	0x08018ce4

08012a90 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b08e      	sub	sp, #56	; 0x38
 8012a94:	af04      	add	r7, sp, #16
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012a9a:	4b79      	ldr	r3, [pc, #484]	; (8012c80 <icmp_input+0x1f0>)
 8012a9c:	689b      	ldr	r3, [r3, #8]
 8012a9e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	f003 030f 	and.w	r3, r3, #15
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ab2:	2b13      	cmp	r3, #19
 8012ab4:	f240 80cd 	bls.w	8012c52 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	895b      	ldrh	r3, [r3, #10]
 8012abc:	2b03      	cmp	r3, #3
 8012abe:	f240 80ca 	bls.w	8012c56 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012acc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	f000 80b7 	beq.w	8012c44 <icmp_input+0x1b4>
 8012ad6:	2b08      	cmp	r3, #8
 8012ad8:	f040 80b7 	bne.w	8012c4a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012adc:	4b69      	ldr	r3, [pc, #420]	; (8012c84 <icmp_input+0x1f4>)
 8012ade:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012ae0:	4b67      	ldr	r3, [pc, #412]	; (8012c80 <icmp_input+0x1f0>)
 8012ae2:	695b      	ldr	r3, [r3, #20]
 8012ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ae8:	2be0      	cmp	r3, #224	; 0xe0
 8012aea:	f000 80bb 	beq.w	8012c64 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012aee:	4b64      	ldr	r3, [pc, #400]	; (8012c80 <icmp_input+0x1f0>)
 8012af0:	695b      	ldr	r3, [r3, #20]
 8012af2:	4a63      	ldr	r2, [pc, #396]	; (8012c80 <icmp_input+0x1f0>)
 8012af4:	6812      	ldr	r2, [r2, #0]
 8012af6:	4611      	mov	r1, r2
 8012af8:	4618      	mov	r0, r3
 8012afa:	f000 fbed 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	f040 80b1 	bne.w	8012c68 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	891b      	ldrh	r3, [r3, #8]
 8012b0a:	2b07      	cmp	r3, #7
 8012b0c:	f240 80a5 	bls.w	8012c5a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012b10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b12:	330e      	adds	r3, #14
 8012b14:	4619      	mov	r1, r3
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7f8 f842 	bl	800aba0 <pbuf_add_header>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d04b      	beq.n	8012bba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	891a      	ldrh	r2, [r3, #8]
 8012b26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b28:	4413      	add	r3, r2
 8012b2a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	891b      	ldrh	r3, [r3, #8]
 8012b30:	8b7a      	ldrh	r2, [r7, #26]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	f0c0 809a 	bcc.w	8012c6c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012b38:	8b7b      	ldrh	r3, [r7, #26]
 8012b3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b3e:	4619      	mov	r1, r3
 8012b40:	200e      	movs	r0, #14
 8012b42:	f7f7 fddf 	bl	800a704 <pbuf_alloc>
 8012b46:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	f000 8090 	beq.w	8012c70 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	895b      	ldrh	r3, [r3, #10]
 8012b54:	461a      	mov	r2, r3
 8012b56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b58:	3308      	adds	r3, #8
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d203      	bcs.n	8012b66 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012b5e:	6978      	ldr	r0, [r7, #20]
 8012b60:	f7f8 f8b4 	bl	800accc <pbuf_free>
          goto icmperr;
 8012b64:	e085      	b.n	8012c72 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	685b      	ldr	r3, [r3, #4]
 8012b6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f001 fd16 	bl	80145a0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012b74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b76:	4619      	mov	r1, r3
 8012b78:	6978      	ldr	r0, [r7, #20]
 8012b7a:	f7f8 f821 	bl	800abc0 <pbuf_remove_header>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d009      	beq.n	8012b98 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012b84:	4b40      	ldr	r3, [pc, #256]	; (8012c88 <icmp_input+0x1f8>)
 8012b86:	22b6      	movs	r2, #182	; 0xb6
 8012b88:	4940      	ldr	r1, [pc, #256]	; (8012c8c <icmp_input+0x1fc>)
 8012b8a:	4841      	ldr	r0, [pc, #260]	; (8012c90 <icmp_input+0x200>)
 8012b8c:	f001 fd1e 	bl	80145cc <iprintf>
          pbuf_free(r);
 8012b90:	6978      	ldr	r0, [r7, #20]
 8012b92:	f7f8 f89b 	bl	800accc <pbuf_free>
          goto icmperr;
 8012b96:	e06c      	b.n	8012c72 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012b98:	6879      	ldr	r1, [r7, #4]
 8012b9a:	6978      	ldr	r0, [r7, #20]
 8012b9c:	f7f8 f9ba 	bl	800af14 <pbuf_copy>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d003      	beq.n	8012bae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012ba6:	6978      	ldr	r0, [r7, #20]
 8012ba8:	f7f8 f890 	bl	800accc <pbuf_free>
          goto icmperr;
 8012bac:	e061      	b.n	8012c72 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f7f8 f88c 	bl	800accc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	607b      	str	r3, [r7, #4]
 8012bb8:	e00f      	b.n	8012bda <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012bba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012bbc:	330e      	adds	r3, #14
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7f7 fffd 	bl	800abc0 <pbuf_remove_header>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d006      	beq.n	8012bda <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012bcc:	4b2e      	ldr	r3, [pc, #184]	; (8012c88 <icmp_input+0x1f8>)
 8012bce:	22c7      	movs	r2, #199	; 0xc7
 8012bd0:	4930      	ldr	r1, [pc, #192]	; (8012c94 <icmp_input+0x204>)
 8012bd2:	482f      	ldr	r0, [pc, #188]	; (8012c90 <icmp_input+0x200>)
 8012bd4:	f001 fcfa 	bl	80145cc <iprintf>
          goto icmperr;
 8012bd8:	e04b      	b.n	8012c72 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012be2:	4619      	mov	r1, r3
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f7f7 ffdb 	bl	800aba0 <pbuf_add_header>
 8012bea:	4603      	mov	r3, r0
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d12b      	bne.n	8012c48 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012bfe:	4b20      	ldr	r3, [pc, #128]	; (8012c80 <icmp_input+0x1f0>)
 8012c00:	691a      	ldr	r2, [r3, #16]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	709a      	strb	r2, [r3, #2]
 8012c12:	2200      	movs	r2, #0
 8012c14:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	22ff      	movs	r2, #255	; 0xff
 8012c1a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	729a      	strb	r2, [r3, #10]
 8012c22:	2200      	movs	r2, #0
 8012c24:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	9302      	str	r3, [sp, #8]
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	9301      	str	r3, [sp, #4]
 8012c2e:	2300      	movs	r3, #0
 8012c30:	9300      	str	r3, [sp, #0]
 8012c32:	23ff      	movs	r3, #255	; 0xff
 8012c34:	2200      	movs	r2, #0
 8012c36:	69f9      	ldr	r1, [r7, #28]
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f000 fa75 	bl	8013128 <ip4_output_if>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012c42:	e001      	b.n	8012c48 <icmp_input+0x1b8>
      break;
 8012c44:	bf00      	nop
 8012c46:	e000      	b.n	8012c4a <icmp_input+0x1ba>
      break;
 8012c48:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f7f8 f83e 	bl	800accc <pbuf_free>
  return;
 8012c50:	e013      	b.n	8012c7a <icmp_input+0x1ea>
    goto lenerr;
 8012c52:	bf00      	nop
 8012c54:	e002      	b.n	8012c5c <icmp_input+0x1cc>
    goto lenerr;
 8012c56:	bf00      	nop
 8012c58:	e000      	b.n	8012c5c <icmp_input+0x1cc>
        goto lenerr;
 8012c5a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f7f8 f835 	bl	800accc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012c62:	e00a      	b.n	8012c7a <icmp_input+0x1ea>
        goto icmperr;
 8012c64:	bf00      	nop
 8012c66:	e004      	b.n	8012c72 <icmp_input+0x1e2>
        goto icmperr;
 8012c68:	bf00      	nop
 8012c6a:	e002      	b.n	8012c72 <icmp_input+0x1e2>
          goto icmperr;
 8012c6c:	bf00      	nop
 8012c6e:	e000      	b.n	8012c72 <icmp_input+0x1e2>
          goto icmperr;
 8012c70:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f7f8 f82a 	bl	800accc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012c78:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012c7a:	3728      	adds	r7, #40	; 0x28
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	200073b4 	.word	0x200073b4
 8012c84:	200073c8 	.word	0x200073c8
 8012c88:	08018768 	.word	0x08018768
 8012c8c:	080187a0 	.word	0x080187a0
 8012c90:	080187d8 	.word	0x080187d8
 8012c94:	08018800 	.word	0x08018800

08012c98 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012ca4:	78fb      	ldrb	r3, [r7, #3]
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	2103      	movs	r1, #3
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f000 f814 	bl	8012cd8 <icmp_send_response>
}
 8012cb0:	bf00      	nop
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	460b      	mov	r3, r1
 8012cc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012cc4:	78fb      	ldrb	r3, [r7, #3]
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	210b      	movs	r1, #11
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f000 f804 	bl	8012cd8 <icmp_send_response>
}
 8012cd0:	bf00      	nop
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}

08012cd8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b08c      	sub	sp, #48	; 0x30
 8012cdc:	af04      	add	r7, sp, #16
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	70fb      	strb	r3, [r7, #3]
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012ce8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cec:	2124      	movs	r1, #36	; 0x24
 8012cee:	2022      	movs	r0, #34	; 0x22
 8012cf0:	f7f7 fd08 	bl	800a704 <pbuf_alloc>
 8012cf4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d04c      	beq.n	8012d96 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	895b      	ldrh	r3, [r3, #10]
 8012d00:	2b23      	cmp	r3, #35	; 0x23
 8012d02:	d806      	bhi.n	8012d12 <icmp_send_response+0x3a>
 8012d04:	4b26      	ldr	r3, [pc, #152]	; (8012da0 <icmp_send_response+0xc8>)
 8012d06:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012d0a:	4926      	ldr	r1, [pc, #152]	; (8012da4 <icmp_send_response+0xcc>)
 8012d0c:	4826      	ldr	r0, [pc, #152]	; (8012da8 <icmp_send_response+0xd0>)
 8012d0e:	f001 fc5d 	bl	80145cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	78fa      	ldrb	r2, [r7, #3]
 8012d22:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	78ba      	ldrb	r2, [r7, #2]
 8012d28:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	711a      	strb	r2, [r3, #4]
 8012d30:	2200      	movs	r2, #0
 8012d32:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	2200      	movs	r2, #0
 8012d38:	719a      	strb	r2, [r3, #6]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012d3e:	69fb      	ldr	r3, [r7, #28]
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	f103 0008 	add.w	r0, r3, #8
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	221c      	movs	r2, #28
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	f001 fc27 	bl	80145a0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	68db      	ldr	r3, [r3, #12]
 8012d56:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012d58:	f107 030c 	add.w	r3, r7, #12
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f000 f825 	bl	8012dac <ip4_route>
 8012d62:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d011      	beq.n	8012d8e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	709a      	strb	r2, [r3, #2]
 8012d70:	2200      	movs	r2, #0
 8012d72:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012d74:	f107 020c 	add.w	r2, r7, #12
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	9302      	str	r3, [sp, #8]
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	9301      	str	r3, [sp, #4]
 8012d80:	2300      	movs	r3, #0
 8012d82:	9300      	str	r3, [sp, #0]
 8012d84:	23ff      	movs	r3, #255	; 0xff
 8012d86:	2100      	movs	r1, #0
 8012d88:	69f8      	ldr	r0, [r7, #28]
 8012d8a:	f000 f9cd 	bl	8013128 <ip4_output_if>
  }
  pbuf_free(q);
 8012d8e:	69f8      	ldr	r0, [r7, #28]
 8012d90:	f7f7 ff9c 	bl	800accc <pbuf_free>
 8012d94:	e000      	b.n	8012d98 <icmp_send_response+0xc0>
    return;
 8012d96:	bf00      	nop
}
 8012d98:	3720      	adds	r7, #32
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	08018768 	.word	0x08018768
 8012da4:	08018834 	.word	0x08018834
 8012da8:	080187d8 	.word	0x080187d8

08012dac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012db4:	4b33      	ldr	r3, [pc, #204]	; (8012e84 <ip4_route+0xd8>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	60fb      	str	r3, [r7, #12]
 8012dba:	e036      	b.n	8012e2a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dc2:	f003 0301 	and.w	r3, r3, #1
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d02b      	beq.n	8012e24 <ip4_route+0x78>
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dd2:	089b      	lsrs	r3, r3, #2
 8012dd4:	f003 0301 	and.w	r3, r3, #1
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d022      	beq.n	8012e24 <ip4_route+0x78>
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	3304      	adds	r3, #4
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d01d      	beq.n	8012e24 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	3304      	adds	r3, #4
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	405a      	eors	r2, r3
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	3308      	adds	r3, #8
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	4013      	ands	r3, r2
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d101      	bne.n	8012e04 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	e038      	b.n	8012e76 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e0a:	f003 0302 	and.w	r3, r3, #2
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d108      	bne.n	8012e24 <ip4_route+0x78>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	330c      	adds	r3, #12
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d101      	bne.n	8012e24 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	e028      	b.n	8012e76 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	60fb      	str	r3, [r7, #12]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d1c5      	bne.n	8012dbc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012e30:	4b15      	ldr	r3, [pc, #84]	; (8012e88 <ip4_route+0xdc>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d01a      	beq.n	8012e6e <ip4_route+0xc2>
 8012e38:	4b13      	ldr	r3, [pc, #76]	; (8012e88 <ip4_route+0xdc>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e40:	f003 0301 	and.w	r3, r3, #1
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d012      	beq.n	8012e6e <ip4_route+0xc2>
 8012e48:	4b0f      	ldr	r3, [pc, #60]	; (8012e88 <ip4_route+0xdc>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e50:	f003 0304 	and.w	r3, r3, #4
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d00a      	beq.n	8012e6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012e58:	4b0b      	ldr	r3, [pc, #44]	; (8012e88 <ip4_route+0xdc>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	3304      	adds	r3, #4
 8012e5e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d004      	beq.n	8012e6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8012e6c:	d101      	bne.n	8012e72 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	e001      	b.n	8012e76 <ip4_route+0xca>
  }

  return netif_default;
 8012e72:	4b05      	ldr	r3, [pc, #20]	; (8012e88 <ip4_route+0xdc>)
 8012e74:	681b      	ldr	r3, [r3, #0]
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3714      	adds	r7, #20
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr
 8012e82:	bf00      	nop
 8012e84:	2000aab8 	.word	0x2000aab8
 8012e88:	2000aabc 	.word	0x2000aabc

08012e8c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e9a:	f003 0301 	and.w	r3, r3, #1
 8012e9e:	b2db      	uxtb	r3, r3
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d016      	beq.n	8012ed2 <ip4_input_accept+0x46>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	3304      	adds	r3, #4
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d011      	beq.n	8012ed2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012eae:	4b0b      	ldr	r3, [pc, #44]	; (8012edc <ip4_input_accept+0x50>)
 8012eb0:	695a      	ldr	r2, [r3, #20]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	3304      	adds	r3, #4
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d008      	beq.n	8012ece <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012ebc:	4b07      	ldr	r3, [pc, #28]	; (8012edc <ip4_input_accept+0x50>)
 8012ebe:	695b      	ldr	r3, [r3, #20]
 8012ec0:	6879      	ldr	r1, [r7, #4]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 fa08 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 8012ec8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d001      	beq.n	8012ed2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	e000      	b.n	8012ed4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012ed2:	2300      	movs	r3, #0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	200073b4 	.word	0x200073b4

08012ee0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b086      	sub	sp, #24
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	091b      	lsrs	r3, r3, #4
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	2b04      	cmp	r3, #4
 8012efa:	d004      	beq.n	8012f06 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f7f7 fee5 	bl	800accc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012f02:	2300      	movs	r3, #0
 8012f04:	e107      	b.n	8013116 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	f003 030f 	and.w	r3, r3, #15
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	009b      	lsls	r3, r3, #2
 8012f12:	b2db      	uxtb	r3, r3
 8012f14:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	885b      	ldrh	r3, [r3, #2]
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7f6 fb29 	bl	8009574 <lwip_htons>
 8012f22:	4603      	mov	r3, r0
 8012f24:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	891b      	ldrh	r3, [r3, #8]
 8012f2a:	89ba      	ldrh	r2, [r7, #12]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d204      	bcs.n	8012f3a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012f30:	89bb      	ldrh	r3, [r7, #12]
 8012f32:	4619      	mov	r1, r3
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7f7 fd43 	bl	800a9c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	895b      	ldrh	r3, [r3, #10]
 8012f3e:	89fa      	ldrh	r2, [r7, #14]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d807      	bhi.n	8012f54 <ip4_input+0x74>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	891b      	ldrh	r3, [r3, #8]
 8012f48:	89ba      	ldrh	r2, [r7, #12]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d802      	bhi.n	8012f54 <ip4_input+0x74>
 8012f4e:	89fb      	ldrh	r3, [r7, #14]
 8012f50:	2b13      	cmp	r3, #19
 8012f52:	d804      	bhi.n	8012f5e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f7f7 feb9 	bl	800accc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e0db      	b.n	8013116 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	691b      	ldr	r3, [r3, #16]
 8012f62:	4a6f      	ldr	r2, [pc, #444]	; (8013120 <ip4_input+0x240>)
 8012f64:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	4a6d      	ldr	r2, [pc, #436]	; (8013120 <ip4_input+0x240>)
 8012f6c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012f6e:	4b6c      	ldr	r3, [pc, #432]	; (8013120 <ip4_input+0x240>)
 8012f70:	695b      	ldr	r3, [r3, #20]
 8012f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f76:	2be0      	cmp	r3, #224	; 0xe0
 8012f78:	d112      	bne.n	8012fa0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f80:	f003 0301 	and.w	r3, r3, #1
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d007      	beq.n	8012f9a <ip4_input+0xba>
 8012f8a:	683b      	ldr	r3, [r7, #0]
 8012f8c:	3304      	adds	r3, #4
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d002      	beq.n	8012f9a <ip4_input+0xba>
      netif = inp;
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	613b      	str	r3, [r7, #16]
 8012f98:	e02a      	b.n	8012ff0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	613b      	str	r3, [r7, #16]
 8012f9e:	e027      	b.n	8012ff0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012fa0:	6838      	ldr	r0, [r7, #0]
 8012fa2:	f7ff ff73 	bl	8012e8c <ip4_input_accept>
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d002      	beq.n	8012fb2 <ip4_input+0xd2>
      netif = inp;
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	613b      	str	r3, [r7, #16]
 8012fb0:	e01e      	b.n	8012ff0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012fb6:	4b5a      	ldr	r3, [pc, #360]	; (8013120 <ip4_input+0x240>)
 8012fb8:	695b      	ldr	r3, [r3, #20]
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8012fbe:	d017      	beq.n	8012ff0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012fc0:	4b58      	ldr	r3, [pc, #352]	; (8013124 <ip4_input+0x244>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	613b      	str	r3, [r7, #16]
 8012fc6:	e00e      	b.n	8012fe6 <ip4_input+0x106>
          if (netif == inp) {
 8012fc8:	693a      	ldr	r2, [r7, #16]
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d006      	beq.n	8012fde <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012fd0:	6938      	ldr	r0, [r7, #16]
 8012fd2:	f7ff ff5b 	bl	8012e8c <ip4_input_accept>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d108      	bne.n	8012fee <ip4_input+0x10e>
 8012fdc:	e000      	b.n	8012fe0 <ip4_input+0x100>
            continue;
 8012fde:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	613b      	str	r3, [r7, #16]
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d1ed      	bne.n	8012fc8 <ip4_input+0xe8>
 8012fec:	e000      	b.n	8012ff0 <ip4_input+0x110>
            break;
 8012fee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ff0:	4b4b      	ldr	r3, [pc, #300]	; (8013120 <ip4_input+0x240>)
 8012ff2:	691b      	ldr	r3, [r3, #16]
 8012ff4:	6839      	ldr	r1, [r7, #0]
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f000 f96e 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d105      	bne.n	801300e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013002:	4b47      	ldr	r3, [pc, #284]	; (8013120 <ip4_input+0x240>)
 8013004:	691b      	ldr	r3, [r3, #16]
 8013006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801300a:	2be0      	cmp	r3, #224	; 0xe0
 801300c:	d104      	bne.n	8013018 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7f7 fe5c 	bl	800accc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013014:	2300      	movs	r3, #0
 8013016:	e07e      	b.n	8013116 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d104      	bne.n	8013028 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f7f7 fe54 	bl	800accc <pbuf_free>
    return ERR_OK;
 8013024:	2300      	movs	r3, #0
 8013026:	e076      	b.n	8013116 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	88db      	ldrh	r3, [r3, #6]
 801302c:	b29b      	uxth	r3, r3
 801302e:	461a      	mov	r2, r3
 8013030:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013034:	4013      	ands	r3, r2
 8013036:	2b00      	cmp	r3, #0
 8013038:	d00b      	beq.n	8013052 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 fc92 	bl	8013964 <ip4_reass>
 8013040:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d101      	bne.n	801304c <ip4_input+0x16c>
      return ERR_OK;
 8013048:	2300      	movs	r3, #0
 801304a:	e064      	b.n	8013116 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013052:	4a33      	ldr	r2, [pc, #204]	; (8013120 <ip4_input+0x240>)
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013058:	4a31      	ldr	r2, [pc, #196]	; (8013120 <ip4_input+0x240>)
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801305e:	4a30      	ldr	r2, [pc, #192]	; (8013120 <ip4_input+0x240>)
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	f003 030f 	and.w	r3, r3, #15
 801306c:	b2db      	uxtb	r3, r3
 801306e:	009b      	lsls	r3, r3, #2
 8013070:	b2db      	uxtb	r3, r3
 8013072:	b29a      	uxth	r2, r3
 8013074:	4b2a      	ldr	r3, [pc, #168]	; (8013120 <ip4_input+0x240>)
 8013076:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013078:	89fb      	ldrh	r3, [r7, #14]
 801307a:	4619      	mov	r1, r3
 801307c:	6878      	ldr	r0, [r7, #4]
 801307e:	f7f7 fd9f 	bl	800abc0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	7a5b      	ldrb	r3, [r3, #9]
 8013086:	2b11      	cmp	r3, #17
 8013088:	d006      	beq.n	8013098 <ip4_input+0x1b8>
 801308a:	2b11      	cmp	r3, #17
 801308c:	dc13      	bgt.n	80130b6 <ip4_input+0x1d6>
 801308e:	2b01      	cmp	r3, #1
 8013090:	d00c      	beq.n	80130ac <ip4_input+0x1cc>
 8013092:	2b06      	cmp	r3, #6
 8013094:	d005      	beq.n	80130a2 <ip4_input+0x1c2>
 8013096:	e00e      	b.n	80130b6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013098:	6839      	ldr	r1, [r7, #0]
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f7fe fb5a 	bl	8011754 <udp_input>
        break;
 80130a0:	e026      	b.n	80130f0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f7f9 ff17 	bl	800ced8 <tcp_input>
        break;
 80130aa:	e021      	b.n	80130f0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80130ac:	6839      	ldr	r1, [r7, #0]
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f7ff fcee 	bl	8012a90 <icmp_input>
        break;
 80130b4:	e01c      	b.n	80130f0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80130b6:	4b1a      	ldr	r3, [pc, #104]	; (8013120 <ip4_input+0x240>)
 80130b8:	695b      	ldr	r3, [r3, #20]
 80130ba:	6939      	ldr	r1, [r7, #16]
 80130bc:	4618      	mov	r0, r3
 80130be:	f000 f90b 	bl	80132d8 <ip4_addr_isbroadcast_u32>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d10f      	bne.n	80130e8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80130c8:	4b15      	ldr	r3, [pc, #84]	; (8013120 <ip4_input+0x240>)
 80130ca:	695b      	ldr	r3, [r3, #20]
 80130cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80130d0:	2be0      	cmp	r3, #224	; 0xe0
 80130d2:	d009      	beq.n	80130e8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80130d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80130d8:	4619      	mov	r1, r3
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f7f7 fde3 	bl	800aca6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80130e0:	2102      	movs	r1, #2
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f7ff fdd8 	bl	8012c98 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f7f7 fdef 	bl	800accc <pbuf_free>
        break;
 80130ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80130f0:	4b0b      	ldr	r3, [pc, #44]	; (8013120 <ip4_input+0x240>)
 80130f2:	2200      	movs	r2, #0
 80130f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80130f6:	4b0a      	ldr	r3, [pc, #40]	; (8013120 <ip4_input+0x240>)
 80130f8:	2200      	movs	r2, #0
 80130fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80130fc:	4b08      	ldr	r3, [pc, #32]	; (8013120 <ip4_input+0x240>)
 80130fe:	2200      	movs	r2, #0
 8013100:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013102:	4b07      	ldr	r3, [pc, #28]	; (8013120 <ip4_input+0x240>)
 8013104:	2200      	movs	r2, #0
 8013106:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013108:	4b05      	ldr	r3, [pc, #20]	; (8013120 <ip4_input+0x240>)
 801310a:	2200      	movs	r2, #0
 801310c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801310e:	4b04      	ldr	r3, [pc, #16]	; (8013120 <ip4_input+0x240>)
 8013110:	2200      	movs	r2, #0
 8013112:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013114:	2300      	movs	r3, #0
}
 8013116:	4618      	mov	r0, r3
 8013118:	3718      	adds	r7, #24
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}
 801311e:	bf00      	nop
 8013120:	200073b4 	.word	0x200073b4
 8013124:	2000aab8 	.word	0x2000aab8

08013128 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b08a      	sub	sp, #40	; 0x28
 801312c:	af04      	add	r7, sp, #16
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	607a      	str	r2, [r7, #4]
 8013134:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d009      	beq.n	8013154 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d003      	beq.n	801314e <ip4_output_if+0x26>
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d102      	bne.n	8013154 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013150:	3304      	adds	r3, #4
 8013152:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013154:	78fa      	ldrb	r2, [r7, #3]
 8013156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013158:	9302      	str	r3, [sp, #8]
 801315a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801315e:	9301      	str	r3, [sp, #4]
 8013160:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013164:	9300      	str	r3, [sp, #0]
 8013166:	4613      	mov	r3, r2
 8013168:	687a      	ldr	r2, [r7, #4]
 801316a:	6979      	ldr	r1, [r7, #20]
 801316c:	68f8      	ldr	r0, [r7, #12]
 801316e:	f000 f805 	bl	801317c <ip4_output_if_src>
 8013172:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013174:	4618      	mov	r0, r3
 8013176:	3718      	adds	r7, #24
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b088      	sub	sp, #32
 8013180:	af00      	add	r7, sp, #0
 8013182:	60f8      	str	r0, [r7, #12]
 8013184:	60b9      	str	r1, [r7, #8]
 8013186:	607a      	str	r2, [r7, #4]
 8013188:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	7b9b      	ldrb	r3, [r3, #14]
 801318e:	2b01      	cmp	r3, #1
 8013190:	d006      	beq.n	80131a0 <ip4_output_if_src+0x24>
 8013192:	4b4b      	ldr	r3, [pc, #300]	; (80132c0 <ip4_output_if_src+0x144>)
 8013194:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013198:	494a      	ldr	r1, [pc, #296]	; (80132c4 <ip4_output_if_src+0x148>)
 801319a:	484b      	ldr	r0, [pc, #300]	; (80132c8 <ip4_output_if_src+0x14c>)
 801319c:	f001 fa16 	bl	80145cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d060      	beq.n	8013268 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80131a6:	2314      	movs	r3, #20
 80131a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80131aa:	2114      	movs	r1, #20
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f7f7 fcf7 	bl	800aba0 <pbuf_add_header>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d002      	beq.n	80131be <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80131b8:	f06f 0301 	mvn.w	r3, #1
 80131bc:	e07c      	b.n	80132b8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	895b      	ldrh	r3, [r3, #10]
 80131c8:	2b13      	cmp	r3, #19
 80131ca:	d806      	bhi.n	80131da <ip4_output_if_src+0x5e>
 80131cc:	4b3c      	ldr	r3, [pc, #240]	; (80132c0 <ip4_output_if_src+0x144>)
 80131ce:	f44f 7262 	mov.w	r2, #904	; 0x388
 80131d2:	493e      	ldr	r1, [pc, #248]	; (80132cc <ip4_output_if_src+0x150>)
 80131d4:	483c      	ldr	r0, [pc, #240]	; (80132c8 <ip4_output_if_src+0x14c>)
 80131d6:	f001 f9f9 	bl	80145cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80131da:	69fb      	ldr	r3, [r7, #28]
 80131dc:	78fa      	ldrb	r2, [r7, #3]
 80131de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80131e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80131f0:	8b7b      	ldrh	r3, [r7, #26]
 80131f2:	089b      	lsrs	r3, r3, #2
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131fc:	b2da      	uxtb	r2, r3
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013208:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	891b      	ldrh	r3, [r3, #8]
 801320e:	4618      	mov	r0, r3
 8013210:	f7f6 f9b0 	bl	8009574 <lwip_htons>
 8013214:	4603      	mov	r3, r0
 8013216:	461a      	mov	r2, r3
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	2200      	movs	r2, #0
 8013220:	719a      	strb	r2, [r3, #6]
 8013222:	2200      	movs	r2, #0
 8013224:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013226:	4b2a      	ldr	r3, [pc, #168]	; (80132d0 <ip4_output_if_src+0x154>)
 8013228:	881b      	ldrh	r3, [r3, #0]
 801322a:	4618      	mov	r0, r3
 801322c:	f7f6 f9a2 	bl	8009574 <lwip_htons>
 8013230:	4603      	mov	r3, r0
 8013232:	461a      	mov	r2, r3
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013238:	4b25      	ldr	r3, [pc, #148]	; (80132d0 <ip4_output_if_src+0x154>)
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	3301      	adds	r3, #1
 801323e:	b29a      	uxth	r2, r3
 8013240:	4b23      	ldr	r3, [pc, #140]	; (80132d0 <ip4_output_if_src+0x154>)
 8013242:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d104      	bne.n	8013254 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801324a:	4b22      	ldr	r3, [pc, #136]	; (80132d4 <ip4_output_if_src+0x158>)
 801324c:	681a      	ldr	r2, [r3, #0]
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	60da      	str	r2, [r3, #12]
 8013252:	e003      	b.n	801325c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	69fb      	ldr	r3, [r7, #28]
 801325a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801325c:	69fb      	ldr	r3, [r7, #28]
 801325e:	2200      	movs	r2, #0
 8013260:	729a      	strb	r2, [r3, #10]
 8013262:	2200      	movs	r2, #0
 8013264:	72da      	strb	r2, [r3, #11]
 8013266:	e00f      	b.n	8013288 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	895b      	ldrh	r3, [r3, #10]
 801326c:	2b13      	cmp	r3, #19
 801326e:	d802      	bhi.n	8013276 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013270:	f06f 0301 	mvn.w	r3, #1
 8013274:	e020      	b.n	80132b8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	691b      	ldr	r3, [r3, #16]
 8013280:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013282:	f107 0314 	add.w	r3, r7, #20
 8013286:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801328c:	2b00      	cmp	r3, #0
 801328e:	d00c      	beq.n	80132aa <ip4_output_if_src+0x12e>
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	891a      	ldrh	r2, [r3, #8]
 8013294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013296:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013298:	429a      	cmp	r2, r3
 801329a:	d906      	bls.n	80132aa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80132a0:	68f8      	ldr	r0, [r7, #12]
 80132a2:	f000 fd4d 	bl	8013d40 <ip4_frag>
 80132a6:	4603      	mov	r3, r0
 80132a8:	e006      	b.n	80132b8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80132aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ac:	695b      	ldr	r3, [r3, #20]
 80132ae:	687a      	ldr	r2, [r7, #4]
 80132b0:	68f9      	ldr	r1, [r7, #12]
 80132b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132b4:	4798      	blx	r3
 80132b6:	4603      	mov	r3, r0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3720      	adds	r7, #32
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	08018860 	.word	0x08018860
 80132c4:	08018894 	.word	0x08018894
 80132c8:	080188a0 	.word	0x080188a0
 80132cc:	080188c8 	.word	0x080188c8
 80132d0:	200041ce 	.word	0x200041ce
 80132d4:	08018ce0 	.word	0x08018ce0

080132d8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80132d8:	b480      	push	{r7}
 80132da:	b085      	sub	sp, #20
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ec:	d002      	beq.n	80132f4 <ip4_addr_isbroadcast_u32+0x1c>
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d101      	bne.n	80132f8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80132f4:	2301      	movs	r3, #1
 80132f6:	e02a      	b.n	801334e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132fe:	f003 0302 	and.w	r3, r3, #2
 8013302:	2b00      	cmp	r3, #0
 8013304:	d101      	bne.n	801330a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013306:	2300      	movs	r3, #0
 8013308:	e021      	b.n	801334e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	3304      	adds	r3, #4
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	687a      	ldr	r2, [r7, #4]
 8013312:	429a      	cmp	r2, r3
 8013314:	d101      	bne.n	801331a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013316:	2300      	movs	r3, #0
 8013318:	e019      	b.n	801334e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801331a:	68fa      	ldr	r2, [r7, #12]
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	3304      	adds	r3, #4
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	405a      	eors	r2, r3
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	3308      	adds	r3, #8
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4013      	ands	r3, r2
 801332c:	2b00      	cmp	r3, #0
 801332e:	d10d      	bne.n	801334c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	3308      	adds	r3, #8
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	43da      	mvns	r2, r3
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	3308      	adds	r3, #8
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013344:	429a      	cmp	r2, r3
 8013346:	d101      	bne.n	801334c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013348:	2301      	movs	r3, #1
 801334a:	e000      	b.n	801334e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801334c:	2300      	movs	r3, #0
  }
}
 801334e:	4618      	mov	r0, r3
 8013350:	3714      	adds	r7, #20
 8013352:	46bd      	mov	sp, r7
 8013354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013358:	4770      	bx	lr
	...

0801335c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013362:	2300      	movs	r3, #0
 8013364:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013366:	4b12      	ldr	r3, [pc, #72]	; (80133b0 <ip_reass_tmr+0x54>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801336c:	e018      	b.n	80133a0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	7fdb      	ldrb	r3, [r3, #31]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00b      	beq.n	801338e <ip_reass_tmr+0x32>
      r->timer--;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	7fdb      	ldrb	r3, [r3, #31]
 801337a:	3b01      	subs	r3, #1
 801337c:	b2da      	uxtb	r2, r3
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	60fb      	str	r3, [r7, #12]
 801338c:	e008      	b.n	80133a0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013398:	68b9      	ldr	r1, [r7, #8]
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f000 f80a 	bl	80133b4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d1e3      	bne.n	801336e <ip_reass_tmr+0x12>
    }
  }
}
 80133a6:	bf00      	nop
 80133a8:	bf00      	nop
 80133aa:	3710      	adds	r7, #16
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	200041d0 	.word	0x200041d0

080133b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b088      	sub	sp, #32
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80133be:	2300      	movs	r3, #0
 80133c0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d105      	bne.n	80133d6 <ip_reass_free_complete_datagram+0x22>
 80133ca:	4b45      	ldr	r3, [pc, #276]	; (80134e0 <ip_reass_free_complete_datagram+0x12c>)
 80133cc:	22ab      	movs	r2, #171	; 0xab
 80133ce:	4945      	ldr	r1, [pc, #276]	; (80134e4 <ip_reass_free_complete_datagram+0x130>)
 80133d0:	4845      	ldr	r0, [pc, #276]	; (80134e8 <ip_reass_free_complete_datagram+0x134>)
 80133d2:	f001 f8fb 	bl	80145cc <iprintf>
  if (prev != NULL) {
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d00a      	beq.n	80133f2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d005      	beq.n	80133f2 <ip_reass_free_complete_datagram+0x3e>
 80133e6:	4b3e      	ldr	r3, [pc, #248]	; (80134e0 <ip_reass_free_complete_datagram+0x12c>)
 80133e8:	22ad      	movs	r2, #173	; 0xad
 80133ea:	4940      	ldr	r1, [pc, #256]	; (80134ec <ip_reass_free_complete_datagram+0x138>)
 80133ec:	483e      	ldr	r0, [pc, #248]	; (80134e8 <ip_reass_free_complete_datagram+0x134>)
 80133ee:	f001 f8ed 	bl	80145cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	685b      	ldr	r3, [r3, #4]
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	889b      	ldrh	r3, [r3, #4]
 80133fe:	b29b      	uxth	r3, r3
 8013400:	2b00      	cmp	r3, #0
 8013402:	d12a      	bne.n	801345a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	6858      	ldr	r0, [r3, #4]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	3308      	adds	r3, #8
 801341a:	2214      	movs	r2, #20
 801341c:	4619      	mov	r1, r3
 801341e:	f001 f8bf 	bl	80145a0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013422:	2101      	movs	r1, #1
 8013424:	69b8      	ldr	r0, [r7, #24]
 8013426:	f7ff fc47 	bl	8012cb8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801342a:	69b8      	ldr	r0, [r7, #24]
 801342c:	f7f7 fcdc 	bl	800ade8 <pbuf_clen>
 8013430:	4603      	mov	r3, r0
 8013432:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013434:	8bfa      	ldrh	r2, [r7, #30]
 8013436:	8a7b      	ldrh	r3, [r7, #18]
 8013438:	4413      	add	r3, r2
 801343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801343e:	db05      	blt.n	801344c <ip_reass_free_complete_datagram+0x98>
 8013440:	4b27      	ldr	r3, [pc, #156]	; (80134e0 <ip_reass_free_complete_datagram+0x12c>)
 8013442:	22bc      	movs	r2, #188	; 0xbc
 8013444:	492a      	ldr	r1, [pc, #168]	; (80134f0 <ip_reass_free_complete_datagram+0x13c>)
 8013446:	4828      	ldr	r0, [pc, #160]	; (80134e8 <ip_reass_free_complete_datagram+0x134>)
 8013448:	f001 f8c0 	bl	80145cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801344c:	8bfa      	ldrh	r2, [r7, #30]
 801344e:	8a7b      	ldrh	r3, [r7, #18]
 8013450:	4413      	add	r3, r2
 8013452:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013454:	69b8      	ldr	r0, [r7, #24]
 8013456:	f7f7 fc39 	bl	800accc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	685b      	ldr	r3, [r3, #4]
 801345e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013460:	e01f      	b.n	80134a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013468:	69bb      	ldr	r3, [r7, #24]
 801346a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013472:	68f8      	ldr	r0, [r7, #12]
 8013474:	f7f7 fcb8 	bl	800ade8 <pbuf_clen>
 8013478:	4603      	mov	r3, r0
 801347a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801347c:	8bfa      	ldrh	r2, [r7, #30]
 801347e:	8a7b      	ldrh	r3, [r7, #18]
 8013480:	4413      	add	r3, r2
 8013482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013486:	db05      	blt.n	8013494 <ip_reass_free_complete_datagram+0xe0>
 8013488:	4b15      	ldr	r3, [pc, #84]	; (80134e0 <ip_reass_free_complete_datagram+0x12c>)
 801348a:	22cc      	movs	r2, #204	; 0xcc
 801348c:	4918      	ldr	r1, [pc, #96]	; (80134f0 <ip_reass_free_complete_datagram+0x13c>)
 801348e:	4816      	ldr	r0, [pc, #88]	; (80134e8 <ip_reass_free_complete_datagram+0x134>)
 8013490:	f001 f89c 	bl	80145cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013494:	8bfa      	ldrh	r2, [r7, #30]
 8013496:	8a7b      	ldrh	r3, [r7, #18]
 8013498:	4413      	add	r3, r2
 801349a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801349c:	68f8      	ldr	r0, [r7, #12]
 801349e:	f7f7 fc15 	bl	800accc <pbuf_free>
  while (p != NULL) {
 80134a2:	69bb      	ldr	r3, [r7, #24]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d1dc      	bne.n	8013462 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80134a8:	6839      	ldr	r1, [r7, #0]
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f000 f8c2 	bl	8013634 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80134b0:	4b10      	ldr	r3, [pc, #64]	; (80134f4 <ip_reass_free_complete_datagram+0x140>)
 80134b2:	881b      	ldrh	r3, [r3, #0]
 80134b4:	8bfa      	ldrh	r2, [r7, #30]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d905      	bls.n	80134c6 <ip_reass_free_complete_datagram+0x112>
 80134ba:	4b09      	ldr	r3, [pc, #36]	; (80134e0 <ip_reass_free_complete_datagram+0x12c>)
 80134bc:	22d2      	movs	r2, #210	; 0xd2
 80134be:	490e      	ldr	r1, [pc, #56]	; (80134f8 <ip_reass_free_complete_datagram+0x144>)
 80134c0:	4809      	ldr	r0, [pc, #36]	; (80134e8 <ip_reass_free_complete_datagram+0x134>)
 80134c2:	f001 f883 	bl	80145cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80134c6:	4b0b      	ldr	r3, [pc, #44]	; (80134f4 <ip_reass_free_complete_datagram+0x140>)
 80134c8:	881a      	ldrh	r2, [r3, #0]
 80134ca:	8bfb      	ldrh	r3, [r7, #30]
 80134cc:	1ad3      	subs	r3, r2, r3
 80134ce:	b29a      	uxth	r2, r3
 80134d0:	4b08      	ldr	r3, [pc, #32]	; (80134f4 <ip_reass_free_complete_datagram+0x140>)
 80134d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80134d4:	8bfb      	ldrh	r3, [r7, #30]
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3720      	adds	r7, #32
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	080188f8 	.word	0x080188f8
 80134e4:	08018934 	.word	0x08018934
 80134e8:	08018940 	.word	0x08018940
 80134ec:	08018968 	.word	0x08018968
 80134f0:	0801897c 	.word	0x0801897c
 80134f4:	200041d4 	.word	0x200041d4
 80134f8:	0801899c 	.word	0x0801899c

080134fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b08a      	sub	sp, #40	; 0x28
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013506:	2300      	movs	r3, #0
 8013508:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801350a:	2300      	movs	r3, #0
 801350c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801350e:	2300      	movs	r3, #0
 8013510:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013512:	2300      	movs	r3, #0
 8013514:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013516:	2300      	movs	r3, #0
 8013518:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801351a:	4b28      	ldr	r3, [pc, #160]	; (80135bc <ip_reass_remove_oldest_datagram+0xc0>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013520:	e030      	b.n	8013584 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013524:	695a      	ldr	r2, [r3, #20]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	429a      	cmp	r2, r3
 801352c:	d10c      	bne.n	8013548 <ip_reass_remove_oldest_datagram+0x4c>
 801352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013530:	699a      	ldr	r2, [r3, #24]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	691b      	ldr	r3, [r3, #16]
 8013536:	429a      	cmp	r2, r3
 8013538:	d106      	bne.n	8013548 <ip_reass_remove_oldest_datagram+0x4c>
 801353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353c:	899a      	ldrh	r2, [r3, #12]
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	889b      	ldrh	r3, [r3, #4]
 8013542:	b29b      	uxth	r3, r3
 8013544:	429a      	cmp	r2, r3
 8013546:	d014      	beq.n	8013572 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	3301      	adds	r3, #1
 801354c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801354e:	6a3b      	ldr	r3, [r7, #32]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d104      	bne.n	801355e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013556:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013558:	69fb      	ldr	r3, [r7, #28]
 801355a:	61bb      	str	r3, [r7, #24]
 801355c:	e009      	b.n	8013572 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013560:	7fda      	ldrb	r2, [r3, #31]
 8013562:	6a3b      	ldr	r3, [r7, #32]
 8013564:	7fdb      	ldrb	r3, [r3, #31]
 8013566:	429a      	cmp	r2, r3
 8013568:	d803      	bhi.n	8013572 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d001      	beq.n	801357e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801357c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013586:	2b00      	cmp	r3, #0
 8013588:	d1cb      	bne.n	8013522 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801358a:	6a3b      	ldr	r3, [r7, #32]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d008      	beq.n	80135a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013590:	69b9      	ldr	r1, [r7, #24]
 8013592:	6a38      	ldr	r0, [r7, #32]
 8013594:	f7ff ff0e 	bl	80133b4 <ip_reass_free_complete_datagram>
 8013598:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801359a:	697a      	ldr	r2, [r7, #20]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	4413      	add	r3, r2
 80135a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80135a2:	697a      	ldr	r2, [r7, #20]
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	da02      	bge.n	80135b0 <ip_reass_remove_oldest_datagram+0xb4>
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	2b01      	cmp	r3, #1
 80135ae:	dcac      	bgt.n	801350a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80135b0:	697b      	ldr	r3, [r7, #20]
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3728      	adds	r7, #40	; 0x28
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	200041d0 	.word	0x200041d0

080135c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80135ca:	2004      	movs	r0, #4
 80135cc:	f7f6 fc88 	bl	8009ee0 <memp_malloc>
 80135d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d110      	bne.n	80135fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80135d8:	6839      	ldr	r1, [r7, #0]
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f7ff ff8e 	bl	80134fc <ip_reass_remove_oldest_datagram>
 80135e0:	4602      	mov	r2, r0
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	4293      	cmp	r3, r2
 80135e6:	dc03      	bgt.n	80135f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80135e8:	2004      	movs	r0, #4
 80135ea:	f7f6 fc79 	bl	8009ee0 <memp_malloc>
 80135ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d101      	bne.n	80135fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80135f6:	2300      	movs	r3, #0
 80135f8:	e016      	b.n	8013628 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80135fa:	2220      	movs	r2, #32
 80135fc:	2100      	movs	r1, #0
 80135fe:	68f8      	ldr	r0, [r7, #12]
 8013600:	f000 ffdc 	bl	80145bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	220f      	movs	r2, #15
 8013608:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801360a:	4b09      	ldr	r3, [pc, #36]	; (8013630 <ip_reass_enqueue_new_datagram+0x70>)
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013612:	4a07      	ldr	r2, [pc, #28]	; (8013630 <ip_reass_enqueue_new_datagram+0x70>)
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	3308      	adds	r3, #8
 801361c:	2214      	movs	r2, #20
 801361e:	6879      	ldr	r1, [r7, #4]
 8013620:	4618      	mov	r0, r3
 8013622:	f000 ffbd 	bl	80145a0 <memcpy>
  return ipr;
 8013626:	68fb      	ldr	r3, [r7, #12]
}
 8013628:	4618      	mov	r0, r3
 801362a:	3710      	adds	r7, #16
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}
 8013630:	200041d0 	.word	0x200041d0

08013634 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b082      	sub	sp, #8
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801363e:	4b10      	ldr	r3, [pc, #64]	; (8013680 <ip_reass_dequeue_datagram+0x4c>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	429a      	cmp	r2, r3
 8013646:	d104      	bne.n	8013652 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	4a0c      	ldr	r2, [pc, #48]	; (8013680 <ip_reass_dequeue_datagram+0x4c>)
 801364e:	6013      	str	r3, [r2, #0]
 8013650:	e00d      	b.n	801366e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d106      	bne.n	8013666 <ip_reass_dequeue_datagram+0x32>
 8013658:	4b0a      	ldr	r3, [pc, #40]	; (8013684 <ip_reass_dequeue_datagram+0x50>)
 801365a:	f240 1245 	movw	r2, #325	; 0x145
 801365e:	490a      	ldr	r1, [pc, #40]	; (8013688 <ip_reass_dequeue_datagram+0x54>)
 8013660:	480a      	ldr	r0, [pc, #40]	; (801368c <ip_reass_dequeue_datagram+0x58>)
 8013662:	f000 ffb3 	bl	80145cc <iprintf>
    prev->next = ipr->next;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801366e:	6879      	ldr	r1, [r7, #4]
 8013670:	2004      	movs	r0, #4
 8013672:	f7f6 fc87 	bl	8009f84 <memp_free>
}
 8013676:	bf00      	nop
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	200041d0 	.word	0x200041d0
 8013684:	080188f8 	.word	0x080188f8
 8013688:	080189c0 	.word	0x080189c0
 801368c:	08018940 	.word	0x08018940

08013690 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b08c      	sub	sp, #48	; 0x30
 8013694:	af00      	add	r7, sp, #0
 8013696:	60f8      	str	r0, [r7, #12]
 8013698:	60b9      	str	r1, [r7, #8]
 801369a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801369c:	2300      	movs	r3, #0
 801369e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80136a0:	2301      	movs	r3, #1
 80136a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	885b      	ldrh	r3, [r3, #2]
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7f5 ff5f 	bl	8009574 <lwip_htons>
 80136b6:	4603      	mov	r3, r0
 80136b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80136ba:	69fb      	ldr	r3, [r7, #28]
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	f003 030f 	and.w	r3, r3, #15
 80136c2:	b2db      	uxtb	r3, r3
 80136c4:	009b      	lsls	r3, r3, #2
 80136c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80136c8:	7e7b      	ldrb	r3, [r7, #25]
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	8b7a      	ldrh	r2, [r7, #26]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d202      	bcs.n	80136d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136d2:	f04f 33ff 	mov.w	r3, #4294967295
 80136d6:	e135      	b.n	8013944 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80136d8:	7e7b      	ldrb	r3, [r7, #25]
 80136da:	b29b      	uxth	r3, r3
 80136dc:	8b7a      	ldrh	r2, [r7, #26]
 80136de:	1ad3      	subs	r3, r2, r3
 80136e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80136e2:	69fb      	ldr	r3, [r7, #28]
 80136e4:	88db      	ldrh	r3, [r3, #6]
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7f5 ff43 	bl	8009574 <lwip_htons>
 80136ee:	4603      	mov	r3, r0
 80136f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	00db      	lsls	r3, r3, #3
 80136f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013702:	2200      	movs	r2, #0
 8013704:	701a      	strb	r2, [r3, #0]
 8013706:	2200      	movs	r2, #0
 8013708:	705a      	strb	r2, [r3, #1]
 801370a:	2200      	movs	r2, #0
 801370c:	709a      	strb	r2, [r3, #2]
 801370e:	2200      	movs	r2, #0
 8013710:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013714:	8afa      	ldrh	r2, [r7, #22]
 8013716:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013718:	8afa      	ldrh	r2, [r7, #22]
 801371a:	8b7b      	ldrh	r3, [r7, #26]
 801371c:	4413      	add	r3, r2
 801371e:	b29a      	uxth	r2, r3
 8013720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013722:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013726:	88db      	ldrh	r3, [r3, #6]
 8013728:	b29b      	uxth	r3, r3
 801372a:	8afa      	ldrh	r2, [r7, #22]
 801372c:	429a      	cmp	r2, r3
 801372e:	d902      	bls.n	8013736 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013730:	f04f 33ff 	mov.w	r3, #4294967295
 8013734:	e106      	b.n	8013944 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	627b      	str	r3, [r7, #36]	; 0x24
 801373c:	e068      	b.n	8013810 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013740:	685b      	ldr	r3, [r3, #4]
 8013742:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013746:	889b      	ldrh	r3, [r3, #4]
 8013748:	b29a      	uxth	r2, r3
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	889b      	ldrh	r3, [r3, #4]
 801374e:	b29b      	uxth	r3, r3
 8013750:	429a      	cmp	r2, r3
 8013752:	d235      	bcs.n	80137c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013758:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375c:	2b00      	cmp	r3, #0
 801375e:	d020      	beq.n	80137a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013762:	889b      	ldrh	r3, [r3, #4]
 8013764:	b29a      	uxth	r2, r3
 8013766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013768:	88db      	ldrh	r3, [r3, #6]
 801376a:	b29b      	uxth	r3, r3
 801376c:	429a      	cmp	r2, r3
 801376e:	d307      	bcc.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013772:	88db      	ldrh	r3, [r3, #6]
 8013774:	b29a      	uxth	r2, r3
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	889b      	ldrh	r3, [r3, #4]
 801377a:	b29b      	uxth	r3, r3
 801377c:	429a      	cmp	r2, r3
 801377e:	d902      	bls.n	8013786 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013780:	f04f 33ff 	mov.w	r3, #4294967295
 8013784:	e0de      	b.n	8013944 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013788:	68ba      	ldr	r2, [r7, #8]
 801378a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	88db      	ldrh	r3, [r3, #6]
 8013790:	b29a      	uxth	r2, r3
 8013792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013794:	889b      	ldrh	r3, [r3, #4]
 8013796:	b29b      	uxth	r3, r3
 8013798:	429a      	cmp	r2, r3
 801379a:	d03d      	beq.n	8013818 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801379c:	2300      	movs	r3, #0
 801379e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80137a0:	e03a      	b.n	8013818 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80137a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a4:	88db      	ldrh	r3, [r3, #6]
 80137a6:	b29a      	uxth	r2, r3
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	889b      	ldrh	r3, [r3, #4]
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	429a      	cmp	r2, r3
 80137b0:	d902      	bls.n	80137b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80137b2:	f04f 33ff 	mov.w	r3, #4294967295
 80137b6:	e0c5      	b.n	8013944 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	68ba      	ldr	r2, [r7, #8]
 80137bc:	605a      	str	r2, [r3, #4]
      break;
 80137be:	e02b      	b.n	8013818 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80137c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c2:	889b      	ldrh	r3, [r3, #4]
 80137c4:	b29a      	uxth	r2, r3
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	889b      	ldrh	r3, [r3, #4]
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d102      	bne.n	80137d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80137d0:	f04f 33ff 	mov.w	r3, #4294967295
 80137d4:	e0b6      	b.n	8013944 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80137d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d8:	889b      	ldrh	r3, [r3, #4]
 80137da:	b29a      	uxth	r2, r3
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	88db      	ldrh	r3, [r3, #6]
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d202      	bcs.n	80137ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80137e6:	f04f 33ff 	mov.w	r3, #4294967295
 80137ea:	e0ab      	b.n	8013944 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80137ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d009      	beq.n	8013806 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80137f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f4:	88db      	ldrh	r3, [r3, #6]
 80137f6:	b29a      	uxth	r2, r3
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	889b      	ldrh	r3, [r3, #4]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	429a      	cmp	r2, r3
 8013800:	d001      	beq.n	8013806 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013802:	2300      	movs	r3, #0
 8013804:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013812:	2b00      	cmp	r3, #0
 8013814:	d193      	bne.n	801373e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013816:	e000      	b.n	801381a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013818:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381c:	2b00      	cmp	r3, #0
 801381e:	d12d      	bne.n	801387c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013822:	2b00      	cmp	r3, #0
 8013824:	d01c      	beq.n	8013860 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013828:	88db      	ldrh	r3, [r3, #6]
 801382a:	b29a      	uxth	r2, r3
 801382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382e:	889b      	ldrh	r3, [r3, #4]
 8013830:	b29b      	uxth	r3, r3
 8013832:	429a      	cmp	r2, r3
 8013834:	d906      	bls.n	8013844 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013836:	4b45      	ldr	r3, [pc, #276]	; (801394c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013838:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801383c:	4944      	ldr	r1, [pc, #272]	; (8013950 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801383e:	4845      	ldr	r0, [pc, #276]	; (8013954 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013840:	f000 fec4 	bl	80145cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013846:	68ba      	ldr	r2, [r7, #8]
 8013848:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384c:	88db      	ldrh	r3, [r3, #6]
 801384e:	b29a      	uxth	r2, r3
 8013850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013852:	889b      	ldrh	r3, [r3, #4]
 8013854:	b29b      	uxth	r3, r3
 8013856:	429a      	cmp	r2, r3
 8013858:	d010      	beq.n	801387c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801385a:	2300      	movs	r3, #0
 801385c:	623b      	str	r3, [r7, #32]
 801385e:	e00d      	b.n	801387c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d006      	beq.n	8013876 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013868:	4b38      	ldr	r3, [pc, #224]	; (801394c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801386a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801386e:	493a      	ldr	r1, [pc, #232]	; (8013958 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013870:	4838      	ldr	r0, [pc, #224]	; (8013954 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013872:	f000 feab 	bl	80145cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d105      	bne.n	801388e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	7f9b      	ldrb	r3, [r3, #30]
 8013886:	f003 0301 	and.w	r3, r3, #1
 801388a:	2b00      	cmp	r3, #0
 801388c:	d059      	beq.n	8013942 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801388e:	6a3b      	ldr	r3, [r7, #32]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d04f      	beq.n	8013934 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d006      	beq.n	80138aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	889b      	ldrh	r3, [r3, #4]
 80138a4:	b29b      	uxth	r3, r3
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d002      	beq.n	80138b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80138aa:	2300      	movs	r3, #0
 80138ac:	623b      	str	r3, [r7, #32]
 80138ae:	e041      	b.n	8013934 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80138b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80138b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80138ba:	e012      	b.n	80138e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80138bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80138c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c4:	88db      	ldrh	r3, [r3, #6]
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ca:	889b      	ldrh	r3, [r3, #4]
 80138cc:	b29b      	uxth	r3, r3
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d002      	beq.n	80138d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80138d2:	2300      	movs	r3, #0
 80138d4:	623b      	str	r3, [r7, #32]
            break;
 80138d6:	e007      	b.n	80138e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80138d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80138dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80138e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d1e9      	bne.n	80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80138e8:	6a3b      	ldr	r3, [r7, #32]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d022      	beq.n	8013934 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d106      	bne.n	8013904 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80138f6:	4b15      	ldr	r3, [pc, #84]	; (801394c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80138f8:	f240 12df 	movw	r2, #479	; 0x1df
 80138fc:	4917      	ldr	r1, [pc, #92]	; (801395c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80138fe:	4815      	ldr	r0, [pc, #84]	; (8013954 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013900:	f000 fe64 	bl	80145cc <iprintf>
          LWIP_ASSERT("sanity check",
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801390c:	429a      	cmp	r2, r3
 801390e:	d106      	bne.n	801391e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013910:	4b0e      	ldr	r3, [pc, #56]	; (801394c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013912:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013916:	4911      	ldr	r1, [pc, #68]	; (801395c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013918:	480e      	ldr	r0, [pc, #56]	; (8013954 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801391a:	f000 fe57 	bl	80145cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d006      	beq.n	8013934 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013926:	4b09      	ldr	r3, [pc, #36]	; (801394c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013928:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801392c:	490c      	ldr	r1, [pc, #48]	; (8013960 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801392e:	4809      	ldr	r0, [pc, #36]	; (8013954 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013930:	f000 fe4c 	bl	80145cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013934:	6a3b      	ldr	r3, [r7, #32]
 8013936:	2b00      	cmp	r3, #0
 8013938:	bf14      	ite	ne
 801393a:	2301      	movne	r3, #1
 801393c:	2300      	moveq	r3, #0
 801393e:	b2db      	uxtb	r3, r3
 8013940:	e000      	b.n	8013944 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013942:	2300      	movs	r3, #0
}
 8013944:	4618      	mov	r0, r3
 8013946:	3730      	adds	r7, #48	; 0x30
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}
 801394c:	080188f8 	.word	0x080188f8
 8013950:	080189dc 	.word	0x080189dc
 8013954:	08018940 	.word	0x08018940
 8013958:	080189fc 	.word	0x080189fc
 801395c:	08018a34 	.word	0x08018a34
 8013960:	08018a44 	.word	0x08018a44

08013964 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b08e      	sub	sp, #56	; 0x38
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	f003 030f 	and.w	r3, r3, #15
 801397a:	b2db      	uxtb	r3, r3
 801397c:	009b      	lsls	r3, r3, #2
 801397e:	b2db      	uxtb	r3, r3
 8013980:	2b14      	cmp	r3, #20
 8013982:	f040 8167 	bne.w	8013c54 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013988:	88db      	ldrh	r3, [r3, #6]
 801398a:	b29b      	uxth	r3, r3
 801398c:	4618      	mov	r0, r3
 801398e:	f7f5 fdf1 	bl	8009574 <lwip_htons>
 8013992:	4603      	mov	r3, r0
 8013994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013998:	b29b      	uxth	r3, r3
 801399a:	00db      	lsls	r3, r3, #3
 801399c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a0:	885b      	ldrh	r3, [r3, #2]
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	4618      	mov	r0, r3
 80139a6:	f7f5 fde5 	bl	8009574 <lwip_htons>
 80139aa:	4603      	mov	r3, r0
 80139ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80139ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	f003 030f 	and.w	r3, r3, #15
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	009b      	lsls	r3, r3, #2
 80139ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80139be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80139c6:	429a      	cmp	r2, r3
 80139c8:	f0c0 8146 	bcc.w	8013c58 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80139cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80139d4:	1ad3      	subs	r3, r2, r3
 80139d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f7f7 fa05 	bl	800ade8 <pbuf_clen>
 80139de:	4603      	mov	r3, r0
 80139e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80139e2:	4b9f      	ldr	r3, [pc, #636]	; (8013c60 <ip4_reass+0x2fc>)
 80139e4:	881b      	ldrh	r3, [r3, #0]
 80139e6:	461a      	mov	r2, r3
 80139e8:	8c3b      	ldrh	r3, [r7, #32]
 80139ea:	4413      	add	r3, r2
 80139ec:	2b0a      	cmp	r3, #10
 80139ee:	dd10      	ble.n	8013a12 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80139f0:	8c3b      	ldrh	r3, [r7, #32]
 80139f2:	4619      	mov	r1, r3
 80139f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139f6:	f7ff fd81 	bl	80134fc <ip_reass_remove_oldest_datagram>
 80139fa:	4603      	mov	r3, r0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	f000 812d 	beq.w	8013c5c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013a02:	4b97      	ldr	r3, [pc, #604]	; (8013c60 <ip4_reass+0x2fc>)
 8013a04:	881b      	ldrh	r3, [r3, #0]
 8013a06:	461a      	mov	r2, r3
 8013a08:	8c3b      	ldrh	r3, [r7, #32]
 8013a0a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013a0c:	2b0a      	cmp	r3, #10
 8013a0e:	f300 8125 	bgt.w	8013c5c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013a12:	4b94      	ldr	r3, [pc, #592]	; (8013c64 <ip4_reass+0x300>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	633b      	str	r3, [r7, #48]	; 0x30
 8013a18:	e015      	b.n	8013a46 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1c:	695a      	ldr	r2, [r3, #20]
 8013a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a20:	68db      	ldr	r3, [r3, #12]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d10c      	bne.n	8013a40 <ip4_reass+0xdc>
 8013a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a28:	699a      	ldr	r2, [r3, #24]
 8013a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2c:	691b      	ldr	r3, [r3, #16]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d106      	bne.n	8013a40 <ip4_reass+0xdc>
 8013a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a34:	899a      	ldrh	r2, [r3, #12]
 8013a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a38:	889b      	ldrh	r3, [r3, #4]
 8013a3a:	b29b      	uxth	r3, r3
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d006      	beq.n	8013a4e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	633b      	str	r3, [r7, #48]	; 0x30
 8013a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d1e6      	bne.n	8013a1a <ip4_reass+0xb6>
 8013a4c:	e000      	b.n	8013a50 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013a4e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d109      	bne.n	8013a6a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013a56:	8c3b      	ldrh	r3, [r7, #32]
 8013a58:	4619      	mov	r1, r3
 8013a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a5c:	f7ff fdb0 	bl	80135c0 <ip_reass_enqueue_new_datagram>
 8013a60:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d11c      	bne.n	8013aa2 <ip4_reass+0x13e>
      goto nullreturn;
 8013a68:	e109      	b.n	8013c7e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6c:	88db      	ldrh	r3, [r3, #6]
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f5 fd7f 	bl	8009574 <lwip_htons>
 8013a76:	4603      	mov	r3, r0
 8013a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d110      	bne.n	8013aa2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a82:	89db      	ldrh	r3, [r3, #14]
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7f5 fd75 	bl	8009574 <lwip_htons>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d006      	beq.n	8013aa2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a96:	3308      	adds	r3, #8
 8013a98:	2214      	movs	r2, #20
 8013a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f000 fd7f 	bl	80145a0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa4:	88db      	ldrh	r3, [r3, #6]
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	f003 0320 	and.w	r3, r3, #32
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	bf0c      	ite	eq
 8013ab0:	2301      	moveq	r3, #1
 8013ab2:	2300      	movne	r3, #0
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013ab8:	69fb      	ldr	r3, [r7, #28]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d00e      	beq.n	8013adc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013abe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ac2:	4413      	add	r3, r2
 8013ac4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013ac6:	8b7a      	ldrh	r2, [r7, #26]
 8013ac8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013aca:	429a      	cmp	r2, r3
 8013acc:	f0c0 80a0 	bcc.w	8013c10 <ip4_reass+0x2ac>
 8013ad0:	8b7b      	ldrh	r3, [r7, #26]
 8013ad2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	f200 809a 	bhi.w	8013c10 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013adc:	69fa      	ldr	r2, [r7, #28]
 8013ade:	6879      	ldr	r1, [r7, #4]
 8013ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ae2:	f7ff fdd5 	bl	8013690 <ip_reass_chain_frag_into_datagram_and_validate>
 8013ae6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aee:	f000 8091 	beq.w	8013c14 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013af2:	4b5b      	ldr	r3, [pc, #364]	; (8013c60 <ip4_reass+0x2fc>)
 8013af4:	881a      	ldrh	r2, [r3, #0]
 8013af6:	8c3b      	ldrh	r3, [r7, #32]
 8013af8:	4413      	add	r3, r2
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	4b58      	ldr	r3, [pc, #352]	; (8013c60 <ip4_reass+0x2fc>)
 8013afe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d00d      	beq.n	8013b22 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013b06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b0a:	4413      	add	r3, r2
 8013b0c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b10:	8a7a      	ldrh	r2, [r7, #18]
 8013b12:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b16:	7f9b      	ldrb	r3, [r3, #30]
 8013b18:	f043 0301 	orr.w	r3, r3, #1
 8013b1c:	b2da      	uxtb	r2, r3
 8013b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b20:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d171      	bne.n	8013c0c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2a:	8b9b      	ldrh	r3, [r3, #28]
 8013b2c:	3314      	adds	r3, #20
 8013b2e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	685b      	ldr	r3, [r3, #4]
 8013b40:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b44:	3308      	adds	r3, #8
 8013b46:	2214      	movs	r2, #20
 8013b48:	4619      	mov	r1, r3
 8013b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b4c:	f000 fd28 	bl	80145a0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013b50:	8a3b      	ldrh	r3, [r7, #16]
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7f5 fd0e 	bl	8009574 <lwip_htons>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b62:	2200      	movs	r2, #0
 8013b64:	719a      	strb	r2, [r3, #6]
 8013b66:	2200      	movs	r2, #0
 8013b68:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	729a      	strb	r2, [r3, #10]
 8013b70:	2200      	movs	r2, #0
 8013b72:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013b7a:	e00d      	b.n	8013b98 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b7e:	685b      	ldr	r3, [r3, #4]
 8013b80:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013b82:	2114      	movs	r1, #20
 8013b84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013b86:	f7f7 f81b 	bl	800abc0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013b8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f7f7 f96b 	bl	800ae68 <pbuf_cat>
      r = iprh->next_pbuf;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d1ee      	bne.n	8013b7c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013b9e:	4b31      	ldr	r3, [pc, #196]	; (8013c64 <ip4_reass+0x300>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d102      	bne.n	8013bae <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013bac:	e010      	b.n	8013bd0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013bae:	4b2d      	ldr	r3, [pc, #180]	; (8013c64 <ip4_reass+0x300>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013bb4:	e007      	b.n	8013bc6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d006      	beq.n	8013bce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d1f4      	bne.n	8013bb6 <ip4_reass+0x252>
 8013bcc:	e000      	b.n	8013bd0 <ip4_reass+0x26c>
          break;
 8013bce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bd4:	f7ff fd2e 	bl	8013634 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f7f7 f905 	bl	800ade8 <pbuf_clen>
 8013bde:	4603      	mov	r3, r0
 8013be0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013be2:	4b1f      	ldr	r3, [pc, #124]	; (8013c60 <ip4_reass+0x2fc>)
 8013be4:	881b      	ldrh	r3, [r3, #0]
 8013be6:	8c3a      	ldrh	r2, [r7, #32]
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d906      	bls.n	8013bfa <ip4_reass+0x296>
 8013bec:	4b1e      	ldr	r3, [pc, #120]	; (8013c68 <ip4_reass+0x304>)
 8013bee:	f240 229b 	movw	r2, #667	; 0x29b
 8013bf2:	491e      	ldr	r1, [pc, #120]	; (8013c6c <ip4_reass+0x308>)
 8013bf4:	481e      	ldr	r0, [pc, #120]	; (8013c70 <ip4_reass+0x30c>)
 8013bf6:	f000 fce9 	bl	80145cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013bfa:	4b19      	ldr	r3, [pc, #100]	; (8013c60 <ip4_reass+0x2fc>)
 8013bfc:	881a      	ldrh	r2, [r3, #0]
 8013bfe:	8c3b      	ldrh	r3, [r7, #32]
 8013c00:	1ad3      	subs	r3, r2, r3
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	4b16      	ldr	r3, [pc, #88]	; (8013c60 <ip4_reass+0x2fc>)
 8013c06:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	e03c      	b.n	8013c86 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	e03a      	b.n	8013c86 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013c10:	bf00      	nop
 8013c12:	e000      	b.n	8013c16 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013c14:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d106      	bne.n	8013c2a <ip4_reass+0x2c6>
 8013c1c:	4b12      	ldr	r3, [pc, #72]	; (8013c68 <ip4_reass+0x304>)
 8013c1e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013c22:	4914      	ldr	r1, [pc, #80]	; (8013c74 <ip4_reass+0x310>)
 8013c24:	4812      	ldr	r0, [pc, #72]	; (8013c70 <ip4_reass+0x30c>)
 8013c26:	f000 fcd1 	bl	80145cc <iprintf>
  if (ipr->p == NULL) {
 8013c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d124      	bne.n	8013c7c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013c32:	4b0c      	ldr	r3, [pc, #48]	; (8013c64 <ip4_reass+0x300>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d006      	beq.n	8013c4a <ip4_reass+0x2e6>
 8013c3c:	4b0a      	ldr	r3, [pc, #40]	; (8013c68 <ip4_reass+0x304>)
 8013c3e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013c42:	490d      	ldr	r1, [pc, #52]	; (8013c78 <ip4_reass+0x314>)
 8013c44:	480a      	ldr	r0, [pc, #40]	; (8013c70 <ip4_reass+0x30c>)
 8013c46:	f000 fcc1 	bl	80145cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013c4a:	2100      	movs	r1, #0
 8013c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c4e:	f7ff fcf1 	bl	8013634 <ip_reass_dequeue_datagram>
 8013c52:	e014      	b.n	8013c7e <ip4_reass+0x31a>
    goto nullreturn;
 8013c54:	bf00      	nop
 8013c56:	e012      	b.n	8013c7e <ip4_reass+0x31a>
    goto nullreturn;
 8013c58:	bf00      	nop
 8013c5a:	e010      	b.n	8013c7e <ip4_reass+0x31a>
      goto nullreturn;
 8013c5c:	bf00      	nop
 8013c5e:	e00e      	b.n	8013c7e <ip4_reass+0x31a>
 8013c60:	200041d4 	.word	0x200041d4
 8013c64:	200041d0 	.word	0x200041d0
 8013c68:	080188f8 	.word	0x080188f8
 8013c6c:	08018a68 	.word	0x08018a68
 8013c70:	08018940 	.word	0x08018940
 8013c74:	08018a84 	.word	0x08018a84
 8013c78:	08018a90 	.word	0x08018a90
  }

nullreturn:
 8013c7c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f7f7 f824 	bl	800accc <pbuf_free>
  return NULL;
 8013c84:	2300      	movs	r3, #0
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3738      	adds	r7, #56	; 0x38
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop

08013c90 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013c94:	2005      	movs	r0, #5
 8013c96:	f7f6 f923 	bl	8009ee0 <memp_malloc>
 8013c9a:	4603      	mov	r3, r0
}
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d106      	bne.n	8013cbc <ip_frag_free_pbuf_custom_ref+0x1c>
 8013cae:	4b07      	ldr	r3, [pc, #28]	; (8013ccc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013cb0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013cb4:	4906      	ldr	r1, [pc, #24]	; (8013cd0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013cb6:	4807      	ldr	r0, [pc, #28]	; (8013cd4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013cb8:	f000 fc88 	bl	80145cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013cbc:	6879      	ldr	r1, [r7, #4]
 8013cbe:	2005      	movs	r0, #5
 8013cc0:	f7f6 f960 	bl	8009f84 <memp_free>
}
 8013cc4:	bf00      	nop
 8013cc6:	3708      	adds	r7, #8
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	080188f8 	.word	0x080188f8
 8013cd0:	08018ab0 	.word	0x08018ab0
 8013cd4:	08018940 	.word	0x08018940

08013cd8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d106      	bne.n	8013cf8 <ipfrag_free_pbuf_custom+0x20>
 8013cea:	4b11      	ldr	r3, [pc, #68]	; (8013d30 <ipfrag_free_pbuf_custom+0x58>)
 8013cec:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013cf0:	4910      	ldr	r1, [pc, #64]	; (8013d34 <ipfrag_free_pbuf_custom+0x5c>)
 8013cf2:	4811      	ldr	r0, [pc, #68]	; (8013d38 <ipfrag_free_pbuf_custom+0x60>)
 8013cf4:	f000 fc6a 	bl	80145cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013cf8:	68fa      	ldr	r2, [r7, #12]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d006      	beq.n	8013d0e <ipfrag_free_pbuf_custom+0x36>
 8013d00:	4b0b      	ldr	r3, [pc, #44]	; (8013d30 <ipfrag_free_pbuf_custom+0x58>)
 8013d02:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013d06:	490d      	ldr	r1, [pc, #52]	; (8013d3c <ipfrag_free_pbuf_custom+0x64>)
 8013d08:	480b      	ldr	r0, [pc, #44]	; (8013d38 <ipfrag_free_pbuf_custom+0x60>)
 8013d0a:	f000 fc5f 	bl	80145cc <iprintf>
  if (pcr->original != NULL) {
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	695b      	ldr	r3, [r3, #20]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d004      	beq.n	8013d20 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	695b      	ldr	r3, [r3, #20]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7f6 ffd6 	bl	800accc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f7ff ffbd 	bl	8013ca0 <ip_frag_free_pbuf_custom_ref>
}
 8013d26:	bf00      	nop
 8013d28:	3710      	adds	r7, #16
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	080188f8 	.word	0x080188f8
 8013d34:	08018abc 	.word	0x08018abc
 8013d38:	08018940 	.word	0x08018940
 8013d3c:	08018ac8 	.word	0x08018ac8

08013d40 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b094      	sub	sp, #80	; 0x50
 8013d44:	af02      	add	r7, sp, #8
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013d56:	3b14      	subs	r3, #20
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	da00      	bge.n	8013d5e <ip4_frag+0x1e>
 8013d5c:	3307      	adds	r3, #7
 8013d5e:	10db      	asrs	r3, r3, #3
 8013d60:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013d62:	2314      	movs	r3, #20
 8013d64:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	f003 030f 	and.w	r3, r3, #15
 8013d78:	b2db      	uxtb	r3, r3
 8013d7a:	009b      	lsls	r3, r3, #2
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	2b14      	cmp	r3, #20
 8013d80:	d002      	beq.n	8013d88 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013d82:	f06f 0305 	mvn.w	r3, #5
 8013d86:	e110      	b.n	8013faa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	895b      	ldrh	r3, [r3, #10]
 8013d8c:	2b13      	cmp	r3, #19
 8013d8e:	d809      	bhi.n	8013da4 <ip4_frag+0x64>
 8013d90:	4b88      	ldr	r3, [pc, #544]	; (8013fb4 <ip4_frag+0x274>)
 8013d92:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013d96:	4988      	ldr	r1, [pc, #544]	; (8013fb8 <ip4_frag+0x278>)
 8013d98:	4888      	ldr	r0, [pc, #544]	; (8013fbc <ip4_frag+0x27c>)
 8013d9a:	f000 fc17 	bl	80145cc <iprintf>
 8013d9e:	f06f 0305 	mvn.w	r3, #5
 8013da2:	e102      	b.n	8013faa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da6:	88db      	ldrh	r3, [r3, #6]
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7f5 fbe2 	bl	8009574 <lwip_htons>
 8013db0:	4603      	mov	r3, r0
 8013db2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013db4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013dba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013dbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	891b      	ldrh	r3, [r3, #8]
 8013dca:	3b14      	subs	r3, #20
 8013dcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013dd0:	e0e1      	b.n	8013f96 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013dd2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013dd4:	00db      	lsls	r3, r3, #3
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ddc:	4293      	cmp	r3, r2
 8013dde:	bf28      	it	cs
 8013de0:	4613      	movcs	r3, r2
 8013de2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013de4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013de8:	2114      	movs	r1, #20
 8013dea:	200e      	movs	r0, #14
 8013dec:	f7f6 fc8a 	bl	800a704 <pbuf_alloc>
 8013df0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	f000 80d5 	beq.w	8013fa4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfc:	895b      	ldrh	r3, [r3, #10]
 8013dfe:	2b13      	cmp	r3, #19
 8013e00:	d806      	bhi.n	8013e10 <ip4_frag+0xd0>
 8013e02:	4b6c      	ldr	r3, [pc, #432]	; (8013fb4 <ip4_frag+0x274>)
 8013e04:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013e08:	496d      	ldr	r1, [pc, #436]	; (8013fc0 <ip4_frag+0x280>)
 8013e0a:	486c      	ldr	r0, [pc, #432]	; (8013fbc <ip4_frag+0x27c>)
 8013e0c:	f000 fbde 	bl	80145cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	2214      	movs	r2, #20
 8013e16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f000 fbc1 	bl	80145a0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013e24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e26:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013e2a:	e064      	b.n	8013ef6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	895a      	ldrh	r2, [r3, #10]
 8013e30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013e32:	1ad3      	subs	r3, r2, r3
 8013e34:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	895b      	ldrh	r3, [r3, #10]
 8013e3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d906      	bls.n	8013e4e <ip4_frag+0x10e>
 8013e40:	4b5c      	ldr	r3, [pc, #368]	; (8013fb4 <ip4_frag+0x274>)
 8013e42:	f240 322d 	movw	r2, #813	; 0x32d
 8013e46:	495f      	ldr	r1, [pc, #380]	; (8013fc4 <ip4_frag+0x284>)
 8013e48:	485c      	ldr	r0, [pc, #368]	; (8013fbc <ip4_frag+0x27c>)
 8013e4a:	f000 fbbf 	bl	80145cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013e4e:	8bfa      	ldrh	r2, [r7, #30]
 8013e50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013e54:	4293      	cmp	r3, r2
 8013e56:	bf28      	it	cs
 8013e58:	4613      	movcs	r3, r2
 8013e5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013e5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d105      	bne.n	8013e72 <ip4_frag+0x132>
        poff = 0;
 8013e66:	2300      	movs	r3, #0
 8013e68:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	60fb      	str	r3, [r7, #12]
        continue;
 8013e70:	e041      	b.n	8013ef6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013e72:	f7ff ff0d 	bl	8013c90 <ip_frag_alloc_pbuf_custom_ref>
 8013e76:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d103      	bne.n	8013e86 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013e7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e80:	f7f6 ff24 	bl	800accc <pbuf_free>
        goto memerr;
 8013e84:	e08f      	b.n	8013fa6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013e86:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013e8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013e8e:	4413      	add	r3, r2
 8013e90:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013e94:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013e98:	9201      	str	r2, [sp, #4]
 8013e9a:	9300      	str	r3, [sp, #0]
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2241      	movs	r2, #65	; 0x41
 8013ea0:	2000      	movs	r0, #0
 8013ea2:	f7f6 fd59 	bl	800a958 <pbuf_alloced_custom>
 8013ea6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d106      	bne.n	8013ebc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013eae:	69b8      	ldr	r0, [r7, #24]
 8013eb0:	f7ff fef6 	bl	8013ca0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013eb6:	f7f6 ff09 	bl	800accc <pbuf_free>
        goto memerr;
 8013eba:	e074      	b.n	8013fa6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013ebc:	68f8      	ldr	r0, [r7, #12]
 8013ebe:	f7f6 ffab 	bl	800ae18 <pbuf_ref>
      pcr->original = p;
 8013ec2:	69bb      	ldr	r3, [r7, #24]
 8013ec4:	68fa      	ldr	r2, [r7, #12]
 8013ec6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013ec8:	69bb      	ldr	r3, [r7, #24]
 8013eca:	4a3f      	ldr	r2, [pc, #252]	; (8013fc8 <ip4_frag+0x288>)
 8013ecc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013ece:	6979      	ldr	r1, [r7, #20]
 8013ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ed2:	f7f6 ffc9 	bl	800ae68 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013ed6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013eda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013ede:	1ad3      	subs	r3, r2, r3
 8013ee0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013ee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d004      	beq.n	8013ef6 <ip4_frag+0x1b6>
        poff = 0;
 8013eec:	2300      	movs	r3, #0
 8013eee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013ef6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d196      	bne.n	8013e2c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013efe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013f00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013f04:	4413      	add	r3, r2
 8013f06:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013f0c:	f1a3 0213 	sub.w	r2, r3, #19
 8013f10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f14:	429a      	cmp	r2, r3
 8013f16:	bfcc      	ite	gt
 8013f18:	2301      	movgt	r3, #1
 8013f1a:	2300      	movle	r3, #0
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013f20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013f24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013f2a:	6a3b      	ldr	r3, [r7, #32]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d002      	beq.n	8013f36 <ip4_frag+0x1f6>
 8013f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d003      	beq.n	8013f3e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013f36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013f3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013f3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7f5 fb17 	bl	8009574 <lwip_htons>
 8013f46:	4603      	mov	r3, r0
 8013f48:	461a      	mov	r2, r3
 8013f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013f4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013f50:	3314      	adds	r3, #20
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	4618      	mov	r0, r3
 8013f56:	f7f5 fb0d 	bl	8009574 <lwip_htons>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f60:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f64:	2200      	movs	r2, #0
 8013f66:	729a      	strb	r2, [r3, #10]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	695b      	ldr	r3, [r3, #20]
 8013f70:	687a      	ldr	r2, [r7, #4]
 8013f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f74:	68b8      	ldr	r0, [r7, #8]
 8013f76:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f7a:	f7f6 fea7 	bl	800accc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013f7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013f84:	1ad3      	subs	r3, r2, r3
 8013f86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013f8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013f8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f90:	4413      	add	r3, r2
 8013f92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013f96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	f47f af19 	bne.w	8013dd2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	e002      	b.n	8013faa <ip4_frag+0x26a>
      goto memerr;
 8013fa4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3748      	adds	r7, #72	; 0x48
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	080188f8 	.word	0x080188f8
 8013fb8:	08018ad4 	.word	0x08018ad4
 8013fbc:	08018940 	.word	0x08018940
 8013fc0:	08018af0 	.word	0x08018af0
 8013fc4:	08018b10 	.word	0x08018b10
 8013fc8:	08013cd9 	.word	0x08013cd9

08013fcc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b086      	sub	sp, #24
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013fd6:	230e      	movs	r3, #14
 8013fd8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	895b      	ldrh	r3, [r3, #10]
 8013fde:	2b0e      	cmp	r3, #14
 8013fe0:	d96e      	bls.n	80140c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	7bdb      	ldrb	r3, [r3, #15]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d106      	bne.n	8013ff8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ff0:	3301      	adds	r3, #1
 8013ff2:	b2da      	uxtb	r2, r3
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	685b      	ldr	r3, [r3, #4]
 8013ffc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013ffe:	693b      	ldr	r3, [r7, #16]
 8014000:	7b1a      	ldrb	r2, [r3, #12]
 8014002:	7b5b      	ldrb	r3, [r3, #13]
 8014004:	021b      	lsls	r3, r3, #8
 8014006:	4313      	orrs	r3, r2
 8014008:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	f003 0301 	and.w	r3, r3, #1
 8014012:	2b00      	cmp	r3, #0
 8014014:	d023      	beq.n	801405e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	2b01      	cmp	r3, #1
 801401c:	d10f      	bne.n	801403e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	785b      	ldrb	r3, [r3, #1]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d11b      	bne.n	801405e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801402a:	2b5e      	cmp	r3, #94	; 0x5e
 801402c:	d117      	bne.n	801405e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	7b5b      	ldrb	r3, [r3, #13]
 8014032:	f043 0310 	orr.w	r3, r3, #16
 8014036:	b2da      	uxtb	r2, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	735a      	strb	r2, [r3, #13]
 801403c:	e00f      	b.n	801405e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	2206      	movs	r2, #6
 8014042:	4928      	ldr	r1, [pc, #160]	; (80140e4 <ethernet_input+0x118>)
 8014044:	4618      	mov	r0, r3
 8014046:	f000 fa9d 	bl	8014584 <memcmp>
 801404a:	4603      	mov	r3, r0
 801404c:	2b00      	cmp	r3, #0
 801404e:	d106      	bne.n	801405e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	7b5b      	ldrb	r3, [r3, #13]
 8014054:	f043 0308 	orr.w	r3, r3, #8
 8014058:	b2da      	uxtb	r2, r3
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801405e:	89fb      	ldrh	r3, [r7, #14]
 8014060:	2b08      	cmp	r3, #8
 8014062:	d003      	beq.n	801406c <ethernet_input+0xa0>
 8014064:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014068:	d014      	beq.n	8014094 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801406a:	e032      	b.n	80140d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014072:	f003 0308 	and.w	r3, r3, #8
 8014076:	2b00      	cmp	r3, #0
 8014078:	d024      	beq.n	80140c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801407a:	8afb      	ldrh	r3, [r7, #22]
 801407c:	4619      	mov	r1, r3
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f7f6 fd9e 	bl	800abc0 <pbuf_remove_header>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d11e      	bne.n	80140c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801408a:	6839      	ldr	r1, [r7, #0]
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f7fe ff27 	bl	8012ee0 <ip4_input>
      break;
 8014092:	e013      	b.n	80140bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801409a:	f003 0308 	and.w	r3, r3, #8
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d014      	beq.n	80140cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80140a2:	8afb      	ldrh	r3, [r7, #22]
 80140a4:	4619      	mov	r1, r3
 80140a6:	6878      	ldr	r0, [r7, #4]
 80140a8:	f7f6 fd8a 	bl	800abc0 <pbuf_remove_header>
 80140ac:	4603      	mov	r3, r0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d10e      	bne.n	80140d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80140b2:	6839      	ldr	r1, [r7, #0]
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f7fe f8c7 	bl	8012248 <etharp_input>
      break;
 80140ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80140bc:	2300      	movs	r3, #0
 80140be:	e00c      	b.n	80140da <ethernet_input+0x10e>
    goto free_and_return;
 80140c0:	bf00      	nop
 80140c2:	e006      	b.n	80140d2 <ethernet_input+0x106>
        goto free_and_return;
 80140c4:	bf00      	nop
 80140c6:	e004      	b.n	80140d2 <ethernet_input+0x106>
        goto free_and_return;
 80140c8:	bf00      	nop
 80140ca:	e002      	b.n	80140d2 <ethernet_input+0x106>
        goto free_and_return;
 80140cc:	bf00      	nop
 80140ce:	e000      	b.n	80140d2 <ethernet_input+0x106>
        goto free_and_return;
 80140d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f7f6 fdfa 	bl	800accc <pbuf_free>
  return ERR_OK;
 80140d8:	2300      	movs	r3, #0
}
 80140da:	4618      	mov	r0, r3
 80140dc:	3718      	adds	r7, #24
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	08018ce4 	.word	0x08018ce4

080140e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b086      	sub	sp, #24
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	60b9      	str	r1, [r7, #8]
 80140f2:	607a      	str	r2, [r7, #4]
 80140f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80140f6:	8c3b      	ldrh	r3, [r7, #32]
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7f5 fa3b 	bl	8009574 <lwip_htons>
 80140fe:	4603      	mov	r3, r0
 8014100:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014102:	210e      	movs	r1, #14
 8014104:	68b8      	ldr	r0, [r7, #8]
 8014106:	f7f6 fd4b 	bl	800aba0 <pbuf_add_header>
 801410a:	4603      	mov	r3, r0
 801410c:	2b00      	cmp	r3, #0
 801410e:	d125      	bne.n	801415c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	685b      	ldr	r3, [r3, #4]
 8014114:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014116:	693b      	ldr	r3, [r7, #16]
 8014118:	8afa      	ldrh	r2, [r7, #22]
 801411a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	2206      	movs	r2, #6
 8014120:	6839      	ldr	r1, [r7, #0]
 8014122:	4618      	mov	r0, r3
 8014124:	f000 fa3c 	bl	80145a0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014128:	693b      	ldr	r3, [r7, #16]
 801412a:	3306      	adds	r3, #6
 801412c:	2206      	movs	r2, #6
 801412e:	6879      	ldr	r1, [r7, #4]
 8014130:	4618      	mov	r0, r3
 8014132:	f000 fa35 	bl	80145a0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801413c:	2b06      	cmp	r3, #6
 801413e:	d006      	beq.n	801414e <ethernet_output+0x66>
 8014140:	4b0a      	ldr	r3, [pc, #40]	; (801416c <ethernet_output+0x84>)
 8014142:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014146:	490a      	ldr	r1, [pc, #40]	; (8014170 <ethernet_output+0x88>)
 8014148:	480a      	ldr	r0, [pc, #40]	; (8014174 <ethernet_output+0x8c>)
 801414a:	f000 fa3f 	bl	80145cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	699b      	ldr	r3, [r3, #24]
 8014152:	68b9      	ldr	r1, [r7, #8]
 8014154:	68f8      	ldr	r0, [r7, #12]
 8014156:	4798      	blx	r3
 8014158:	4603      	mov	r3, r0
 801415a:	e002      	b.n	8014162 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801415c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801415e:	f06f 0301 	mvn.w	r3, #1
}
 8014162:	4618      	mov	r0, r3
 8014164:	3718      	adds	r7, #24
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	08018b20 	.word	0x08018b20
 8014170:	08018b58 	.word	0x08018b58
 8014174:	08018b8c 	.word	0x08018b8c

08014178 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b086      	sub	sp, #24
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	60bb      	str	r3, [r7, #8]
 8014186:	2304      	movs	r3, #4
 8014188:	60fb      	str	r3, [r7, #12]
 801418a:	2300      	movs	r3, #0
 801418c:	613b      	str	r3, [r7, #16]
 801418e:	2300      	movs	r3, #0
 8014190:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014192:	f107 0308 	add.w	r3, r7, #8
 8014196:	2100      	movs	r1, #0
 8014198:	4618      	mov	r0, r3
 801419a:	f7f0 f8b2 	bl	8004302 <osMessageCreate>
 801419e:	4602      	mov	r2, r0
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d102      	bne.n	80141b2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80141ac:	f04f 33ff 	mov.w	r3, #4294967295
 80141b0:	e000      	b.n	80141b4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80141b2:	2300      	movs	r3, #0
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	3718      	adds	r7, #24
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7f0 f977 	bl	80044bc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7f0 f988 	bl	80044e8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80141d8:	bf00      	nop
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	6839      	ldr	r1, [r7, #0]
 80141f0:	2200      	movs	r2, #0
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7f0 f8ae 	bl	8004354 <osMessagePut>
 80141f8:	4603      	mov	r3, r0
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d102      	bne.n	8014204 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80141fe:	2300      	movs	r3, #0
 8014200:	73fb      	strb	r3, [r7, #15]
 8014202:	e001      	b.n	8014208 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014204:	23ff      	movs	r3, #255	; 0xff
 8014206:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014208:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801420c:	4618      	mov	r0, r3
 801420e:	3710      	adds	r7, #16
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b08c      	sub	sp, #48	; 0x30
 8014218:	af00      	add	r7, sp, #0
 801421a:	61f8      	str	r0, [r7, #28]
 801421c:	61b9      	str	r1, [r7, #24]
 801421e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014220:	f7ef fe99 	bl	8003f56 <osKernelSysTick>
 8014224:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d017      	beq.n	801425c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801422c:	69fb      	ldr	r3, [r7, #28]
 801422e:	6819      	ldr	r1, [r3, #0]
 8014230:	f107 0320 	add.w	r3, r7, #32
 8014234:	697a      	ldr	r2, [r7, #20]
 8014236:	4618      	mov	r0, r3
 8014238:	f7f0 f8cc 	bl	80043d4 <osMessageGet>

    if(event.status == osEventMessage)
 801423c:	6a3b      	ldr	r3, [r7, #32]
 801423e:	2b10      	cmp	r3, #16
 8014240:	d109      	bne.n	8014256 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014244:	461a      	mov	r2, r3
 8014246:	69bb      	ldr	r3, [r7, #24]
 8014248:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801424a:	f7ef fe84 	bl	8003f56 <osKernelSysTick>
 801424e:	4602      	mov	r2, r0
 8014250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014252:	1ad3      	subs	r3, r2, r3
 8014254:	e019      	b.n	801428a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014256:	f04f 33ff 	mov.w	r3, #4294967295
 801425a:	e016      	b.n	801428a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	6819      	ldr	r1, [r3, #0]
 8014260:	463b      	mov	r3, r7
 8014262:	f04f 32ff 	mov.w	r2, #4294967295
 8014266:	4618      	mov	r0, r3
 8014268:	f7f0 f8b4 	bl	80043d4 <osMessageGet>
 801426c:	f107 0320 	add.w	r3, r7, #32
 8014270:	463a      	mov	r2, r7
 8014272:	ca07      	ldmia	r2, {r0, r1, r2}
 8014274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427a:	461a      	mov	r2, r3
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014280:	f7ef fe69 	bl	8003f56 <osKernelSysTick>
 8014284:	4602      	mov	r2, r0
 8014286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014288:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801428a:	4618      	mov	r0, r3
 801428c:	3730      	adds	r7, #48	; 0x30
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}

08014292 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014292:	b580      	push	{r7, lr}
 8014294:	b086      	sub	sp, #24
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
 801429a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6819      	ldr	r1, [r3, #0]
 80142a0:	f107 030c 	add.w	r3, r7, #12
 80142a4:	2200      	movs	r2, #0
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7f0 f894 	bl	80043d4 <osMessageGet>

  if(event.status == osEventMessage)
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2b10      	cmp	r3, #16
 80142b0:	d105      	bne.n	80142be <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	461a      	mov	r2, r3
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80142ba:	2300      	movs	r3, #0
 80142bc:	e001      	b.n	80142c2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80142be:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3718      	adds	r7, #24
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}

080142ca <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80142ca:	b480      	push	{r7}
 80142cc:	b083      	sub	sp, #12
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d101      	bne.n	80142de <sys_mbox_valid+0x14>
    return 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	e000      	b.n	80142e0 <sys_mbox_valid+0x16>
  else
    return 1;
 80142de:	2301      	movs	r3, #1
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	370c      	adds	r7, #12
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr

080142ec <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80142ec:	b480      	push	{r7}
 80142ee:	b083      	sub	sp, #12
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2200      	movs	r2, #0
 80142f8:	601a      	str	r2, [r3, #0]
}
 80142fa:	bf00      	nop
 80142fc:	370c      	adds	r7, #12
 80142fe:	46bd      	mov	sp, r7
 8014300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014304:	4770      	bx	lr

08014306 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014306:	b580      	push	{r7, lr}
 8014308:	b084      	sub	sp, #16
 801430a:	af00      	add	r7, sp, #0
 801430c:	6078      	str	r0, [r7, #4]
 801430e:	460b      	mov	r3, r1
 8014310:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8014312:	2300      	movs	r3, #0
 8014314:	60bb      	str	r3, [r7, #8]
 8014316:	2300      	movs	r3, #0
 8014318:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801431a:	f107 0308 	add.w	r3, r7, #8
 801431e:	2101      	movs	r1, #1
 8014320:	4618      	mov	r0, r3
 8014322:	f7ef ff25 	bl	8004170 <osSemaphoreCreate>
 8014326:	4602      	mov	r2, r0
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d102      	bne.n	801433a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014334:	f04f 33ff 	mov.w	r3, #4294967295
 8014338:	e009      	b.n	801434e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801433a:	78fb      	ldrb	r3, [r7, #3]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d105      	bne.n	801434c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	2100      	movs	r1, #0
 8014346:	4618      	mov	r0, r3
 8014348:	f7ef ff44 	bl	80041d4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801434c:	2300      	movs	r3, #0
}
 801434e:	4618      	mov	r0, r3
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}

08014356 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014356:	b580      	push	{r7, lr}
 8014358:	b084      	sub	sp, #16
 801435a:	af00      	add	r7, sp, #0
 801435c:	6078      	str	r0, [r7, #4]
 801435e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014360:	f7ef fdf9 	bl	8003f56 <osKernelSysTick>
 8014364:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d011      	beq.n	8014390 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	6839      	ldr	r1, [r7, #0]
 8014372:	4618      	mov	r0, r3
 8014374:	f7ef ff2e 	bl	80041d4 <osSemaphoreWait>
 8014378:	4603      	mov	r3, r0
 801437a:	2b00      	cmp	r3, #0
 801437c:	d105      	bne.n	801438a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801437e:	f7ef fdea 	bl	8003f56 <osKernelSysTick>
 8014382:	4602      	mov	r2, r0
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	1ad3      	subs	r3, r2, r3
 8014388:	e012      	b.n	80143b0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801438a:	f04f 33ff 	mov.w	r3, #4294967295
 801438e:	e00f      	b.n	80143b0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014390:	bf00      	nop
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	f04f 31ff 	mov.w	r1, #4294967295
 801439a:	4618      	mov	r0, r3
 801439c:	f7ef ff1a 	bl	80041d4 <osSemaphoreWait>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d1f5      	bne.n	8014392 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80143a6:	f7ef fdd6 	bl	8003f56 <osKernelSysTick>
 80143aa:	4602      	mov	r2, r0
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3710      	adds	r7, #16
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ef ff53 	bl	8004270 <osSemaphoreRelease>
}
 80143ca:	bf00      	nop
 80143cc:	3708      	adds	r7, #8
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80143d2:	b580      	push	{r7, lr}
 80143d4:	b082      	sub	sp, #8
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	4618      	mov	r0, r3
 80143e0:	f7ef ff7c 	bl	80042dc <osSemaphoreDelete>
}
 80143e4:	bf00      	nop
 80143e6:	3708      	adds	r7, #8
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d101      	bne.n	8014400 <sys_sem_valid+0x14>
    return 0;
 80143fc:	2300      	movs	r3, #0
 80143fe:	e000      	b.n	8014402 <sys_sem_valid+0x16>
  else
    return 1;
 8014400:	2301      	movs	r3, #1
}
 8014402:	4618      	mov	r0, r3
 8014404:	370c      	adds	r7, #12
 8014406:	46bd      	mov	sp, r7
 8014408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440c:	4770      	bx	lr

0801440e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801440e:	b480      	push	{r7}
 8014410:	b083      	sub	sp, #12
 8014412:	af00      	add	r7, sp, #0
 8014414:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2200      	movs	r2, #0
 801441a:	601a      	str	r2, [r3, #0]
}
 801441c:	bf00      	nop
 801441e:	370c      	adds	r7, #12
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr

08014428 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801442c:	4803      	ldr	r0, [pc, #12]	; (801443c <sys_init+0x14>)
 801442e:	f7ef fe02 	bl	8004036 <osMutexCreate>
 8014432:	4603      	mov	r3, r0
 8014434:	4a02      	ldr	r2, [pc, #8]	; (8014440 <sys_init+0x18>)
 8014436:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014438:	bf00      	nop
 801443a:	bd80      	pop	{r7, pc}
 801443c:	08018cf4 	.word	0x08018cf4
 8014440:	2000aae8 	.word	0x2000aae8

08014444 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801444c:	2300      	movs	r3, #0
 801444e:	60bb      	str	r3, [r7, #8]
 8014450:	2300      	movs	r3, #0
 8014452:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014454:	f107 0308 	add.w	r3, r7, #8
 8014458:	4618      	mov	r0, r3
 801445a:	f7ef fdec 	bl	8004036 <osMutexCreate>
 801445e:	4602      	mov	r2, r0
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d102      	bne.n	8014472 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801446c:	f04f 33ff 	mov.w	r3, #4294967295
 8014470:	e000      	b.n	8014474 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3710      	adds	r7, #16
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}

0801447c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	f04f 31ff 	mov.w	r1, #4294967295
 801448c:	4618      	mov	r0, r3
 801448e:	f7ef fdeb 	bl	8004068 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014492:	bf00      	nop
 8014494:	3708      	adds	r7, #8
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}

0801449a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801449a:	b580      	push	{r7, lr}
 801449c:	b082      	sub	sp, #8
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7ef fe2c 	bl	8004104 <osMutexRelease>
}
 80144ac:	bf00      	nop
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b08c      	sub	sp, #48	; 0x30
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
 80144c0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80144c2:	f107 0314 	add.w	r3, r7, #20
 80144c6:	2200      	movs	r2, #0
 80144c8:	601a      	str	r2, [r3, #0]
 80144ca:	605a      	str	r2, [r3, #4]
 80144cc:	609a      	str	r2, [r3, #8]
 80144ce:	60da      	str	r2, [r3, #12]
 80144d0:	611a      	str	r2, [r3, #16]
 80144d2:	615a      	str	r2, [r3, #20]
 80144d4:	619a      	str	r2, [r3, #24]
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	617b      	str	r3, [r7, #20]
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	61bb      	str	r3, [r7, #24]
 80144de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e0:	b21b      	sxth	r3, r3
 80144e2:	83bb      	strh	r3, [r7, #28]
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80144e8:	f107 0314 	add.w	r3, r7, #20
 80144ec:	6879      	ldr	r1, [r7, #4]
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7ef fd41 	bl	8003f76 <osThreadCreate>
 80144f4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3730      	adds	r7, #48	; 0x30
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
	...

08014500 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014504:	4b04      	ldr	r3, [pc, #16]	; (8014518 <sys_arch_protect+0x18>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	f04f 31ff 	mov.w	r1, #4294967295
 801450c:	4618      	mov	r0, r3
 801450e:	f7ef fdab 	bl	8004068 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014512:	2301      	movs	r3, #1
}
 8014514:	4618      	mov	r0, r3
 8014516:	bd80      	pop	{r7, pc}
 8014518:	2000aae8 	.word	0x2000aae8

0801451c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b082      	sub	sp, #8
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014524:	4b04      	ldr	r3, [pc, #16]	; (8014538 <sys_arch_unprotect+0x1c>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	4618      	mov	r0, r3
 801452a:	f7ef fdeb 	bl	8004104 <osMutexRelease>
}
 801452e:	bf00      	nop
 8014530:	3708      	adds	r7, #8
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	2000aae8 	.word	0x2000aae8

0801453c <__libc_init_array>:
 801453c:	b570      	push	{r4, r5, r6, lr}
 801453e:	4d0d      	ldr	r5, [pc, #52]	; (8014574 <__libc_init_array+0x38>)
 8014540:	4c0d      	ldr	r4, [pc, #52]	; (8014578 <__libc_init_array+0x3c>)
 8014542:	1b64      	subs	r4, r4, r5
 8014544:	10a4      	asrs	r4, r4, #2
 8014546:	2600      	movs	r6, #0
 8014548:	42a6      	cmp	r6, r4
 801454a:	d109      	bne.n	8014560 <__libc_init_array+0x24>
 801454c:	4d0b      	ldr	r5, [pc, #44]	; (801457c <__libc_init_array+0x40>)
 801454e:	4c0c      	ldr	r4, [pc, #48]	; (8014580 <__libc_init_array+0x44>)
 8014550:	f001 f856 	bl	8015600 <_init>
 8014554:	1b64      	subs	r4, r4, r5
 8014556:	10a4      	asrs	r4, r4, #2
 8014558:	2600      	movs	r6, #0
 801455a:	42a6      	cmp	r6, r4
 801455c:	d105      	bne.n	801456a <__libc_init_array+0x2e>
 801455e:	bd70      	pop	{r4, r5, r6, pc}
 8014560:	f855 3b04 	ldr.w	r3, [r5], #4
 8014564:	4798      	blx	r3
 8014566:	3601      	adds	r6, #1
 8014568:	e7ee      	b.n	8014548 <__libc_init_array+0xc>
 801456a:	f855 3b04 	ldr.w	r3, [r5], #4
 801456e:	4798      	blx	r3
 8014570:	3601      	adds	r6, #1
 8014572:	e7f2      	b.n	801455a <__libc_init_array+0x1e>
 8014574:	08018e50 	.word	0x08018e50
 8014578:	08018e50 	.word	0x08018e50
 801457c:	08018e50 	.word	0x08018e50
 8014580:	08018e54 	.word	0x08018e54

08014584 <memcmp>:
 8014584:	b530      	push	{r4, r5, lr}
 8014586:	3901      	subs	r1, #1
 8014588:	2400      	movs	r4, #0
 801458a:	42a2      	cmp	r2, r4
 801458c:	d101      	bne.n	8014592 <memcmp+0xe>
 801458e:	2000      	movs	r0, #0
 8014590:	e005      	b.n	801459e <memcmp+0x1a>
 8014592:	5d03      	ldrb	r3, [r0, r4]
 8014594:	3401      	adds	r4, #1
 8014596:	5d0d      	ldrb	r5, [r1, r4]
 8014598:	42ab      	cmp	r3, r5
 801459a:	d0f6      	beq.n	801458a <memcmp+0x6>
 801459c:	1b58      	subs	r0, r3, r5
 801459e:	bd30      	pop	{r4, r5, pc}

080145a0 <memcpy>:
 80145a0:	440a      	add	r2, r1
 80145a2:	4291      	cmp	r1, r2
 80145a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80145a8:	d100      	bne.n	80145ac <memcpy+0xc>
 80145aa:	4770      	bx	lr
 80145ac:	b510      	push	{r4, lr}
 80145ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145b6:	4291      	cmp	r1, r2
 80145b8:	d1f9      	bne.n	80145ae <memcpy+0xe>
 80145ba:	bd10      	pop	{r4, pc}

080145bc <memset>:
 80145bc:	4402      	add	r2, r0
 80145be:	4603      	mov	r3, r0
 80145c0:	4293      	cmp	r3, r2
 80145c2:	d100      	bne.n	80145c6 <memset+0xa>
 80145c4:	4770      	bx	lr
 80145c6:	f803 1b01 	strb.w	r1, [r3], #1
 80145ca:	e7f9      	b.n	80145c0 <memset+0x4>

080145cc <iprintf>:
 80145cc:	b40f      	push	{r0, r1, r2, r3}
 80145ce:	4b0a      	ldr	r3, [pc, #40]	; (80145f8 <iprintf+0x2c>)
 80145d0:	b513      	push	{r0, r1, r4, lr}
 80145d2:	681c      	ldr	r4, [r3, #0]
 80145d4:	b124      	cbz	r4, 80145e0 <iprintf+0x14>
 80145d6:	69a3      	ldr	r3, [r4, #24]
 80145d8:	b913      	cbnz	r3, 80145e0 <iprintf+0x14>
 80145da:	4620      	mov	r0, r4
 80145dc:	f000 f8c4 	bl	8014768 <__sinit>
 80145e0:	ab05      	add	r3, sp, #20
 80145e2:	9a04      	ldr	r2, [sp, #16]
 80145e4:	68a1      	ldr	r1, [r4, #8]
 80145e6:	9301      	str	r3, [sp, #4]
 80145e8:	4620      	mov	r0, r4
 80145ea:	f000 fa4b 	bl	8014a84 <_vfiprintf_r>
 80145ee:	b002      	add	sp, #8
 80145f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145f4:	b004      	add	sp, #16
 80145f6:	4770      	bx	lr
 80145f8:	2000001c 	.word	0x2000001c

080145fc <rand>:
 80145fc:	4b17      	ldr	r3, [pc, #92]	; (801465c <rand+0x60>)
 80145fe:	b510      	push	{r4, lr}
 8014600:	681c      	ldr	r4, [r3, #0]
 8014602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014604:	b9b3      	cbnz	r3, 8014634 <rand+0x38>
 8014606:	2018      	movs	r0, #24
 8014608:	f000 f960 	bl	80148cc <malloc>
 801460c:	63a0      	str	r0, [r4, #56]	; 0x38
 801460e:	b928      	cbnz	r0, 801461c <rand+0x20>
 8014610:	4602      	mov	r2, r0
 8014612:	4b13      	ldr	r3, [pc, #76]	; (8014660 <rand+0x64>)
 8014614:	4813      	ldr	r0, [pc, #76]	; (8014664 <rand+0x68>)
 8014616:	214e      	movs	r1, #78	; 0x4e
 8014618:	f000 f830 	bl	801467c <__assert_func>
 801461c:	4a12      	ldr	r2, [pc, #72]	; (8014668 <rand+0x6c>)
 801461e:	4b13      	ldr	r3, [pc, #76]	; (801466c <rand+0x70>)
 8014620:	e9c0 2300 	strd	r2, r3, [r0]
 8014624:	4b12      	ldr	r3, [pc, #72]	; (8014670 <rand+0x74>)
 8014626:	6083      	str	r3, [r0, #8]
 8014628:	230b      	movs	r3, #11
 801462a:	8183      	strh	r3, [r0, #12]
 801462c:	2201      	movs	r2, #1
 801462e:	2300      	movs	r3, #0
 8014630:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014634:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014636:	480f      	ldr	r0, [pc, #60]	; (8014674 <rand+0x78>)
 8014638:	690a      	ldr	r2, [r1, #16]
 801463a:	694b      	ldr	r3, [r1, #20]
 801463c:	4c0e      	ldr	r4, [pc, #56]	; (8014678 <rand+0x7c>)
 801463e:	4350      	muls	r0, r2
 8014640:	fb04 0003 	mla	r0, r4, r3, r0
 8014644:	fba2 3404 	umull	r3, r4, r2, r4
 8014648:	1c5a      	adds	r2, r3, #1
 801464a:	4404      	add	r4, r0
 801464c:	f144 0000 	adc.w	r0, r4, #0
 8014650:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014654:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014658:	bd10      	pop	{r4, pc}
 801465a:	bf00      	nop
 801465c:	2000001c 	.word	0x2000001c
 8014660:	08018d00 	.word	0x08018d00
 8014664:	08018d17 	.word	0x08018d17
 8014668:	abcd330e 	.word	0xabcd330e
 801466c:	e66d1234 	.word	0xe66d1234
 8014670:	0005deec 	.word	0x0005deec
 8014674:	5851f42d 	.word	0x5851f42d
 8014678:	4c957f2d 	.word	0x4c957f2d

0801467c <__assert_func>:
 801467c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801467e:	4614      	mov	r4, r2
 8014680:	461a      	mov	r2, r3
 8014682:	4b09      	ldr	r3, [pc, #36]	; (80146a8 <__assert_func+0x2c>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	4605      	mov	r5, r0
 8014688:	68d8      	ldr	r0, [r3, #12]
 801468a:	b14c      	cbz	r4, 80146a0 <__assert_func+0x24>
 801468c:	4b07      	ldr	r3, [pc, #28]	; (80146ac <__assert_func+0x30>)
 801468e:	9100      	str	r1, [sp, #0]
 8014690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014694:	4906      	ldr	r1, [pc, #24]	; (80146b0 <__assert_func+0x34>)
 8014696:	462b      	mov	r3, r5
 8014698:	f000 f8e4 	bl	8014864 <fiprintf>
 801469c:	f000 fddc 	bl	8015258 <abort>
 80146a0:	4b04      	ldr	r3, [pc, #16]	; (80146b4 <__assert_func+0x38>)
 80146a2:	461c      	mov	r4, r3
 80146a4:	e7f3      	b.n	801468e <__assert_func+0x12>
 80146a6:	bf00      	nop
 80146a8:	2000001c 	.word	0x2000001c
 80146ac:	08018d76 	.word	0x08018d76
 80146b0:	08018d83 	.word	0x08018d83
 80146b4:	08018db1 	.word	0x08018db1

080146b8 <std>:
 80146b8:	2300      	movs	r3, #0
 80146ba:	b510      	push	{r4, lr}
 80146bc:	4604      	mov	r4, r0
 80146be:	e9c0 3300 	strd	r3, r3, [r0]
 80146c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80146c6:	6083      	str	r3, [r0, #8]
 80146c8:	8181      	strh	r1, [r0, #12]
 80146ca:	6643      	str	r3, [r0, #100]	; 0x64
 80146cc:	81c2      	strh	r2, [r0, #14]
 80146ce:	6183      	str	r3, [r0, #24]
 80146d0:	4619      	mov	r1, r3
 80146d2:	2208      	movs	r2, #8
 80146d4:	305c      	adds	r0, #92	; 0x5c
 80146d6:	f7ff ff71 	bl	80145bc <memset>
 80146da:	4b05      	ldr	r3, [pc, #20]	; (80146f0 <std+0x38>)
 80146dc:	6263      	str	r3, [r4, #36]	; 0x24
 80146de:	4b05      	ldr	r3, [pc, #20]	; (80146f4 <std+0x3c>)
 80146e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80146e2:	4b05      	ldr	r3, [pc, #20]	; (80146f8 <std+0x40>)
 80146e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146e6:	4b05      	ldr	r3, [pc, #20]	; (80146fc <std+0x44>)
 80146e8:	6224      	str	r4, [r4, #32]
 80146ea:	6323      	str	r3, [r4, #48]	; 0x30
 80146ec:	bd10      	pop	{r4, pc}
 80146ee:	bf00      	nop
 80146f0:	0801502d 	.word	0x0801502d
 80146f4:	0801504f 	.word	0x0801504f
 80146f8:	08015087 	.word	0x08015087
 80146fc:	080150ab 	.word	0x080150ab

08014700 <_cleanup_r>:
 8014700:	4901      	ldr	r1, [pc, #4]	; (8014708 <_cleanup_r+0x8>)
 8014702:	f000 b8c1 	b.w	8014888 <_fwalk_reent>
 8014706:	bf00      	nop
 8014708:	08015395 	.word	0x08015395

0801470c <__sfmoreglue>:
 801470c:	b570      	push	{r4, r5, r6, lr}
 801470e:	1e4a      	subs	r2, r1, #1
 8014710:	2568      	movs	r5, #104	; 0x68
 8014712:	4355      	muls	r5, r2
 8014714:	460e      	mov	r6, r1
 8014716:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801471a:	f000 f92f 	bl	801497c <_malloc_r>
 801471e:	4604      	mov	r4, r0
 8014720:	b140      	cbz	r0, 8014734 <__sfmoreglue+0x28>
 8014722:	2100      	movs	r1, #0
 8014724:	e9c0 1600 	strd	r1, r6, [r0]
 8014728:	300c      	adds	r0, #12
 801472a:	60a0      	str	r0, [r4, #8]
 801472c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014730:	f7ff ff44 	bl	80145bc <memset>
 8014734:	4620      	mov	r0, r4
 8014736:	bd70      	pop	{r4, r5, r6, pc}

08014738 <__sfp_lock_acquire>:
 8014738:	4801      	ldr	r0, [pc, #4]	; (8014740 <__sfp_lock_acquire+0x8>)
 801473a:	f000 b8c5 	b.w	80148c8 <__retarget_lock_acquire_recursive>
 801473e:	bf00      	nop
 8014740:	2000aaf4 	.word	0x2000aaf4

08014744 <__sfp_lock_release>:
 8014744:	4801      	ldr	r0, [pc, #4]	; (801474c <__sfp_lock_release+0x8>)
 8014746:	f000 b8c0 	b.w	80148ca <__retarget_lock_release_recursive>
 801474a:	bf00      	nop
 801474c:	2000aaf4 	.word	0x2000aaf4

08014750 <__sinit_lock_acquire>:
 8014750:	4801      	ldr	r0, [pc, #4]	; (8014758 <__sinit_lock_acquire+0x8>)
 8014752:	f000 b8b9 	b.w	80148c8 <__retarget_lock_acquire_recursive>
 8014756:	bf00      	nop
 8014758:	2000aaef 	.word	0x2000aaef

0801475c <__sinit_lock_release>:
 801475c:	4801      	ldr	r0, [pc, #4]	; (8014764 <__sinit_lock_release+0x8>)
 801475e:	f000 b8b4 	b.w	80148ca <__retarget_lock_release_recursive>
 8014762:	bf00      	nop
 8014764:	2000aaef 	.word	0x2000aaef

08014768 <__sinit>:
 8014768:	b510      	push	{r4, lr}
 801476a:	4604      	mov	r4, r0
 801476c:	f7ff fff0 	bl	8014750 <__sinit_lock_acquire>
 8014770:	69a3      	ldr	r3, [r4, #24]
 8014772:	b11b      	cbz	r3, 801477c <__sinit+0x14>
 8014774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014778:	f7ff bff0 	b.w	801475c <__sinit_lock_release>
 801477c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014780:	6523      	str	r3, [r4, #80]	; 0x50
 8014782:	4b13      	ldr	r3, [pc, #76]	; (80147d0 <__sinit+0x68>)
 8014784:	4a13      	ldr	r2, [pc, #76]	; (80147d4 <__sinit+0x6c>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	62a2      	str	r2, [r4, #40]	; 0x28
 801478a:	42a3      	cmp	r3, r4
 801478c:	bf04      	itt	eq
 801478e:	2301      	moveq	r3, #1
 8014790:	61a3      	streq	r3, [r4, #24]
 8014792:	4620      	mov	r0, r4
 8014794:	f000 f820 	bl	80147d8 <__sfp>
 8014798:	6060      	str	r0, [r4, #4]
 801479a:	4620      	mov	r0, r4
 801479c:	f000 f81c 	bl	80147d8 <__sfp>
 80147a0:	60a0      	str	r0, [r4, #8]
 80147a2:	4620      	mov	r0, r4
 80147a4:	f000 f818 	bl	80147d8 <__sfp>
 80147a8:	2200      	movs	r2, #0
 80147aa:	60e0      	str	r0, [r4, #12]
 80147ac:	2104      	movs	r1, #4
 80147ae:	6860      	ldr	r0, [r4, #4]
 80147b0:	f7ff ff82 	bl	80146b8 <std>
 80147b4:	68a0      	ldr	r0, [r4, #8]
 80147b6:	2201      	movs	r2, #1
 80147b8:	2109      	movs	r1, #9
 80147ba:	f7ff ff7d 	bl	80146b8 <std>
 80147be:	68e0      	ldr	r0, [r4, #12]
 80147c0:	2202      	movs	r2, #2
 80147c2:	2112      	movs	r1, #18
 80147c4:	f7ff ff78 	bl	80146b8 <std>
 80147c8:	2301      	movs	r3, #1
 80147ca:	61a3      	str	r3, [r4, #24]
 80147cc:	e7d2      	b.n	8014774 <__sinit+0xc>
 80147ce:	bf00      	nop
 80147d0:	08018cfc 	.word	0x08018cfc
 80147d4:	08014701 	.word	0x08014701

080147d8 <__sfp>:
 80147d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147da:	4607      	mov	r7, r0
 80147dc:	f7ff ffac 	bl	8014738 <__sfp_lock_acquire>
 80147e0:	4b1e      	ldr	r3, [pc, #120]	; (801485c <__sfp+0x84>)
 80147e2:	681e      	ldr	r6, [r3, #0]
 80147e4:	69b3      	ldr	r3, [r6, #24]
 80147e6:	b913      	cbnz	r3, 80147ee <__sfp+0x16>
 80147e8:	4630      	mov	r0, r6
 80147ea:	f7ff ffbd 	bl	8014768 <__sinit>
 80147ee:	3648      	adds	r6, #72	; 0x48
 80147f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80147f4:	3b01      	subs	r3, #1
 80147f6:	d503      	bpl.n	8014800 <__sfp+0x28>
 80147f8:	6833      	ldr	r3, [r6, #0]
 80147fa:	b30b      	cbz	r3, 8014840 <__sfp+0x68>
 80147fc:	6836      	ldr	r6, [r6, #0]
 80147fe:	e7f7      	b.n	80147f0 <__sfp+0x18>
 8014800:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014804:	b9d5      	cbnz	r5, 801483c <__sfp+0x64>
 8014806:	4b16      	ldr	r3, [pc, #88]	; (8014860 <__sfp+0x88>)
 8014808:	60e3      	str	r3, [r4, #12]
 801480a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801480e:	6665      	str	r5, [r4, #100]	; 0x64
 8014810:	f000 f859 	bl	80148c6 <__retarget_lock_init_recursive>
 8014814:	f7ff ff96 	bl	8014744 <__sfp_lock_release>
 8014818:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801481c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014820:	6025      	str	r5, [r4, #0]
 8014822:	61a5      	str	r5, [r4, #24]
 8014824:	2208      	movs	r2, #8
 8014826:	4629      	mov	r1, r5
 8014828:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801482c:	f7ff fec6 	bl	80145bc <memset>
 8014830:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014834:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014838:	4620      	mov	r0, r4
 801483a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801483c:	3468      	adds	r4, #104	; 0x68
 801483e:	e7d9      	b.n	80147f4 <__sfp+0x1c>
 8014840:	2104      	movs	r1, #4
 8014842:	4638      	mov	r0, r7
 8014844:	f7ff ff62 	bl	801470c <__sfmoreglue>
 8014848:	4604      	mov	r4, r0
 801484a:	6030      	str	r0, [r6, #0]
 801484c:	2800      	cmp	r0, #0
 801484e:	d1d5      	bne.n	80147fc <__sfp+0x24>
 8014850:	f7ff ff78 	bl	8014744 <__sfp_lock_release>
 8014854:	230c      	movs	r3, #12
 8014856:	603b      	str	r3, [r7, #0]
 8014858:	e7ee      	b.n	8014838 <__sfp+0x60>
 801485a:	bf00      	nop
 801485c:	08018cfc 	.word	0x08018cfc
 8014860:	ffff0001 	.word	0xffff0001

08014864 <fiprintf>:
 8014864:	b40e      	push	{r1, r2, r3}
 8014866:	b503      	push	{r0, r1, lr}
 8014868:	4601      	mov	r1, r0
 801486a:	ab03      	add	r3, sp, #12
 801486c:	4805      	ldr	r0, [pc, #20]	; (8014884 <fiprintf+0x20>)
 801486e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014872:	6800      	ldr	r0, [r0, #0]
 8014874:	9301      	str	r3, [sp, #4]
 8014876:	f000 f905 	bl	8014a84 <_vfiprintf_r>
 801487a:	b002      	add	sp, #8
 801487c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014880:	b003      	add	sp, #12
 8014882:	4770      	bx	lr
 8014884:	2000001c 	.word	0x2000001c

08014888 <_fwalk_reent>:
 8014888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801488c:	4606      	mov	r6, r0
 801488e:	4688      	mov	r8, r1
 8014890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014894:	2700      	movs	r7, #0
 8014896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801489a:	f1b9 0901 	subs.w	r9, r9, #1
 801489e:	d505      	bpl.n	80148ac <_fwalk_reent+0x24>
 80148a0:	6824      	ldr	r4, [r4, #0]
 80148a2:	2c00      	cmp	r4, #0
 80148a4:	d1f7      	bne.n	8014896 <_fwalk_reent+0xe>
 80148a6:	4638      	mov	r0, r7
 80148a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148ac:	89ab      	ldrh	r3, [r5, #12]
 80148ae:	2b01      	cmp	r3, #1
 80148b0:	d907      	bls.n	80148c2 <_fwalk_reent+0x3a>
 80148b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148b6:	3301      	adds	r3, #1
 80148b8:	d003      	beq.n	80148c2 <_fwalk_reent+0x3a>
 80148ba:	4629      	mov	r1, r5
 80148bc:	4630      	mov	r0, r6
 80148be:	47c0      	blx	r8
 80148c0:	4307      	orrs	r7, r0
 80148c2:	3568      	adds	r5, #104	; 0x68
 80148c4:	e7e9      	b.n	801489a <_fwalk_reent+0x12>

080148c6 <__retarget_lock_init_recursive>:
 80148c6:	4770      	bx	lr

080148c8 <__retarget_lock_acquire_recursive>:
 80148c8:	4770      	bx	lr

080148ca <__retarget_lock_release_recursive>:
 80148ca:	4770      	bx	lr

080148cc <malloc>:
 80148cc:	4b02      	ldr	r3, [pc, #8]	; (80148d8 <malloc+0xc>)
 80148ce:	4601      	mov	r1, r0
 80148d0:	6818      	ldr	r0, [r3, #0]
 80148d2:	f000 b853 	b.w	801497c <_malloc_r>
 80148d6:	bf00      	nop
 80148d8:	2000001c 	.word	0x2000001c

080148dc <_free_r>:
 80148dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148de:	2900      	cmp	r1, #0
 80148e0:	d048      	beq.n	8014974 <_free_r+0x98>
 80148e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148e6:	9001      	str	r0, [sp, #4]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	f1a1 0404 	sub.w	r4, r1, #4
 80148ee:	bfb8      	it	lt
 80148f0:	18e4      	addlt	r4, r4, r3
 80148f2:	f000 fe01 	bl	80154f8 <__malloc_lock>
 80148f6:	4a20      	ldr	r2, [pc, #128]	; (8014978 <_free_r+0x9c>)
 80148f8:	9801      	ldr	r0, [sp, #4]
 80148fa:	6813      	ldr	r3, [r2, #0]
 80148fc:	4615      	mov	r5, r2
 80148fe:	b933      	cbnz	r3, 801490e <_free_r+0x32>
 8014900:	6063      	str	r3, [r4, #4]
 8014902:	6014      	str	r4, [r2, #0]
 8014904:	b003      	add	sp, #12
 8014906:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801490a:	f000 bdfb 	b.w	8015504 <__malloc_unlock>
 801490e:	42a3      	cmp	r3, r4
 8014910:	d90b      	bls.n	801492a <_free_r+0x4e>
 8014912:	6821      	ldr	r1, [r4, #0]
 8014914:	1862      	adds	r2, r4, r1
 8014916:	4293      	cmp	r3, r2
 8014918:	bf04      	itt	eq
 801491a:	681a      	ldreq	r2, [r3, #0]
 801491c:	685b      	ldreq	r3, [r3, #4]
 801491e:	6063      	str	r3, [r4, #4]
 8014920:	bf04      	itt	eq
 8014922:	1852      	addeq	r2, r2, r1
 8014924:	6022      	streq	r2, [r4, #0]
 8014926:	602c      	str	r4, [r5, #0]
 8014928:	e7ec      	b.n	8014904 <_free_r+0x28>
 801492a:	461a      	mov	r2, r3
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	b10b      	cbz	r3, 8014934 <_free_r+0x58>
 8014930:	42a3      	cmp	r3, r4
 8014932:	d9fa      	bls.n	801492a <_free_r+0x4e>
 8014934:	6811      	ldr	r1, [r2, #0]
 8014936:	1855      	adds	r5, r2, r1
 8014938:	42a5      	cmp	r5, r4
 801493a:	d10b      	bne.n	8014954 <_free_r+0x78>
 801493c:	6824      	ldr	r4, [r4, #0]
 801493e:	4421      	add	r1, r4
 8014940:	1854      	adds	r4, r2, r1
 8014942:	42a3      	cmp	r3, r4
 8014944:	6011      	str	r1, [r2, #0]
 8014946:	d1dd      	bne.n	8014904 <_free_r+0x28>
 8014948:	681c      	ldr	r4, [r3, #0]
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	6053      	str	r3, [r2, #4]
 801494e:	4421      	add	r1, r4
 8014950:	6011      	str	r1, [r2, #0]
 8014952:	e7d7      	b.n	8014904 <_free_r+0x28>
 8014954:	d902      	bls.n	801495c <_free_r+0x80>
 8014956:	230c      	movs	r3, #12
 8014958:	6003      	str	r3, [r0, #0]
 801495a:	e7d3      	b.n	8014904 <_free_r+0x28>
 801495c:	6825      	ldr	r5, [r4, #0]
 801495e:	1961      	adds	r1, r4, r5
 8014960:	428b      	cmp	r3, r1
 8014962:	bf04      	itt	eq
 8014964:	6819      	ldreq	r1, [r3, #0]
 8014966:	685b      	ldreq	r3, [r3, #4]
 8014968:	6063      	str	r3, [r4, #4]
 801496a:	bf04      	itt	eq
 801496c:	1949      	addeq	r1, r1, r5
 801496e:	6021      	streq	r1, [r4, #0]
 8014970:	6054      	str	r4, [r2, #4]
 8014972:	e7c7      	b.n	8014904 <_free_r+0x28>
 8014974:	b003      	add	sp, #12
 8014976:	bd30      	pop	{r4, r5, pc}
 8014978:	200041d8 	.word	0x200041d8

0801497c <_malloc_r>:
 801497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801497e:	1ccd      	adds	r5, r1, #3
 8014980:	f025 0503 	bic.w	r5, r5, #3
 8014984:	3508      	adds	r5, #8
 8014986:	2d0c      	cmp	r5, #12
 8014988:	bf38      	it	cc
 801498a:	250c      	movcc	r5, #12
 801498c:	2d00      	cmp	r5, #0
 801498e:	4606      	mov	r6, r0
 8014990:	db01      	blt.n	8014996 <_malloc_r+0x1a>
 8014992:	42a9      	cmp	r1, r5
 8014994:	d903      	bls.n	801499e <_malloc_r+0x22>
 8014996:	230c      	movs	r3, #12
 8014998:	6033      	str	r3, [r6, #0]
 801499a:	2000      	movs	r0, #0
 801499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801499e:	f000 fdab 	bl	80154f8 <__malloc_lock>
 80149a2:	4921      	ldr	r1, [pc, #132]	; (8014a28 <_malloc_r+0xac>)
 80149a4:	680a      	ldr	r2, [r1, #0]
 80149a6:	4614      	mov	r4, r2
 80149a8:	b99c      	cbnz	r4, 80149d2 <_malloc_r+0x56>
 80149aa:	4f20      	ldr	r7, [pc, #128]	; (8014a2c <_malloc_r+0xb0>)
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	b923      	cbnz	r3, 80149ba <_malloc_r+0x3e>
 80149b0:	4621      	mov	r1, r4
 80149b2:	4630      	mov	r0, r6
 80149b4:	f000 fb2a 	bl	801500c <_sbrk_r>
 80149b8:	6038      	str	r0, [r7, #0]
 80149ba:	4629      	mov	r1, r5
 80149bc:	4630      	mov	r0, r6
 80149be:	f000 fb25 	bl	801500c <_sbrk_r>
 80149c2:	1c43      	adds	r3, r0, #1
 80149c4:	d123      	bne.n	8014a0e <_malloc_r+0x92>
 80149c6:	230c      	movs	r3, #12
 80149c8:	6033      	str	r3, [r6, #0]
 80149ca:	4630      	mov	r0, r6
 80149cc:	f000 fd9a 	bl	8015504 <__malloc_unlock>
 80149d0:	e7e3      	b.n	801499a <_malloc_r+0x1e>
 80149d2:	6823      	ldr	r3, [r4, #0]
 80149d4:	1b5b      	subs	r3, r3, r5
 80149d6:	d417      	bmi.n	8014a08 <_malloc_r+0x8c>
 80149d8:	2b0b      	cmp	r3, #11
 80149da:	d903      	bls.n	80149e4 <_malloc_r+0x68>
 80149dc:	6023      	str	r3, [r4, #0]
 80149de:	441c      	add	r4, r3
 80149e0:	6025      	str	r5, [r4, #0]
 80149e2:	e004      	b.n	80149ee <_malloc_r+0x72>
 80149e4:	6863      	ldr	r3, [r4, #4]
 80149e6:	42a2      	cmp	r2, r4
 80149e8:	bf0c      	ite	eq
 80149ea:	600b      	streq	r3, [r1, #0]
 80149ec:	6053      	strne	r3, [r2, #4]
 80149ee:	4630      	mov	r0, r6
 80149f0:	f000 fd88 	bl	8015504 <__malloc_unlock>
 80149f4:	f104 000b 	add.w	r0, r4, #11
 80149f8:	1d23      	adds	r3, r4, #4
 80149fa:	f020 0007 	bic.w	r0, r0, #7
 80149fe:	1ac2      	subs	r2, r0, r3
 8014a00:	d0cc      	beq.n	801499c <_malloc_r+0x20>
 8014a02:	1a1b      	subs	r3, r3, r0
 8014a04:	50a3      	str	r3, [r4, r2]
 8014a06:	e7c9      	b.n	801499c <_malloc_r+0x20>
 8014a08:	4622      	mov	r2, r4
 8014a0a:	6864      	ldr	r4, [r4, #4]
 8014a0c:	e7cc      	b.n	80149a8 <_malloc_r+0x2c>
 8014a0e:	1cc4      	adds	r4, r0, #3
 8014a10:	f024 0403 	bic.w	r4, r4, #3
 8014a14:	42a0      	cmp	r0, r4
 8014a16:	d0e3      	beq.n	80149e0 <_malloc_r+0x64>
 8014a18:	1a21      	subs	r1, r4, r0
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	f000 faf6 	bl	801500c <_sbrk_r>
 8014a20:	3001      	adds	r0, #1
 8014a22:	d1dd      	bne.n	80149e0 <_malloc_r+0x64>
 8014a24:	e7cf      	b.n	80149c6 <_malloc_r+0x4a>
 8014a26:	bf00      	nop
 8014a28:	200041d8 	.word	0x200041d8
 8014a2c:	200041dc 	.word	0x200041dc

08014a30 <__sfputc_r>:
 8014a30:	6893      	ldr	r3, [r2, #8]
 8014a32:	3b01      	subs	r3, #1
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	b410      	push	{r4}
 8014a38:	6093      	str	r3, [r2, #8]
 8014a3a:	da08      	bge.n	8014a4e <__sfputc_r+0x1e>
 8014a3c:	6994      	ldr	r4, [r2, #24]
 8014a3e:	42a3      	cmp	r3, r4
 8014a40:	db01      	blt.n	8014a46 <__sfputc_r+0x16>
 8014a42:	290a      	cmp	r1, #10
 8014a44:	d103      	bne.n	8014a4e <__sfputc_r+0x1e>
 8014a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a4a:	f000 bb33 	b.w	80150b4 <__swbuf_r>
 8014a4e:	6813      	ldr	r3, [r2, #0]
 8014a50:	1c58      	adds	r0, r3, #1
 8014a52:	6010      	str	r0, [r2, #0]
 8014a54:	7019      	strb	r1, [r3, #0]
 8014a56:	4608      	mov	r0, r1
 8014a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a5c:	4770      	bx	lr

08014a5e <__sfputs_r>:
 8014a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a60:	4606      	mov	r6, r0
 8014a62:	460f      	mov	r7, r1
 8014a64:	4614      	mov	r4, r2
 8014a66:	18d5      	adds	r5, r2, r3
 8014a68:	42ac      	cmp	r4, r5
 8014a6a:	d101      	bne.n	8014a70 <__sfputs_r+0x12>
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	e007      	b.n	8014a80 <__sfputs_r+0x22>
 8014a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a74:	463a      	mov	r2, r7
 8014a76:	4630      	mov	r0, r6
 8014a78:	f7ff ffda 	bl	8014a30 <__sfputc_r>
 8014a7c:	1c43      	adds	r3, r0, #1
 8014a7e:	d1f3      	bne.n	8014a68 <__sfputs_r+0xa>
 8014a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a84 <_vfiprintf_r>:
 8014a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a88:	460d      	mov	r5, r1
 8014a8a:	b09d      	sub	sp, #116	; 0x74
 8014a8c:	4614      	mov	r4, r2
 8014a8e:	4698      	mov	r8, r3
 8014a90:	4606      	mov	r6, r0
 8014a92:	b118      	cbz	r0, 8014a9c <_vfiprintf_r+0x18>
 8014a94:	6983      	ldr	r3, [r0, #24]
 8014a96:	b90b      	cbnz	r3, 8014a9c <_vfiprintf_r+0x18>
 8014a98:	f7ff fe66 	bl	8014768 <__sinit>
 8014a9c:	4b89      	ldr	r3, [pc, #548]	; (8014cc4 <_vfiprintf_r+0x240>)
 8014a9e:	429d      	cmp	r5, r3
 8014aa0:	d11b      	bne.n	8014ada <_vfiprintf_r+0x56>
 8014aa2:	6875      	ldr	r5, [r6, #4]
 8014aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014aa6:	07d9      	lsls	r1, r3, #31
 8014aa8:	d405      	bmi.n	8014ab6 <_vfiprintf_r+0x32>
 8014aaa:	89ab      	ldrh	r3, [r5, #12]
 8014aac:	059a      	lsls	r2, r3, #22
 8014aae:	d402      	bmi.n	8014ab6 <_vfiprintf_r+0x32>
 8014ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ab2:	f7ff ff09 	bl	80148c8 <__retarget_lock_acquire_recursive>
 8014ab6:	89ab      	ldrh	r3, [r5, #12]
 8014ab8:	071b      	lsls	r3, r3, #28
 8014aba:	d501      	bpl.n	8014ac0 <_vfiprintf_r+0x3c>
 8014abc:	692b      	ldr	r3, [r5, #16]
 8014abe:	b9eb      	cbnz	r3, 8014afc <_vfiprintf_r+0x78>
 8014ac0:	4629      	mov	r1, r5
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	f000 fb5a 	bl	801517c <__swsetup_r>
 8014ac8:	b1c0      	cbz	r0, 8014afc <_vfiprintf_r+0x78>
 8014aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014acc:	07dc      	lsls	r4, r3, #31
 8014ace:	d50e      	bpl.n	8014aee <_vfiprintf_r+0x6a>
 8014ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8014ad4:	b01d      	add	sp, #116	; 0x74
 8014ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ada:	4b7b      	ldr	r3, [pc, #492]	; (8014cc8 <_vfiprintf_r+0x244>)
 8014adc:	429d      	cmp	r5, r3
 8014ade:	d101      	bne.n	8014ae4 <_vfiprintf_r+0x60>
 8014ae0:	68b5      	ldr	r5, [r6, #8]
 8014ae2:	e7df      	b.n	8014aa4 <_vfiprintf_r+0x20>
 8014ae4:	4b79      	ldr	r3, [pc, #484]	; (8014ccc <_vfiprintf_r+0x248>)
 8014ae6:	429d      	cmp	r5, r3
 8014ae8:	bf08      	it	eq
 8014aea:	68f5      	ldreq	r5, [r6, #12]
 8014aec:	e7da      	b.n	8014aa4 <_vfiprintf_r+0x20>
 8014aee:	89ab      	ldrh	r3, [r5, #12]
 8014af0:	0598      	lsls	r0, r3, #22
 8014af2:	d4ed      	bmi.n	8014ad0 <_vfiprintf_r+0x4c>
 8014af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014af6:	f7ff fee8 	bl	80148ca <__retarget_lock_release_recursive>
 8014afa:	e7e9      	b.n	8014ad0 <_vfiprintf_r+0x4c>
 8014afc:	2300      	movs	r3, #0
 8014afe:	9309      	str	r3, [sp, #36]	; 0x24
 8014b00:	2320      	movs	r3, #32
 8014b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b0a:	2330      	movs	r3, #48	; 0x30
 8014b0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014cd0 <_vfiprintf_r+0x24c>
 8014b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b14:	f04f 0901 	mov.w	r9, #1
 8014b18:	4623      	mov	r3, r4
 8014b1a:	469a      	mov	sl, r3
 8014b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b20:	b10a      	cbz	r2, 8014b26 <_vfiprintf_r+0xa2>
 8014b22:	2a25      	cmp	r2, #37	; 0x25
 8014b24:	d1f9      	bne.n	8014b1a <_vfiprintf_r+0x96>
 8014b26:	ebba 0b04 	subs.w	fp, sl, r4
 8014b2a:	d00b      	beq.n	8014b44 <_vfiprintf_r+0xc0>
 8014b2c:	465b      	mov	r3, fp
 8014b2e:	4622      	mov	r2, r4
 8014b30:	4629      	mov	r1, r5
 8014b32:	4630      	mov	r0, r6
 8014b34:	f7ff ff93 	bl	8014a5e <__sfputs_r>
 8014b38:	3001      	adds	r0, #1
 8014b3a:	f000 80aa 	beq.w	8014c92 <_vfiprintf_r+0x20e>
 8014b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b40:	445a      	add	r2, fp
 8014b42:	9209      	str	r2, [sp, #36]	; 0x24
 8014b44:	f89a 3000 	ldrb.w	r3, [sl]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	f000 80a2 	beq.w	8014c92 <_vfiprintf_r+0x20e>
 8014b4e:	2300      	movs	r3, #0
 8014b50:	f04f 32ff 	mov.w	r2, #4294967295
 8014b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b58:	f10a 0a01 	add.w	sl, sl, #1
 8014b5c:	9304      	str	r3, [sp, #16]
 8014b5e:	9307      	str	r3, [sp, #28]
 8014b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b64:	931a      	str	r3, [sp, #104]	; 0x68
 8014b66:	4654      	mov	r4, sl
 8014b68:	2205      	movs	r2, #5
 8014b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b6e:	4858      	ldr	r0, [pc, #352]	; (8014cd0 <_vfiprintf_r+0x24c>)
 8014b70:	f7eb fb4e 	bl	8000210 <memchr>
 8014b74:	9a04      	ldr	r2, [sp, #16]
 8014b76:	b9d8      	cbnz	r0, 8014bb0 <_vfiprintf_r+0x12c>
 8014b78:	06d1      	lsls	r1, r2, #27
 8014b7a:	bf44      	itt	mi
 8014b7c:	2320      	movmi	r3, #32
 8014b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b82:	0713      	lsls	r3, r2, #28
 8014b84:	bf44      	itt	mi
 8014b86:	232b      	movmi	r3, #43	; 0x2b
 8014b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8014b90:	2b2a      	cmp	r3, #42	; 0x2a
 8014b92:	d015      	beq.n	8014bc0 <_vfiprintf_r+0x13c>
 8014b94:	9a07      	ldr	r2, [sp, #28]
 8014b96:	4654      	mov	r4, sl
 8014b98:	2000      	movs	r0, #0
 8014b9a:	f04f 0c0a 	mov.w	ip, #10
 8014b9e:	4621      	mov	r1, r4
 8014ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ba4:	3b30      	subs	r3, #48	; 0x30
 8014ba6:	2b09      	cmp	r3, #9
 8014ba8:	d94e      	bls.n	8014c48 <_vfiprintf_r+0x1c4>
 8014baa:	b1b0      	cbz	r0, 8014bda <_vfiprintf_r+0x156>
 8014bac:	9207      	str	r2, [sp, #28]
 8014bae:	e014      	b.n	8014bda <_vfiprintf_r+0x156>
 8014bb0:	eba0 0308 	sub.w	r3, r0, r8
 8014bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	9304      	str	r3, [sp, #16]
 8014bbc:	46a2      	mov	sl, r4
 8014bbe:	e7d2      	b.n	8014b66 <_vfiprintf_r+0xe2>
 8014bc0:	9b03      	ldr	r3, [sp, #12]
 8014bc2:	1d19      	adds	r1, r3, #4
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	9103      	str	r1, [sp, #12]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	bfbb      	ittet	lt
 8014bcc:	425b      	neglt	r3, r3
 8014bce:	f042 0202 	orrlt.w	r2, r2, #2
 8014bd2:	9307      	strge	r3, [sp, #28]
 8014bd4:	9307      	strlt	r3, [sp, #28]
 8014bd6:	bfb8      	it	lt
 8014bd8:	9204      	strlt	r2, [sp, #16]
 8014bda:	7823      	ldrb	r3, [r4, #0]
 8014bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8014bde:	d10c      	bne.n	8014bfa <_vfiprintf_r+0x176>
 8014be0:	7863      	ldrb	r3, [r4, #1]
 8014be2:	2b2a      	cmp	r3, #42	; 0x2a
 8014be4:	d135      	bne.n	8014c52 <_vfiprintf_r+0x1ce>
 8014be6:	9b03      	ldr	r3, [sp, #12]
 8014be8:	1d1a      	adds	r2, r3, #4
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	9203      	str	r2, [sp, #12]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	bfb8      	it	lt
 8014bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8014bf6:	3402      	adds	r4, #2
 8014bf8:	9305      	str	r3, [sp, #20]
 8014bfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ce0 <_vfiprintf_r+0x25c>
 8014bfe:	7821      	ldrb	r1, [r4, #0]
 8014c00:	2203      	movs	r2, #3
 8014c02:	4650      	mov	r0, sl
 8014c04:	f7eb fb04 	bl	8000210 <memchr>
 8014c08:	b140      	cbz	r0, 8014c1c <_vfiprintf_r+0x198>
 8014c0a:	2340      	movs	r3, #64	; 0x40
 8014c0c:	eba0 000a 	sub.w	r0, r0, sl
 8014c10:	fa03 f000 	lsl.w	r0, r3, r0
 8014c14:	9b04      	ldr	r3, [sp, #16]
 8014c16:	4303      	orrs	r3, r0
 8014c18:	3401      	adds	r4, #1
 8014c1a:	9304      	str	r3, [sp, #16]
 8014c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c20:	482c      	ldr	r0, [pc, #176]	; (8014cd4 <_vfiprintf_r+0x250>)
 8014c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c26:	2206      	movs	r2, #6
 8014c28:	f7eb faf2 	bl	8000210 <memchr>
 8014c2c:	2800      	cmp	r0, #0
 8014c2e:	d03f      	beq.n	8014cb0 <_vfiprintf_r+0x22c>
 8014c30:	4b29      	ldr	r3, [pc, #164]	; (8014cd8 <_vfiprintf_r+0x254>)
 8014c32:	bb1b      	cbnz	r3, 8014c7c <_vfiprintf_r+0x1f8>
 8014c34:	9b03      	ldr	r3, [sp, #12]
 8014c36:	3307      	adds	r3, #7
 8014c38:	f023 0307 	bic.w	r3, r3, #7
 8014c3c:	3308      	adds	r3, #8
 8014c3e:	9303      	str	r3, [sp, #12]
 8014c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c42:	443b      	add	r3, r7
 8014c44:	9309      	str	r3, [sp, #36]	; 0x24
 8014c46:	e767      	b.n	8014b18 <_vfiprintf_r+0x94>
 8014c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c4c:	460c      	mov	r4, r1
 8014c4e:	2001      	movs	r0, #1
 8014c50:	e7a5      	b.n	8014b9e <_vfiprintf_r+0x11a>
 8014c52:	2300      	movs	r3, #0
 8014c54:	3401      	adds	r4, #1
 8014c56:	9305      	str	r3, [sp, #20]
 8014c58:	4619      	mov	r1, r3
 8014c5a:	f04f 0c0a 	mov.w	ip, #10
 8014c5e:	4620      	mov	r0, r4
 8014c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c64:	3a30      	subs	r2, #48	; 0x30
 8014c66:	2a09      	cmp	r2, #9
 8014c68:	d903      	bls.n	8014c72 <_vfiprintf_r+0x1ee>
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d0c5      	beq.n	8014bfa <_vfiprintf_r+0x176>
 8014c6e:	9105      	str	r1, [sp, #20]
 8014c70:	e7c3      	b.n	8014bfa <_vfiprintf_r+0x176>
 8014c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c76:	4604      	mov	r4, r0
 8014c78:	2301      	movs	r3, #1
 8014c7a:	e7f0      	b.n	8014c5e <_vfiprintf_r+0x1da>
 8014c7c:	ab03      	add	r3, sp, #12
 8014c7e:	9300      	str	r3, [sp, #0]
 8014c80:	462a      	mov	r2, r5
 8014c82:	4b16      	ldr	r3, [pc, #88]	; (8014cdc <_vfiprintf_r+0x258>)
 8014c84:	a904      	add	r1, sp, #16
 8014c86:	4630      	mov	r0, r6
 8014c88:	f3af 8000 	nop.w
 8014c8c:	4607      	mov	r7, r0
 8014c8e:	1c78      	adds	r0, r7, #1
 8014c90:	d1d6      	bne.n	8014c40 <_vfiprintf_r+0x1bc>
 8014c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c94:	07d9      	lsls	r1, r3, #31
 8014c96:	d405      	bmi.n	8014ca4 <_vfiprintf_r+0x220>
 8014c98:	89ab      	ldrh	r3, [r5, #12]
 8014c9a:	059a      	lsls	r2, r3, #22
 8014c9c:	d402      	bmi.n	8014ca4 <_vfiprintf_r+0x220>
 8014c9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ca0:	f7ff fe13 	bl	80148ca <__retarget_lock_release_recursive>
 8014ca4:	89ab      	ldrh	r3, [r5, #12]
 8014ca6:	065b      	lsls	r3, r3, #25
 8014ca8:	f53f af12 	bmi.w	8014ad0 <_vfiprintf_r+0x4c>
 8014cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cae:	e711      	b.n	8014ad4 <_vfiprintf_r+0x50>
 8014cb0:	ab03      	add	r3, sp, #12
 8014cb2:	9300      	str	r3, [sp, #0]
 8014cb4:	462a      	mov	r2, r5
 8014cb6:	4b09      	ldr	r3, [pc, #36]	; (8014cdc <_vfiprintf_r+0x258>)
 8014cb8:	a904      	add	r1, sp, #16
 8014cba:	4630      	mov	r0, r6
 8014cbc:	f000 f880 	bl	8014dc0 <_printf_i>
 8014cc0:	e7e4      	b.n	8014c8c <_vfiprintf_r+0x208>
 8014cc2:	bf00      	nop
 8014cc4:	08018dd4 	.word	0x08018dd4
 8014cc8:	08018df4 	.word	0x08018df4
 8014ccc:	08018db4 	.word	0x08018db4
 8014cd0:	08018e14 	.word	0x08018e14
 8014cd4:	08018e1e 	.word	0x08018e1e
 8014cd8:	00000000 	.word	0x00000000
 8014cdc:	08014a5f 	.word	0x08014a5f
 8014ce0:	08018e1a 	.word	0x08018e1a

08014ce4 <_printf_common>:
 8014ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ce8:	4616      	mov	r6, r2
 8014cea:	4699      	mov	r9, r3
 8014cec:	688a      	ldr	r2, [r1, #8]
 8014cee:	690b      	ldr	r3, [r1, #16]
 8014cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014cf4:	4293      	cmp	r3, r2
 8014cf6:	bfb8      	it	lt
 8014cf8:	4613      	movlt	r3, r2
 8014cfa:	6033      	str	r3, [r6, #0]
 8014cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014d00:	4607      	mov	r7, r0
 8014d02:	460c      	mov	r4, r1
 8014d04:	b10a      	cbz	r2, 8014d0a <_printf_common+0x26>
 8014d06:	3301      	adds	r3, #1
 8014d08:	6033      	str	r3, [r6, #0]
 8014d0a:	6823      	ldr	r3, [r4, #0]
 8014d0c:	0699      	lsls	r1, r3, #26
 8014d0e:	bf42      	ittt	mi
 8014d10:	6833      	ldrmi	r3, [r6, #0]
 8014d12:	3302      	addmi	r3, #2
 8014d14:	6033      	strmi	r3, [r6, #0]
 8014d16:	6825      	ldr	r5, [r4, #0]
 8014d18:	f015 0506 	ands.w	r5, r5, #6
 8014d1c:	d106      	bne.n	8014d2c <_printf_common+0x48>
 8014d1e:	f104 0a19 	add.w	sl, r4, #25
 8014d22:	68e3      	ldr	r3, [r4, #12]
 8014d24:	6832      	ldr	r2, [r6, #0]
 8014d26:	1a9b      	subs	r3, r3, r2
 8014d28:	42ab      	cmp	r3, r5
 8014d2a:	dc26      	bgt.n	8014d7a <_printf_common+0x96>
 8014d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014d30:	1e13      	subs	r3, r2, #0
 8014d32:	6822      	ldr	r2, [r4, #0]
 8014d34:	bf18      	it	ne
 8014d36:	2301      	movne	r3, #1
 8014d38:	0692      	lsls	r2, r2, #26
 8014d3a:	d42b      	bmi.n	8014d94 <_printf_common+0xb0>
 8014d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014d40:	4649      	mov	r1, r9
 8014d42:	4638      	mov	r0, r7
 8014d44:	47c0      	blx	r8
 8014d46:	3001      	adds	r0, #1
 8014d48:	d01e      	beq.n	8014d88 <_printf_common+0xa4>
 8014d4a:	6823      	ldr	r3, [r4, #0]
 8014d4c:	68e5      	ldr	r5, [r4, #12]
 8014d4e:	6832      	ldr	r2, [r6, #0]
 8014d50:	f003 0306 	and.w	r3, r3, #6
 8014d54:	2b04      	cmp	r3, #4
 8014d56:	bf08      	it	eq
 8014d58:	1aad      	subeq	r5, r5, r2
 8014d5a:	68a3      	ldr	r3, [r4, #8]
 8014d5c:	6922      	ldr	r2, [r4, #16]
 8014d5e:	bf0c      	ite	eq
 8014d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014d64:	2500      	movne	r5, #0
 8014d66:	4293      	cmp	r3, r2
 8014d68:	bfc4      	itt	gt
 8014d6a:	1a9b      	subgt	r3, r3, r2
 8014d6c:	18ed      	addgt	r5, r5, r3
 8014d6e:	2600      	movs	r6, #0
 8014d70:	341a      	adds	r4, #26
 8014d72:	42b5      	cmp	r5, r6
 8014d74:	d11a      	bne.n	8014dac <_printf_common+0xc8>
 8014d76:	2000      	movs	r0, #0
 8014d78:	e008      	b.n	8014d8c <_printf_common+0xa8>
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	4652      	mov	r2, sl
 8014d7e:	4649      	mov	r1, r9
 8014d80:	4638      	mov	r0, r7
 8014d82:	47c0      	blx	r8
 8014d84:	3001      	adds	r0, #1
 8014d86:	d103      	bne.n	8014d90 <_printf_common+0xac>
 8014d88:	f04f 30ff 	mov.w	r0, #4294967295
 8014d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d90:	3501      	adds	r5, #1
 8014d92:	e7c6      	b.n	8014d22 <_printf_common+0x3e>
 8014d94:	18e1      	adds	r1, r4, r3
 8014d96:	1c5a      	adds	r2, r3, #1
 8014d98:	2030      	movs	r0, #48	; 0x30
 8014d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014d9e:	4422      	add	r2, r4
 8014da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014da8:	3302      	adds	r3, #2
 8014daa:	e7c7      	b.n	8014d3c <_printf_common+0x58>
 8014dac:	2301      	movs	r3, #1
 8014dae:	4622      	mov	r2, r4
 8014db0:	4649      	mov	r1, r9
 8014db2:	4638      	mov	r0, r7
 8014db4:	47c0      	blx	r8
 8014db6:	3001      	adds	r0, #1
 8014db8:	d0e6      	beq.n	8014d88 <_printf_common+0xa4>
 8014dba:	3601      	adds	r6, #1
 8014dbc:	e7d9      	b.n	8014d72 <_printf_common+0x8e>
	...

08014dc0 <_printf_i>:
 8014dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014dc4:	460c      	mov	r4, r1
 8014dc6:	4691      	mov	r9, r2
 8014dc8:	7e27      	ldrb	r7, [r4, #24]
 8014dca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014dcc:	2f78      	cmp	r7, #120	; 0x78
 8014dce:	4680      	mov	r8, r0
 8014dd0:	469a      	mov	sl, r3
 8014dd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014dd6:	d807      	bhi.n	8014de8 <_printf_i+0x28>
 8014dd8:	2f62      	cmp	r7, #98	; 0x62
 8014dda:	d80a      	bhi.n	8014df2 <_printf_i+0x32>
 8014ddc:	2f00      	cmp	r7, #0
 8014dde:	f000 80d8 	beq.w	8014f92 <_printf_i+0x1d2>
 8014de2:	2f58      	cmp	r7, #88	; 0x58
 8014de4:	f000 80a3 	beq.w	8014f2e <_printf_i+0x16e>
 8014de8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014df0:	e03a      	b.n	8014e68 <_printf_i+0xa8>
 8014df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014df6:	2b15      	cmp	r3, #21
 8014df8:	d8f6      	bhi.n	8014de8 <_printf_i+0x28>
 8014dfa:	a001      	add	r0, pc, #4	; (adr r0, 8014e00 <_printf_i+0x40>)
 8014dfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014e00:	08014e59 	.word	0x08014e59
 8014e04:	08014e6d 	.word	0x08014e6d
 8014e08:	08014de9 	.word	0x08014de9
 8014e0c:	08014de9 	.word	0x08014de9
 8014e10:	08014de9 	.word	0x08014de9
 8014e14:	08014de9 	.word	0x08014de9
 8014e18:	08014e6d 	.word	0x08014e6d
 8014e1c:	08014de9 	.word	0x08014de9
 8014e20:	08014de9 	.word	0x08014de9
 8014e24:	08014de9 	.word	0x08014de9
 8014e28:	08014de9 	.word	0x08014de9
 8014e2c:	08014f79 	.word	0x08014f79
 8014e30:	08014e9d 	.word	0x08014e9d
 8014e34:	08014f5b 	.word	0x08014f5b
 8014e38:	08014de9 	.word	0x08014de9
 8014e3c:	08014de9 	.word	0x08014de9
 8014e40:	08014f9b 	.word	0x08014f9b
 8014e44:	08014de9 	.word	0x08014de9
 8014e48:	08014e9d 	.word	0x08014e9d
 8014e4c:	08014de9 	.word	0x08014de9
 8014e50:	08014de9 	.word	0x08014de9
 8014e54:	08014f63 	.word	0x08014f63
 8014e58:	680b      	ldr	r3, [r1, #0]
 8014e5a:	1d1a      	adds	r2, r3, #4
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	600a      	str	r2, [r1, #0]
 8014e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e0a3      	b.n	8014fb4 <_printf_i+0x1f4>
 8014e6c:	6825      	ldr	r5, [r4, #0]
 8014e6e:	6808      	ldr	r0, [r1, #0]
 8014e70:	062e      	lsls	r6, r5, #24
 8014e72:	f100 0304 	add.w	r3, r0, #4
 8014e76:	d50a      	bpl.n	8014e8e <_printf_i+0xce>
 8014e78:	6805      	ldr	r5, [r0, #0]
 8014e7a:	600b      	str	r3, [r1, #0]
 8014e7c:	2d00      	cmp	r5, #0
 8014e7e:	da03      	bge.n	8014e88 <_printf_i+0xc8>
 8014e80:	232d      	movs	r3, #45	; 0x2d
 8014e82:	426d      	negs	r5, r5
 8014e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e88:	485e      	ldr	r0, [pc, #376]	; (8015004 <_printf_i+0x244>)
 8014e8a:	230a      	movs	r3, #10
 8014e8c:	e019      	b.n	8014ec2 <_printf_i+0x102>
 8014e8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014e92:	6805      	ldr	r5, [r0, #0]
 8014e94:	600b      	str	r3, [r1, #0]
 8014e96:	bf18      	it	ne
 8014e98:	b22d      	sxthne	r5, r5
 8014e9a:	e7ef      	b.n	8014e7c <_printf_i+0xbc>
 8014e9c:	680b      	ldr	r3, [r1, #0]
 8014e9e:	6825      	ldr	r5, [r4, #0]
 8014ea0:	1d18      	adds	r0, r3, #4
 8014ea2:	6008      	str	r0, [r1, #0]
 8014ea4:	0628      	lsls	r0, r5, #24
 8014ea6:	d501      	bpl.n	8014eac <_printf_i+0xec>
 8014ea8:	681d      	ldr	r5, [r3, #0]
 8014eaa:	e002      	b.n	8014eb2 <_printf_i+0xf2>
 8014eac:	0669      	lsls	r1, r5, #25
 8014eae:	d5fb      	bpl.n	8014ea8 <_printf_i+0xe8>
 8014eb0:	881d      	ldrh	r5, [r3, #0]
 8014eb2:	4854      	ldr	r0, [pc, #336]	; (8015004 <_printf_i+0x244>)
 8014eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8014eb6:	bf0c      	ite	eq
 8014eb8:	2308      	moveq	r3, #8
 8014eba:	230a      	movne	r3, #10
 8014ebc:	2100      	movs	r1, #0
 8014ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014ec2:	6866      	ldr	r6, [r4, #4]
 8014ec4:	60a6      	str	r6, [r4, #8]
 8014ec6:	2e00      	cmp	r6, #0
 8014ec8:	bfa2      	ittt	ge
 8014eca:	6821      	ldrge	r1, [r4, #0]
 8014ecc:	f021 0104 	bicge.w	r1, r1, #4
 8014ed0:	6021      	strge	r1, [r4, #0]
 8014ed2:	b90d      	cbnz	r5, 8014ed8 <_printf_i+0x118>
 8014ed4:	2e00      	cmp	r6, #0
 8014ed6:	d04d      	beq.n	8014f74 <_printf_i+0x1b4>
 8014ed8:	4616      	mov	r6, r2
 8014eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8014ede:	fb03 5711 	mls	r7, r3, r1, r5
 8014ee2:	5dc7      	ldrb	r7, [r0, r7]
 8014ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014ee8:	462f      	mov	r7, r5
 8014eea:	42bb      	cmp	r3, r7
 8014eec:	460d      	mov	r5, r1
 8014eee:	d9f4      	bls.n	8014eda <_printf_i+0x11a>
 8014ef0:	2b08      	cmp	r3, #8
 8014ef2:	d10b      	bne.n	8014f0c <_printf_i+0x14c>
 8014ef4:	6823      	ldr	r3, [r4, #0]
 8014ef6:	07df      	lsls	r7, r3, #31
 8014ef8:	d508      	bpl.n	8014f0c <_printf_i+0x14c>
 8014efa:	6923      	ldr	r3, [r4, #16]
 8014efc:	6861      	ldr	r1, [r4, #4]
 8014efe:	4299      	cmp	r1, r3
 8014f00:	bfde      	ittt	le
 8014f02:	2330      	movle	r3, #48	; 0x30
 8014f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014f0c:	1b92      	subs	r2, r2, r6
 8014f0e:	6122      	str	r2, [r4, #16]
 8014f10:	f8cd a000 	str.w	sl, [sp]
 8014f14:	464b      	mov	r3, r9
 8014f16:	aa03      	add	r2, sp, #12
 8014f18:	4621      	mov	r1, r4
 8014f1a:	4640      	mov	r0, r8
 8014f1c:	f7ff fee2 	bl	8014ce4 <_printf_common>
 8014f20:	3001      	adds	r0, #1
 8014f22:	d14c      	bne.n	8014fbe <_printf_i+0x1fe>
 8014f24:	f04f 30ff 	mov.w	r0, #4294967295
 8014f28:	b004      	add	sp, #16
 8014f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f2e:	4835      	ldr	r0, [pc, #212]	; (8015004 <_printf_i+0x244>)
 8014f30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014f34:	6823      	ldr	r3, [r4, #0]
 8014f36:	680e      	ldr	r6, [r1, #0]
 8014f38:	061f      	lsls	r7, r3, #24
 8014f3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8014f3e:	600e      	str	r6, [r1, #0]
 8014f40:	d514      	bpl.n	8014f6c <_printf_i+0x1ac>
 8014f42:	07d9      	lsls	r1, r3, #31
 8014f44:	bf44      	itt	mi
 8014f46:	f043 0320 	orrmi.w	r3, r3, #32
 8014f4a:	6023      	strmi	r3, [r4, #0]
 8014f4c:	b91d      	cbnz	r5, 8014f56 <_printf_i+0x196>
 8014f4e:	6823      	ldr	r3, [r4, #0]
 8014f50:	f023 0320 	bic.w	r3, r3, #32
 8014f54:	6023      	str	r3, [r4, #0]
 8014f56:	2310      	movs	r3, #16
 8014f58:	e7b0      	b.n	8014ebc <_printf_i+0xfc>
 8014f5a:	6823      	ldr	r3, [r4, #0]
 8014f5c:	f043 0320 	orr.w	r3, r3, #32
 8014f60:	6023      	str	r3, [r4, #0]
 8014f62:	2378      	movs	r3, #120	; 0x78
 8014f64:	4828      	ldr	r0, [pc, #160]	; (8015008 <_printf_i+0x248>)
 8014f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014f6a:	e7e3      	b.n	8014f34 <_printf_i+0x174>
 8014f6c:	065e      	lsls	r6, r3, #25
 8014f6e:	bf48      	it	mi
 8014f70:	b2ad      	uxthmi	r5, r5
 8014f72:	e7e6      	b.n	8014f42 <_printf_i+0x182>
 8014f74:	4616      	mov	r6, r2
 8014f76:	e7bb      	b.n	8014ef0 <_printf_i+0x130>
 8014f78:	680b      	ldr	r3, [r1, #0]
 8014f7a:	6826      	ldr	r6, [r4, #0]
 8014f7c:	6960      	ldr	r0, [r4, #20]
 8014f7e:	1d1d      	adds	r5, r3, #4
 8014f80:	600d      	str	r5, [r1, #0]
 8014f82:	0635      	lsls	r5, r6, #24
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	d501      	bpl.n	8014f8c <_printf_i+0x1cc>
 8014f88:	6018      	str	r0, [r3, #0]
 8014f8a:	e002      	b.n	8014f92 <_printf_i+0x1d2>
 8014f8c:	0671      	lsls	r1, r6, #25
 8014f8e:	d5fb      	bpl.n	8014f88 <_printf_i+0x1c8>
 8014f90:	8018      	strh	r0, [r3, #0]
 8014f92:	2300      	movs	r3, #0
 8014f94:	6123      	str	r3, [r4, #16]
 8014f96:	4616      	mov	r6, r2
 8014f98:	e7ba      	b.n	8014f10 <_printf_i+0x150>
 8014f9a:	680b      	ldr	r3, [r1, #0]
 8014f9c:	1d1a      	adds	r2, r3, #4
 8014f9e:	600a      	str	r2, [r1, #0]
 8014fa0:	681e      	ldr	r6, [r3, #0]
 8014fa2:	6862      	ldr	r2, [r4, #4]
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	4630      	mov	r0, r6
 8014fa8:	f7eb f932 	bl	8000210 <memchr>
 8014fac:	b108      	cbz	r0, 8014fb2 <_printf_i+0x1f2>
 8014fae:	1b80      	subs	r0, r0, r6
 8014fb0:	6060      	str	r0, [r4, #4]
 8014fb2:	6863      	ldr	r3, [r4, #4]
 8014fb4:	6123      	str	r3, [r4, #16]
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014fbc:	e7a8      	b.n	8014f10 <_printf_i+0x150>
 8014fbe:	6923      	ldr	r3, [r4, #16]
 8014fc0:	4632      	mov	r2, r6
 8014fc2:	4649      	mov	r1, r9
 8014fc4:	4640      	mov	r0, r8
 8014fc6:	47d0      	blx	sl
 8014fc8:	3001      	adds	r0, #1
 8014fca:	d0ab      	beq.n	8014f24 <_printf_i+0x164>
 8014fcc:	6823      	ldr	r3, [r4, #0]
 8014fce:	079b      	lsls	r3, r3, #30
 8014fd0:	d413      	bmi.n	8014ffa <_printf_i+0x23a>
 8014fd2:	68e0      	ldr	r0, [r4, #12]
 8014fd4:	9b03      	ldr	r3, [sp, #12]
 8014fd6:	4298      	cmp	r0, r3
 8014fd8:	bfb8      	it	lt
 8014fda:	4618      	movlt	r0, r3
 8014fdc:	e7a4      	b.n	8014f28 <_printf_i+0x168>
 8014fde:	2301      	movs	r3, #1
 8014fe0:	4632      	mov	r2, r6
 8014fe2:	4649      	mov	r1, r9
 8014fe4:	4640      	mov	r0, r8
 8014fe6:	47d0      	blx	sl
 8014fe8:	3001      	adds	r0, #1
 8014fea:	d09b      	beq.n	8014f24 <_printf_i+0x164>
 8014fec:	3501      	adds	r5, #1
 8014fee:	68e3      	ldr	r3, [r4, #12]
 8014ff0:	9903      	ldr	r1, [sp, #12]
 8014ff2:	1a5b      	subs	r3, r3, r1
 8014ff4:	42ab      	cmp	r3, r5
 8014ff6:	dcf2      	bgt.n	8014fde <_printf_i+0x21e>
 8014ff8:	e7eb      	b.n	8014fd2 <_printf_i+0x212>
 8014ffa:	2500      	movs	r5, #0
 8014ffc:	f104 0619 	add.w	r6, r4, #25
 8015000:	e7f5      	b.n	8014fee <_printf_i+0x22e>
 8015002:	bf00      	nop
 8015004:	08018e25 	.word	0x08018e25
 8015008:	08018e36 	.word	0x08018e36

0801500c <_sbrk_r>:
 801500c:	b538      	push	{r3, r4, r5, lr}
 801500e:	4d06      	ldr	r5, [pc, #24]	; (8015028 <_sbrk_r+0x1c>)
 8015010:	2300      	movs	r3, #0
 8015012:	4604      	mov	r4, r0
 8015014:	4608      	mov	r0, r1
 8015016:	602b      	str	r3, [r5, #0]
 8015018:	f7eb fd0a 	bl	8000a30 <_sbrk>
 801501c:	1c43      	adds	r3, r0, #1
 801501e:	d102      	bne.n	8015026 <_sbrk_r+0x1a>
 8015020:	682b      	ldr	r3, [r5, #0]
 8015022:	b103      	cbz	r3, 8015026 <_sbrk_r+0x1a>
 8015024:	6023      	str	r3, [r4, #0]
 8015026:	bd38      	pop	{r3, r4, r5, pc}
 8015028:	2000aae4 	.word	0x2000aae4

0801502c <__sread>:
 801502c:	b510      	push	{r4, lr}
 801502e:	460c      	mov	r4, r1
 8015030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015034:	f000 fa6c 	bl	8015510 <_read_r>
 8015038:	2800      	cmp	r0, #0
 801503a:	bfab      	itete	ge
 801503c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801503e:	89a3      	ldrhlt	r3, [r4, #12]
 8015040:	181b      	addge	r3, r3, r0
 8015042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015046:	bfac      	ite	ge
 8015048:	6563      	strge	r3, [r4, #84]	; 0x54
 801504a:	81a3      	strhlt	r3, [r4, #12]
 801504c:	bd10      	pop	{r4, pc}

0801504e <__swrite>:
 801504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015052:	461f      	mov	r7, r3
 8015054:	898b      	ldrh	r3, [r1, #12]
 8015056:	05db      	lsls	r3, r3, #23
 8015058:	4605      	mov	r5, r0
 801505a:	460c      	mov	r4, r1
 801505c:	4616      	mov	r6, r2
 801505e:	d505      	bpl.n	801506c <__swrite+0x1e>
 8015060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015064:	2302      	movs	r3, #2
 8015066:	2200      	movs	r2, #0
 8015068:	f000 f9d0 	bl	801540c <_lseek_r>
 801506c:	89a3      	ldrh	r3, [r4, #12]
 801506e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015076:	81a3      	strh	r3, [r4, #12]
 8015078:	4632      	mov	r2, r6
 801507a:	463b      	mov	r3, r7
 801507c:	4628      	mov	r0, r5
 801507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015082:	f000 b869 	b.w	8015158 <_write_r>

08015086 <__sseek>:
 8015086:	b510      	push	{r4, lr}
 8015088:	460c      	mov	r4, r1
 801508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801508e:	f000 f9bd 	bl	801540c <_lseek_r>
 8015092:	1c43      	adds	r3, r0, #1
 8015094:	89a3      	ldrh	r3, [r4, #12]
 8015096:	bf15      	itete	ne
 8015098:	6560      	strne	r0, [r4, #84]	; 0x54
 801509a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801509e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150a2:	81a3      	strheq	r3, [r4, #12]
 80150a4:	bf18      	it	ne
 80150a6:	81a3      	strhne	r3, [r4, #12]
 80150a8:	bd10      	pop	{r4, pc}

080150aa <__sclose>:
 80150aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ae:	f000 b8db 	b.w	8015268 <_close_r>
	...

080150b4 <__swbuf_r>:
 80150b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150b6:	460e      	mov	r6, r1
 80150b8:	4614      	mov	r4, r2
 80150ba:	4605      	mov	r5, r0
 80150bc:	b118      	cbz	r0, 80150c6 <__swbuf_r+0x12>
 80150be:	6983      	ldr	r3, [r0, #24]
 80150c0:	b90b      	cbnz	r3, 80150c6 <__swbuf_r+0x12>
 80150c2:	f7ff fb51 	bl	8014768 <__sinit>
 80150c6:	4b21      	ldr	r3, [pc, #132]	; (801514c <__swbuf_r+0x98>)
 80150c8:	429c      	cmp	r4, r3
 80150ca:	d12b      	bne.n	8015124 <__swbuf_r+0x70>
 80150cc:	686c      	ldr	r4, [r5, #4]
 80150ce:	69a3      	ldr	r3, [r4, #24]
 80150d0:	60a3      	str	r3, [r4, #8]
 80150d2:	89a3      	ldrh	r3, [r4, #12]
 80150d4:	071a      	lsls	r2, r3, #28
 80150d6:	d52f      	bpl.n	8015138 <__swbuf_r+0x84>
 80150d8:	6923      	ldr	r3, [r4, #16]
 80150da:	b36b      	cbz	r3, 8015138 <__swbuf_r+0x84>
 80150dc:	6923      	ldr	r3, [r4, #16]
 80150de:	6820      	ldr	r0, [r4, #0]
 80150e0:	1ac0      	subs	r0, r0, r3
 80150e2:	6963      	ldr	r3, [r4, #20]
 80150e4:	b2f6      	uxtb	r6, r6
 80150e6:	4283      	cmp	r3, r0
 80150e8:	4637      	mov	r7, r6
 80150ea:	dc04      	bgt.n	80150f6 <__swbuf_r+0x42>
 80150ec:	4621      	mov	r1, r4
 80150ee:	4628      	mov	r0, r5
 80150f0:	f000 f950 	bl	8015394 <_fflush_r>
 80150f4:	bb30      	cbnz	r0, 8015144 <__swbuf_r+0x90>
 80150f6:	68a3      	ldr	r3, [r4, #8]
 80150f8:	3b01      	subs	r3, #1
 80150fa:	60a3      	str	r3, [r4, #8]
 80150fc:	6823      	ldr	r3, [r4, #0]
 80150fe:	1c5a      	adds	r2, r3, #1
 8015100:	6022      	str	r2, [r4, #0]
 8015102:	701e      	strb	r6, [r3, #0]
 8015104:	6963      	ldr	r3, [r4, #20]
 8015106:	3001      	adds	r0, #1
 8015108:	4283      	cmp	r3, r0
 801510a:	d004      	beq.n	8015116 <__swbuf_r+0x62>
 801510c:	89a3      	ldrh	r3, [r4, #12]
 801510e:	07db      	lsls	r3, r3, #31
 8015110:	d506      	bpl.n	8015120 <__swbuf_r+0x6c>
 8015112:	2e0a      	cmp	r6, #10
 8015114:	d104      	bne.n	8015120 <__swbuf_r+0x6c>
 8015116:	4621      	mov	r1, r4
 8015118:	4628      	mov	r0, r5
 801511a:	f000 f93b 	bl	8015394 <_fflush_r>
 801511e:	b988      	cbnz	r0, 8015144 <__swbuf_r+0x90>
 8015120:	4638      	mov	r0, r7
 8015122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015124:	4b0a      	ldr	r3, [pc, #40]	; (8015150 <__swbuf_r+0x9c>)
 8015126:	429c      	cmp	r4, r3
 8015128:	d101      	bne.n	801512e <__swbuf_r+0x7a>
 801512a:	68ac      	ldr	r4, [r5, #8]
 801512c:	e7cf      	b.n	80150ce <__swbuf_r+0x1a>
 801512e:	4b09      	ldr	r3, [pc, #36]	; (8015154 <__swbuf_r+0xa0>)
 8015130:	429c      	cmp	r4, r3
 8015132:	bf08      	it	eq
 8015134:	68ec      	ldreq	r4, [r5, #12]
 8015136:	e7ca      	b.n	80150ce <__swbuf_r+0x1a>
 8015138:	4621      	mov	r1, r4
 801513a:	4628      	mov	r0, r5
 801513c:	f000 f81e 	bl	801517c <__swsetup_r>
 8015140:	2800      	cmp	r0, #0
 8015142:	d0cb      	beq.n	80150dc <__swbuf_r+0x28>
 8015144:	f04f 37ff 	mov.w	r7, #4294967295
 8015148:	e7ea      	b.n	8015120 <__swbuf_r+0x6c>
 801514a:	bf00      	nop
 801514c:	08018dd4 	.word	0x08018dd4
 8015150:	08018df4 	.word	0x08018df4
 8015154:	08018db4 	.word	0x08018db4

08015158 <_write_r>:
 8015158:	b538      	push	{r3, r4, r5, lr}
 801515a:	4d07      	ldr	r5, [pc, #28]	; (8015178 <_write_r+0x20>)
 801515c:	4604      	mov	r4, r0
 801515e:	4608      	mov	r0, r1
 8015160:	4611      	mov	r1, r2
 8015162:	2200      	movs	r2, #0
 8015164:	602a      	str	r2, [r5, #0]
 8015166:	461a      	mov	r2, r3
 8015168:	f7eb fc11 	bl	800098e <_write>
 801516c:	1c43      	adds	r3, r0, #1
 801516e:	d102      	bne.n	8015176 <_write_r+0x1e>
 8015170:	682b      	ldr	r3, [r5, #0]
 8015172:	b103      	cbz	r3, 8015176 <_write_r+0x1e>
 8015174:	6023      	str	r3, [r4, #0]
 8015176:	bd38      	pop	{r3, r4, r5, pc}
 8015178:	2000aae4 	.word	0x2000aae4

0801517c <__swsetup_r>:
 801517c:	4b32      	ldr	r3, [pc, #200]	; (8015248 <__swsetup_r+0xcc>)
 801517e:	b570      	push	{r4, r5, r6, lr}
 8015180:	681d      	ldr	r5, [r3, #0]
 8015182:	4606      	mov	r6, r0
 8015184:	460c      	mov	r4, r1
 8015186:	b125      	cbz	r5, 8015192 <__swsetup_r+0x16>
 8015188:	69ab      	ldr	r3, [r5, #24]
 801518a:	b913      	cbnz	r3, 8015192 <__swsetup_r+0x16>
 801518c:	4628      	mov	r0, r5
 801518e:	f7ff faeb 	bl	8014768 <__sinit>
 8015192:	4b2e      	ldr	r3, [pc, #184]	; (801524c <__swsetup_r+0xd0>)
 8015194:	429c      	cmp	r4, r3
 8015196:	d10f      	bne.n	80151b8 <__swsetup_r+0x3c>
 8015198:	686c      	ldr	r4, [r5, #4]
 801519a:	89a3      	ldrh	r3, [r4, #12]
 801519c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151a0:	0719      	lsls	r1, r3, #28
 80151a2:	d42c      	bmi.n	80151fe <__swsetup_r+0x82>
 80151a4:	06dd      	lsls	r5, r3, #27
 80151a6:	d411      	bmi.n	80151cc <__swsetup_r+0x50>
 80151a8:	2309      	movs	r3, #9
 80151aa:	6033      	str	r3, [r6, #0]
 80151ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80151b0:	81a3      	strh	r3, [r4, #12]
 80151b2:	f04f 30ff 	mov.w	r0, #4294967295
 80151b6:	e03e      	b.n	8015236 <__swsetup_r+0xba>
 80151b8:	4b25      	ldr	r3, [pc, #148]	; (8015250 <__swsetup_r+0xd4>)
 80151ba:	429c      	cmp	r4, r3
 80151bc:	d101      	bne.n	80151c2 <__swsetup_r+0x46>
 80151be:	68ac      	ldr	r4, [r5, #8]
 80151c0:	e7eb      	b.n	801519a <__swsetup_r+0x1e>
 80151c2:	4b24      	ldr	r3, [pc, #144]	; (8015254 <__swsetup_r+0xd8>)
 80151c4:	429c      	cmp	r4, r3
 80151c6:	bf08      	it	eq
 80151c8:	68ec      	ldreq	r4, [r5, #12]
 80151ca:	e7e6      	b.n	801519a <__swsetup_r+0x1e>
 80151cc:	0758      	lsls	r0, r3, #29
 80151ce:	d512      	bpl.n	80151f6 <__swsetup_r+0x7a>
 80151d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151d2:	b141      	cbz	r1, 80151e6 <__swsetup_r+0x6a>
 80151d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151d8:	4299      	cmp	r1, r3
 80151da:	d002      	beq.n	80151e2 <__swsetup_r+0x66>
 80151dc:	4630      	mov	r0, r6
 80151de:	f7ff fb7d 	bl	80148dc <_free_r>
 80151e2:	2300      	movs	r3, #0
 80151e4:	6363      	str	r3, [r4, #52]	; 0x34
 80151e6:	89a3      	ldrh	r3, [r4, #12]
 80151e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80151ec:	81a3      	strh	r3, [r4, #12]
 80151ee:	2300      	movs	r3, #0
 80151f0:	6063      	str	r3, [r4, #4]
 80151f2:	6923      	ldr	r3, [r4, #16]
 80151f4:	6023      	str	r3, [r4, #0]
 80151f6:	89a3      	ldrh	r3, [r4, #12]
 80151f8:	f043 0308 	orr.w	r3, r3, #8
 80151fc:	81a3      	strh	r3, [r4, #12]
 80151fe:	6923      	ldr	r3, [r4, #16]
 8015200:	b94b      	cbnz	r3, 8015216 <__swsetup_r+0x9a>
 8015202:	89a3      	ldrh	r3, [r4, #12]
 8015204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801520c:	d003      	beq.n	8015216 <__swsetup_r+0x9a>
 801520e:	4621      	mov	r1, r4
 8015210:	4630      	mov	r0, r6
 8015212:	f000 f931 	bl	8015478 <__smakebuf_r>
 8015216:	89a0      	ldrh	r0, [r4, #12]
 8015218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801521c:	f010 0301 	ands.w	r3, r0, #1
 8015220:	d00a      	beq.n	8015238 <__swsetup_r+0xbc>
 8015222:	2300      	movs	r3, #0
 8015224:	60a3      	str	r3, [r4, #8]
 8015226:	6963      	ldr	r3, [r4, #20]
 8015228:	425b      	negs	r3, r3
 801522a:	61a3      	str	r3, [r4, #24]
 801522c:	6923      	ldr	r3, [r4, #16]
 801522e:	b943      	cbnz	r3, 8015242 <__swsetup_r+0xc6>
 8015230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015234:	d1ba      	bne.n	80151ac <__swsetup_r+0x30>
 8015236:	bd70      	pop	{r4, r5, r6, pc}
 8015238:	0781      	lsls	r1, r0, #30
 801523a:	bf58      	it	pl
 801523c:	6963      	ldrpl	r3, [r4, #20]
 801523e:	60a3      	str	r3, [r4, #8]
 8015240:	e7f4      	b.n	801522c <__swsetup_r+0xb0>
 8015242:	2000      	movs	r0, #0
 8015244:	e7f7      	b.n	8015236 <__swsetup_r+0xba>
 8015246:	bf00      	nop
 8015248:	2000001c 	.word	0x2000001c
 801524c:	08018dd4 	.word	0x08018dd4
 8015250:	08018df4 	.word	0x08018df4
 8015254:	08018db4 	.word	0x08018db4

08015258 <abort>:
 8015258:	b508      	push	{r3, lr}
 801525a:	2006      	movs	r0, #6
 801525c:	f000 f992 	bl	8015584 <raise>
 8015260:	2001      	movs	r0, #1
 8015262:	f7eb fb6d 	bl	8000940 <_exit>
	...

08015268 <_close_r>:
 8015268:	b538      	push	{r3, r4, r5, lr}
 801526a:	4d06      	ldr	r5, [pc, #24]	; (8015284 <_close_r+0x1c>)
 801526c:	2300      	movs	r3, #0
 801526e:	4604      	mov	r4, r0
 8015270:	4608      	mov	r0, r1
 8015272:	602b      	str	r3, [r5, #0]
 8015274:	f7eb fba7 	bl	80009c6 <_close>
 8015278:	1c43      	adds	r3, r0, #1
 801527a:	d102      	bne.n	8015282 <_close_r+0x1a>
 801527c:	682b      	ldr	r3, [r5, #0]
 801527e:	b103      	cbz	r3, 8015282 <_close_r+0x1a>
 8015280:	6023      	str	r3, [r4, #0]
 8015282:	bd38      	pop	{r3, r4, r5, pc}
 8015284:	2000aae4 	.word	0x2000aae4

08015288 <__sflush_r>:
 8015288:	898a      	ldrh	r2, [r1, #12]
 801528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801528e:	4605      	mov	r5, r0
 8015290:	0710      	lsls	r0, r2, #28
 8015292:	460c      	mov	r4, r1
 8015294:	d458      	bmi.n	8015348 <__sflush_r+0xc0>
 8015296:	684b      	ldr	r3, [r1, #4]
 8015298:	2b00      	cmp	r3, #0
 801529a:	dc05      	bgt.n	80152a8 <__sflush_r+0x20>
 801529c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801529e:	2b00      	cmp	r3, #0
 80152a0:	dc02      	bgt.n	80152a8 <__sflush_r+0x20>
 80152a2:	2000      	movs	r0, #0
 80152a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152aa:	2e00      	cmp	r6, #0
 80152ac:	d0f9      	beq.n	80152a2 <__sflush_r+0x1a>
 80152ae:	2300      	movs	r3, #0
 80152b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80152b4:	682f      	ldr	r7, [r5, #0]
 80152b6:	602b      	str	r3, [r5, #0]
 80152b8:	d032      	beq.n	8015320 <__sflush_r+0x98>
 80152ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80152bc:	89a3      	ldrh	r3, [r4, #12]
 80152be:	075a      	lsls	r2, r3, #29
 80152c0:	d505      	bpl.n	80152ce <__sflush_r+0x46>
 80152c2:	6863      	ldr	r3, [r4, #4]
 80152c4:	1ac0      	subs	r0, r0, r3
 80152c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152c8:	b10b      	cbz	r3, 80152ce <__sflush_r+0x46>
 80152ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80152cc:	1ac0      	subs	r0, r0, r3
 80152ce:	2300      	movs	r3, #0
 80152d0:	4602      	mov	r2, r0
 80152d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152d4:	6a21      	ldr	r1, [r4, #32]
 80152d6:	4628      	mov	r0, r5
 80152d8:	47b0      	blx	r6
 80152da:	1c43      	adds	r3, r0, #1
 80152dc:	89a3      	ldrh	r3, [r4, #12]
 80152de:	d106      	bne.n	80152ee <__sflush_r+0x66>
 80152e0:	6829      	ldr	r1, [r5, #0]
 80152e2:	291d      	cmp	r1, #29
 80152e4:	d82c      	bhi.n	8015340 <__sflush_r+0xb8>
 80152e6:	4a2a      	ldr	r2, [pc, #168]	; (8015390 <__sflush_r+0x108>)
 80152e8:	40ca      	lsrs	r2, r1
 80152ea:	07d6      	lsls	r6, r2, #31
 80152ec:	d528      	bpl.n	8015340 <__sflush_r+0xb8>
 80152ee:	2200      	movs	r2, #0
 80152f0:	6062      	str	r2, [r4, #4]
 80152f2:	04d9      	lsls	r1, r3, #19
 80152f4:	6922      	ldr	r2, [r4, #16]
 80152f6:	6022      	str	r2, [r4, #0]
 80152f8:	d504      	bpl.n	8015304 <__sflush_r+0x7c>
 80152fa:	1c42      	adds	r2, r0, #1
 80152fc:	d101      	bne.n	8015302 <__sflush_r+0x7a>
 80152fe:	682b      	ldr	r3, [r5, #0]
 8015300:	b903      	cbnz	r3, 8015304 <__sflush_r+0x7c>
 8015302:	6560      	str	r0, [r4, #84]	; 0x54
 8015304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015306:	602f      	str	r7, [r5, #0]
 8015308:	2900      	cmp	r1, #0
 801530a:	d0ca      	beq.n	80152a2 <__sflush_r+0x1a>
 801530c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015310:	4299      	cmp	r1, r3
 8015312:	d002      	beq.n	801531a <__sflush_r+0x92>
 8015314:	4628      	mov	r0, r5
 8015316:	f7ff fae1 	bl	80148dc <_free_r>
 801531a:	2000      	movs	r0, #0
 801531c:	6360      	str	r0, [r4, #52]	; 0x34
 801531e:	e7c1      	b.n	80152a4 <__sflush_r+0x1c>
 8015320:	6a21      	ldr	r1, [r4, #32]
 8015322:	2301      	movs	r3, #1
 8015324:	4628      	mov	r0, r5
 8015326:	47b0      	blx	r6
 8015328:	1c41      	adds	r1, r0, #1
 801532a:	d1c7      	bne.n	80152bc <__sflush_r+0x34>
 801532c:	682b      	ldr	r3, [r5, #0]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d0c4      	beq.n	80152bc <__sflush_r+0x34>
 8015332:	2b1d      	cmp	r3, #29
 8015334:	d001      	beq.n	801533a <__sflush_r+0xb2>
 8015336:	2b16      	cmp	r3, #22
 8015338:	d101      	bne.n	801533e <__sflush_r+0xb6>
 801533a:	602f      	str	r7, [r5, #0]
 801533c:	e7b1      	b.n	80152a2 <__sflush_r+0x1a>
 801533e:	89a3      	ldrh	r3, [r4, #12]
 8015340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015344:	81a3      	strh	r3, [r4, #12]
 8015346:	e7ad      	b.n	80152a4 <__sflush_r+0x1c>
 8015348:	690f      	ldr	r7, [r1, #16]
 801534a:	2f00      	cmp	r7, #0
 801534c:	d0a9      	beq.n	80152a2 <__sflush_r+0x1a>
 801534e:	0793      	lsls	r3, r2, #30
 8015350:	680e      	ldr	r6, [r1, #0]
 8015352:	bf08      	it	eq
 8015354:	694b      	ldreq	r3, [r1, #20]
 8015356:	600f      	str	r7, [r1, #0]
 8015358:	bf18      	it	ne
 801535a:	2300      	movne	r3, #0
 801535c:	eba6 0807 	sub.w	r8, r6, r7
 8015360:	608b      	str	r3, [r1, #8]
 8015362:	f1b8 0f00 	cmp.w	r8, #0
 8015366:	dd9c      	ble.n	80152a2 <__sflush_r+0x1a>
 8015368:	6a21      	ldr	r1, [r4, #32]
 801536a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801536c:	4643      	mov	r3, r8
 801536e:	463a      	mov	r2, r7
 8015370:	4628      	mov	r0, r5
 8015372:	47b0      	blx	r6
 8015374:	2800      	cmp	r0, #0
 8015376:	dc06      	bgt.n	8015386 <__sflush_r+0xfe>
 8015378:	89a3      	ldrh	r3, [r4, #12]
 801537a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801537e:	81a3      	strh	r3, [r4, #12]
 8015380:	f04f 30ff 	mov.w	r0, #4294967295
 8015384:	e78e      	b.n	80152a4 <__sflush_r+0x1c>
 8015386:	4407      	add	r7, r0
 8015388:	eba8 0800 	sub.w	r8, r8, r0
 801538c:	e7e9      	b.n	8015362 <__sflush_r+0xda>
 801538e:	bf00      	nop
 8015390:	20400001 	.word	0x20400001

08015394 <_fflush_r>:
 8015394:	b538      	push	{r3, r4, r5, lr}
 8015396:	690b      	ldr	r3, [r1, #16]
 8015398:	4605      	mov	r5, r0
 801539a:	460c      	mov	r4, r1
 801539c:	b913      	cbnz	r3, 80153a4 <_fflush_r+0x10>
 801539e:	2500      	movs	r5, #0
 80153a0:	4628      	mov	r0, r5
 80153a2:	bd38      	pop	{r3, r4, r5, pc}
 80153a4:	b118      	cbz	r0, 80153ae <_fflush_r+0x1a>
 80153a6:	6983      	ldr	r3, [r0, #24]
 80153a8:	b90b      	cbnz	r3, 80153ae <_fflush_r+0x1a>
 80153aa:	f7ff f9dd 	bl	8014768 <__sinit>
 80153ae:	4b14      	ldr	r3, [pc, #80]	; (8015400 <_fflush_r+0x6c>)
 80153b0:	429c      	cmp	r4, r3
 80153b2:	d11b      	bne.n	80153ec <_fflush_r+0x58>
 80153b4:	686c      	ldr	r4, [r5, #4]
 80153b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d0ef      	beq.n	801539e <_fflush_r+0xa>
 80153be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80153c0:	07d0      	lsls	r0, r2, #31
 80153c2:	d404      	bmi.n	80153ce <_fflush_r+0x3a>
 80153c4:	0599      	lsls	r1, r3, #22
 80153c6:	d402      	bmi.n	80153ce <_fflush_r+0x3a>
 80153c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153ca:	f7ff fa7d 	bl	80148c8 <__retarget_lock_acquire_recursive>
 80153ce:	4628      	mov	r0, r5
 80153d0:	4621      	mov	r1, r4
 80153d2:	f7ff ff59 	bl	8015288 <__sflush_r>
 80153d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80153d8:	07da      	lsls	r2, r3, #31
 80153da:	4605      	mov	r5, r0
 80153dc:	d4e0      	bmi.n	80153a0 <_fflush_r+0xc>
 80153de:	89a3      	ldrh	r3, [r4, #12]
 80153e0:	059b      	lsls	r3, r3, #22
 80153e2:	d4dd      	bmi.n	80153a0 <_fflush_r+0xc>
 80153e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153e6:	f7ff fa70 	bl	80148ca <__retarget_lock_release_recursive>
 80153ea:	e7d9      	b.n	80153a0 <_fflush_r+0xc>
 80153ec:	4b05      	ldr	r3, [pc, #20]	; (8015404 <_fflush_r+0x70>)
 80153ee:	429c      	cmp	r4, r3
 80153f0:	d101      	bne.n	80153f6 <_fflush_r+0x62>
 80153f2:	68ac      	ldr	r4, [r5, #8]
 80153f4:	e7df      	b.n	80153b6 <_fflush_r+0x22>
 80153f6:	4b04      	ldr	r3, [pc, #16]	; (8015408 <_fflush_r+0x74>)
 80153f8:	429c      	cmp	r4, r3
 80153fa:	bf08      	it	eq
 80153fc:	68ec      	ldreq	r4, [r5, #12]
 80153fe:	e7da      	b.n	80153b6 <_fflush_r+0x22>
 8015400:	08018dd4 	.word	0x08018dd4
 8015404:	08018df4 	.word	0x08018df4
 8015408:	08018db4 	.word	0x08018db4

0801540c <_lseek_r>:
 801540c:	b538      	push	{r3, r4, r5, lr}
 801540e:	4d07      	ldr	r5, [pc, #28]	; (801542c <_lseek_r+0x20>)
 8015410:	4604      	mov	r4, r0
 8015412:	4608      	mov	r0, r1
 8015414:	4611      	mov	r1, r2
 8015416:	2200      	movs	r2, #0
 8015418:	602a      	str	r2, [r5, #0]
 801541a:	461a      	mov	r2, r3
 801541c:	f7eb fafa 	bl	8000a14 <_lseek>
 8015420:	1c43      	adds	r3, r0, #1
 8015422:	d102      	bne.n	801542a <_lseek_r+0x1e>
 8015424:	682b      	ldr	r3, [r5, #0]
 8015426:	b103      	cbz	r3, 801542a <_lseek_r+0x1e>
 8015428:	6023      	str	r3, [r4, #0]
 801542a:	bd38      	pop	{r3, r4, r5, pc}
 801542c:	2000aae4 	.word	0x2000aae4

08015430 <__swhatbuf_r>:
 8015430:	b570      	push	{r4, r5, r6, lr}
 8015432:	460e      	mov	r6, r1
 8015434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015438:	2900      	cmp	r1, #0
 801543a:	b096      	sub	sp, #88	; 0x58
 801543c:	4614      	mov	r4, r2
 801543e:	461d      	mov	r5, r3
 8015440:	da07      	bge.n	8015452 <__swhatbuf_r+0x22>
 8015442:	2300      	movs	r3, #0
 8015444:	602b      	str	r3, [r5, #0]
 8015446:	89b3      	ldrh	r3, [r6, #12]
 8015448:	061a      	lsls	r2, r3, #24
 801544a:	d410      	bmi.n	801546e <__swhatbuf_r+0x3e>
 801544c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015450:	e00e      	b.n	8015470 <__swhatbuf_r+0x40>
 8015452:	466a      	mov	r2, sp
 8015454:	f000 f8b2 	bl	80155bc <_fstat_r>
 8015458:	2800      	cmp	r0, #0
 801545a:	dbf2      	blt.n	8015442 <__swhatbuf_r+0x12>
 801545c:	9a01      	ldr	r2, [sp, #4]
 801545e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015462:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015466:	425a      	negs	r2, r3
 8015468:	415a      	adcs	r2, r3
 801546a:	602a      	str	r2, [r5, #0]
 801546c:	e7ee      	b.n	801544c <__swhatbuf_r+0x1c>
 801546e:	2340      	movs	r3, #64	; 0x40
 8015470:	2000      	movs	r0, #0
 8015472:	6023      	str	r3, [r4, #0]
 8015474:	b016      	add	sp, #88	; 0x58
 8015476:	bd70      	pop	{r4, r5, r6, pc}

08015478 <__smakebuf_r>:
 8015478:	898b      	ldrh	r3, [r1, #12]
 801547a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801547c:	079d      	lsls	r5, r3, #30
 801547e:	4606      	mov	r6, r0
 8015480:	460c      	mov	r4, r1
 8015482:	d507      	bpl.n	8015494 <__smakebuf_r+0x1c>
 8015484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015488:	6023      	str	r3, [r4, #0]
 801548a:	6123      	str	r3, [r4, #16]
 801548c:	2301      	movs	r3, #1
 801548e:	6163      	str	r3, [r4, #20]
 8015490:	b002      	add	sp, #8
 8015492:	bd70      	pop	{r4, r5, r6, pc}
 8015494:	ab01      	add	r3, sp, #4
 8015496:	466a      	mov	r2, sp
 8015498:	f7ff ffca 	bl	8015430 <__swhatbuf_r>
 801549c:	9900      	ldr	r1, [sp, #0]
 801549e:	4605      	mov	r5, r0
 80154a0:	4630      	mov	r0, r6
 80154a2:	f7ff fa6b 	bl	801497c <_malloc_r>
 80154a6:	b948      	cbnz	r0, 80154bc <__smakebuf_r+0x44>
 80154a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154ac:	059a      	lsls	r2, r3, #22
 80154ae:	d4ef      	bmi.n	8015490 <__smakebuf_r+0x18>
 80154b0:	f023 0303 	bic.w	r3, r3, #3
 80154b4:	f043 0302 	orr.w	r3, r3, #2
 80154b8:	81a3      	strh	r3, [r4, #12]
 80154ba:	e7e3      	b.n	8015484 <__smakebuf_r+0xc>
 80154bc:	4b0d      	ldr	r3, [pc, #52]	; (80154f4 <__smakebuf_r+0x7c>)
 80154be:	62b3      	str	r3, [r6, #40]	; 0x28
 80154c0:	89a3      	ldrh	r3, [r4, #12]
 80154c2:	6020      	str	r0, [r4, #0]
 80154c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154c8:	81a3      	strh	r3, [r4, #12]
 80154ca:	9b00      	ldr	r3, [sp, #0]
 80154cc:	6163      	str	r3, [r4, #20]
 80154ce:	9b01      	ldr	r3, [sp, #4]
 80154d0:	6120      	str	r0, [r4, #16]
 80154d2:	b15b      	cbz	r3, 80154ec <__smakebuf_r+0x74>
 80154d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154d8:	4630      	mov	r0, r6
 80154da:	f000 f881 	bl	80155e0 <_isatty_r>
 80154de:	b128      	cbz	r0, 80154ec <__smakebuf_r+0x74>
 80154e0:	89a3      	ldrh	r3, [r4, #12]
 80154e2:	f023 0303 	bic.w	r3, r3, #3
 80154e6:	f043 0301 	orr.w	r3, r3, #1
 80154ea:	81a3      	strh	r3, [r4, #12]
 80154ec:	89a0      	ldrh	r0, [r4, #12]
 80154ee:	4305      	orrs	r5, r0
 80154f0:	81a5      	strh	r5, [r4, #12]
 80154f2:	e7cd      	b.n	8015490 <__smakebuf_r+0x18>
 80154f4:	08014701 	.word	0x08014701

080154f8 <__malloc_lock>:
 80154f8:	4801      	ldr	r0, [pc, #4]	; (8015500 <__malloc_lock+0x8>)
 80154fa:	f7ff b9e5 	b.w	80148c8 <__retarget_lock_acquire_recursive>
 80154fe:	bf00      	nop
 8015500:	2000aaf0 	.word	0x2000aaf0

08015504 <__malloc_unlock>:
 8015504:	4801      	ldr	r0, [pc, #4]	; (801550c <__malloc_unlock+0x8>)
 8015506:	f7ff b9e0 	b.w	80148ca <__retarget_lock_release_recursive>
 801550a:	bf00      	nop
 801550c:	2000aaf0 	.word	0x2000aaf0

08015510 <_read_r>:
 8015510:	b538      	push	{r3, r4, r5, lr}
 8015512:	4d07      	ldr	r5, [pc, #28]	; (8015530 <_read_r+0x20>)
 8015514:	4604      	mov	r4, r0
 8015516:	4608      	mov	r0, r1
 8015518:	4611      	mov	r1, r2
 801551a:	2200      	movs	r2, #0
 801551c:	602a      	str	r2, [r5, #0]
 801551e:	461a      	mov	r2, r3
 8015520:	f7eb fa18 	bl	8000954 <_read>
 8015524:	1c43      	adds	r3, r0, #1
 8015526:	d102      	bne.n	801552e <_read_r+0x1e>
 8015528:	682b      	ldr	r3, [r5, #0]
 801552a:	b103      	cbz	r3, 801552e <_read_r+0x1e>
 801552c:	6023      	str	r3, [r4, #0]
 801552e:	bd38      	pop	{r3, r4, r5, pc}
 8015530:	2000aae4 	.word	0x2000aae4

08015534 <_raise_r>:
 8015534:	291f      	cmp	r1, #31
 8015536:	b538      	push	{r3, r4, r5, lr}
 8015538:	4604      	mov	r4, r0
 801553a:	460d      	mov	r5, r1
 801553c:	d904      	bls.n	8015548 <_raise_r+0x14>
 801553e:	2316      	movs	r3, #22
 8015540:	6003      	str	r3, [r0, #0]
 8015542:	f04f 30ff 	mov.w	r0, #4294967295
 8015546:	bd38      	pop	{r3, r4, r5, pc}
 8015548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801554a:	b112      	cbz	r2, 8015552 <_raise_r+0x1e>
 801554c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015550:	b94b      	cbnz	r3, 8015566 <_raise_r+0x32>
 8015552:	4620      	mov	r0, r4
 8015554:	f000 f830 	bl	80155b8 <_getpid_r>
 8015558:	462a      	mov	r2, r5
 801555a:	4601      	mov	r1, r0
 801555c:	4620      	mov	r0, r4
 801555e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015562:	f000 b817 	b.w	8015594 <_kill_r>
 8015566:	2b01      	cmp	r3, #1
 8015568:	d00a      	beq.n	8015580 <_raise_r+0x4c>
 801556a:	1c59      	adds	r1, r3, #1
 801556c:	d103      	bne.n	8015576 <_raise_r+0x42>
 801556e:	2316      	movs	r3, #22
 8015570:	6003      	str	r3, [r0, #0]
 8015572:	2001      	movs	r0, #1
 8015574:	e7e7      	b.n	8015546 <_raise_r+0x12>
 8015576:	2400      	movs	r4, #0
 8015578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801557c:	4628      	mov	r0, r5
 801557e:	4798      	blx	r3
 8015580:	2000      	movs	r0, #0
 8015582:	e7e0      	b.n	8015546 <_raise_r+0x12>

08015584 <raise>:
 8015584:	4b02      	ldr	r3, [pc, #8]	; (8015590 <raise+0xc>)
 8015586:	4601      	mov	r1, r0
 8015588:	6818      	ldr	r0, [r3, #0]
 801558a:	f7ff bfd3 	b.w	8015534 <_raise_r>
 801558e:	bf00      	nop
 8015590:	2000001c 	.word	0x2000001c

08015594 <_kill_r>:
 8015594:	b538      	push	{r3, r4, r5, lr}
 8015596:	4d07      	ldr	r5, [pc, #28]	; (80155b4 <_kill_r+0x20>)
 8015598:	2300      	movs	r3, #0
 801559a:	4604      	mov	r4, r0
 801559c:	4608      	mov	r0, r1
 801559e:	4611      	mov	r1, r2
 80155a0:	602b      	str	r3, [r5, #0]
 80155a2:	f7eb f9bb 	bl	800091c <_kill>
 80155a6:	1c43      	adds	r3, r0, #1
 80155a8:	d102      	bne.n	80155b0 <_kill_r+0x1c>
 80155aa:	682b      	ldr	r3, [r5, #0]
 80155ac:	b103      	cbz	r3, 80155b0 <_kill_r+0x1c>
 80155ae:	6023      	str	r3, [r4, #0]
 80155b0:	bd38      	pop	{r3, r4, r5, pc}
 80155b2:	bf00      	nop
 80155b4:	2000aae4 	.word	0x2000aae4

080155b8 <_getpid_r>:
 80155b8:	f7eb b9a8 	b.w	800090c <_getpid>

080155bc <_fstat_r>:
 80155bc:	b538      	push	{r3, r4, r5, lr}
 80155be:	4d07      	ldr	r5, [pc, #28]	; (80155dc <_fstat_r+0x20>)
 80155c0:	2300      	movs	r3, #0
 80155c2:	4604      	mov	r4, r0
 80155c4:	4608      	mov	r0, r1
 80155c6:	4611      	mov	r1, r2
 80155c8:	602b      	str	r3, [r5, #0]
 80155ca:	f7eb fa08 	bl	80009de <_fstat>
 80155ce:	1c43      	adds	r3, r0, #1
 80155d0:	d102      	bne.n	80155d8 <_fstat_r+0x1c>
 80155d2:	682b      	ldr	r3, [r5, #0]
 80155d4:	b103      	cbz	r3, 80155d8 <_fstat_r+0x1c>
 80155d6:	6023      	str	r3, [r4, #0]
 80155d8:	bd38      	pop	{r3, r4, r5, pc}
 80155da:	bf00      	nop
 80155dc:	2000aae4 	.word	0x2000aae4

080155e0 <_isatty_r>:
 80155e0:	b538      	push	{r3, r4, r5, lr}
 80155e2:	4d06      	ldr	r5, [pc, #24]	; (80155fc <_isatty_r+0x1c>)
 80155e4:	2300      	movs	r3, #0
 80155e6:	4604      	mov	r4, r0
 80155e8:	4608      	mov	r0, r1
 80155ea:	602b      	str	r3, [r5, #0]
 80155ec:	f7eb fa07 	bl	80009fe <_isatty>
 80155f0:	1c43      	adds	r3, r0, #1
 80155f2:	d102      	bne.n	80155fa <_isatty_r+0x1a>
 80155f4:	682b      	ldr	r3, [r5, #0]
 80155f6:	b103      	cbz	r3, 80155fa <_isatty_r+0x1a>
 80155f8:	6023      	str	r3, [r4, #0]
 80155fa:	bd38      	pop	{r3, r4, r5, pc}
 80155fc:	2000aae4 	.word	0x2000aae4

08015600 <_init>:
 8015600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015602:	bf00      	nop
 8015604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015606:	bc08      	pop	{r3}
 8015608:	469e      	mov	lr, r3
 801560a:	4770      	bx	lr

0801560c <_fini>:
 801560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560e:	bf00      	nop
 8015610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015612:	bc08      	pop	{r3}
 8015614:	469e      	mov	lr, r3
 8015616:	4770      	bx	lr
